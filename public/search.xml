<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6-ES11笔记</title>
    <url>/2023/07/04/ES6-ES11%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="1-let"><a href="#1-let" class="headerlink" title="1.let"></a>1.let</h3><p>1、变量不能重<font color="#2DC26B">复声明  </font></p>
<p>2、块级<font color="#2DC26B">作用域  </font></p>
<p>3、<font color="#2DC26B">不存在变量提升</font>  </p>
<p>4、不影响作用域链</p>
<p>![[1_let_学习.html]]</p>
<h3 id="2-const"><a href="#2-const" class="headerlink" title="2.const"></a>2.const</h3><p>1、一定要赋初始值<br>2、一般常量使用大写<br>3、常量的值不能修改<br>4、块级作用域<br>5、对于数组和对象的元素修改，不算做对常量的修改</p>
<p>![[2_const_学习.html]]</p>
<h3 id="3-变量的解构赋值"><a href="#3-变量的解构赋值" class="headerlink" title="3.变量的解构赋值"></a>3.变量的解构赋值</h3><p>1、数组的解构赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cA=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">     <span class="keyword">let</span> [d,f,z]=A;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(f);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(z);</span><br></pre></td></tr></table></figure>

<p>2、对象的解构赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">const</span> a = &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">          <span class="attr">age</span>: <span class="number">66</span>,</span><br><span class="line">          <span class="attr">xxx</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;55656&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> &#123;name,age,xxx&#125;=a;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xxx);</span><br><span class="line">        <span class="title function_">xxx</span>();</span><br></pre></td></tr></table></figure>

<p>![[3_变量的解构赋值.html]]</p>
<h3 id="4-模板字符串"><a href="#4-模板字符串" class="headerlink" title="4.模板字符串"></a>4.模板字符串</h3><p>1、声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`我是模版字符串`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str,<span class="keyword">typeof</span> str);</span><br></pre></td></tr></table></figure>
<p>2、内容中可以直接出现换行符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;111&lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;222&lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;333&lt;li&gt;    </span></span><br><span class="line"><span class="string">        &lt;ul&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br></pre></td></tr></table></figure>
<p>3、变量的拼接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lovt = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;lovt&#125;</span> 666666666666666`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out);</span><br></pre></td></tr></table></figure>

<p>![[4_模版字符串.html]]</p>
<h3 id="5-简化对象写法"><a href="#5-简化对象写法" class="headerlink" title="5.简化对象写法"></a>5.简化对象写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name =<span class="string">&#x27;光锥&#x27;</span>;</span><br><span class="line">        <span class="keyword">let</span> chang = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;光锥之内皆是命运&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> school =&#123;</span><br><span class="line">            name,</span><br><span class="line">            chang,</span><br><span class="line">            <span class="title function_">impove</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;超越光锥才能超越命运&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>![[5_简化对象写法.html]]</p>
<h3 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6.箭头函数"></a>6.箭头函数</h3><p>1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值<br>2.不能作为构造实例化对象<br>3.不能使用 arguments 变量<br>4.箭头函数的简写</p>
<ol>
<li>省略小括号，当形参有且只有一个的时候</li>
<li>省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值<br>![[6_箭头函数.html]]<br>5.练习<br>![[7_箭头函数的案例.html]]</li>
</ol>
<h3 id="7-参数默认值"><a href="#7-参数默认值" class="headerlink" title="7.参数默认值"></a>7.参数默认值</h3><p>1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">      <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">123</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  2.与解构赋值结合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connrct</span>(<span class="params">&#123;host=<span class="string">&#x27;127.0.0.1&#x27;</span>,username,password,port&#125;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">connrct</span>(&#123;</span><br><span class="line">        <span class="comment">// host:&quot;百度.com&quot;,</span></span><br><span class="line">        <span class="attr">username</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="attr">port</span>:<span class="number">8080</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8-rest参数"><a href="#8-rest参数" class="headerlink" title="8.rest参数"></a>8.rest参数</h3><p>1.ES5 获取实参的方式    对象形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_">date</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>![[Pasted image 20230611231727.png]]</p>
<p>2.rest 参数必须要放到参数最后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b,...args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">69</span>,<span class="number">6</span>,<span class="number">88</span>);</span><br></pre></td></tr></table></figure>
<p>![[Pasted image 20230611231830.png]]</p>
<h3 id="9-扩展运算符的认识和应用"><a href="#9-扩展运算符的认识和应用" class="headerlink" title="9.扩展运算符的认识和应用"></a>9.扩展运算符的认识和应用</h3><p>1.认识 扩展运算符     ES6 【…】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line">      <span class="keyword">const</span> arr = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>]; <span class="comment">//【数组】</span></span><br><span class="line">      <span class="comment">// =&gt; &#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;   【参数序列】</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 声明一个函数</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">chang</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">chang</span>(...arr); <span class="comment">//chang(&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;)   【参数序列】</span></span><br><span class="line">      <span class="title function_">chang</span>(arr);</span><br></pre></td></tr></table></figure>
<p>2.扩展运算符的应用<br> 1).数组的合并
 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AArr</span> = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>];</span><br><span class="line">     <span class="keyword">const</span> <span class="title class_">BArr</span> = [<span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>];</span><br><span class="line">     <span class="keyword">const</span> <span class="title class_">CArr</span> = <span class="title class_">AArr</span>.<span class="title function_">concat</span>(<span class="title class_">AArr</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">CArr</span>);</span><br><span class="line">     <span class="keyword">const</span> <span class="title class_">DArr</span> = [...<span class="title class_">AArr</span>, ...<span class="title class_">BArr</span>];</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DArr</span>);</span><br></pre></td></tr></table></figure>
<p>2).数组的克隆   浅克隆</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">KArr</span> = [<span class="string">&quot;H&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>];</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">YArr</span> = [...<span class="title class_">KArr</span>];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">YArr</span>);</span><br></pre></td></tr></table></figure>

<p>3).将伪类数组转换为真正的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> divs=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(divs);</span><br><span class="line">      <span class="keyword">const</span> divArr = [...divs];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(divArr);</span><br></pre></td></tr></table></figure>



<h3 id="10-Symbol的认识与创建"><a href="#10-Symbol的认识与创建" class="headerlink" title="10.Symbol的认识与创建"></a>10.Symbol的认识与创建</h3><p>1.创建Symobl</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&quot;光锥&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;光锥&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1, s2, s1 == s4);</span><br></pre></td></tr></table></figure>

<p>2  Symbol.for 创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&quot;光锥&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>(<span class="string">&quot;光锥&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(s3, s4, s3 == s4);</span><br></pre></td></tr></table></figure>

<p>3.不能与其他数据进行运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = s+1100l;</span><br><span class="line">      <span class="keyword">let</span> result = s&gt;1100l;</span><br><span class="line">      <span class="keyword">let</span> result = s+s;</span><br></pre></td></tr></table></figure>


<p>4.JS 基本数据类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">USONB</span>  you are so niubility</span><br><span class="line">     u  <span class="literal">undefined</span></span><br><span class="line">     s string symbol</span><br><span class="line">     o  object</span><br><span class="line">     n number <span class="literal">null</span></span><br><span class="line">     b boolean</span><br></pre></td></tr></table></figure>

<h3 id="11-Symbol创建对象属性"><a href="#11-Symbol创建对象属性" class="headerlink" title="11.Symbol创建对象属性"></a>11.Symbol创建对象属性</h3><p>1.创建方式一</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向对象中添加方法  up  down</span></span><br><span class="line">      <span class="keyword">let</span> game = &#123;</span><br><span class="line">        <span class="title function_">up</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原up方法&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">down</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原down方法&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;光锥&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   声明一个对象</span></span><br><span class="line">    <span class="keyword">let</span> methods= &#123;</span><br><span class="line">        <span class="attr">up</span>:<span class="title class_">Symbol</span>(),</span><br><span class="line">        <span class="attr">down</span>:<span class="title class_">Symbol</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    game[methods.<span class="property">up</span>]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Symbol的up方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    game[methods.<span class="property">down</span>]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Symbol的down方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(game);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.创建方式二</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> youxi=&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;奇葩&#x27;</span>,</span><br><span class="line">        [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Say&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        [<span class="title class_">Symbol</span>(<span class="string">&#x27;see&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;see&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(youxi);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="12-Symbol内置属性"><a href="#12-Symbol内置属性" class="headerlink" title="12.Symbol内置属性"></a>12.Symbol内置属性</h3><p>1.hasInstance 和 isConcatSpreadable 的认识</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](param)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(param)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类型检测&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> o=&#123;&#125;;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(o <span class="keyword">instanceof</span> <span class="title class_">Person</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">      <span class="keyword">const</span> arr2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">      arr2[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>]=<span class="literal">false</span>;<span class="comment">//可用于数组内的数组是否展开</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">concat</span>(arr2));</span><br></pre></td></tr></table></figure>
<p>2.更多Symbol参数认识<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol - JavaScript | MDN</a></p>
<p>hexo init “鱼有个梦想的个人博客” # 目录名称不含空格的时候双引号可以省略<br>hexo : 无法加载文件 C:\Users\26524\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https<br>:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的 about_Execution_Policies。<br>所在位置 行:1 字符: 1</p>
<ul>
<li>hexo init “鱼有个梦想的个人博客” # 目录名称不含空格的时候双引号可以省略<br>![[Pasted image 20230618162528.png]]</li>
</ul>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>图床</title>
    <url>/2023/07/04/%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h3 id="1-下载PicGo-PicGo"><a href="#1-下载PicGo-PicGo" class="headerlink" title="1.下载PicGo PicGo"></a>1.下载PicGo PicGo</h3><p>下载地址: <a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></p>
<h3 id="2-创建GitHub仓库"><a href="#2-创建GitHub仓库" class="headerlink" title="2.创建GitHub仓库"></a>2.创建GitHub仓库</h3><p><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOEIH.png"><br>点自己头像，点Setting<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOx0S.png"></p>
<p>再点Developer settings<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOzTg.jpg"></p>
<p>再点Personal access tokens<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXpkQ.png"></p>
<p>填写内容，记得勾选repo<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXCfs.png"></p>
<p>复制生成的token,（再关闭网页这个token就没法复制了）</p>
<h3 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230704220025.png"></p>
<h3 id="加速访问"><a href="#加速访问" class="headerlink" title="加速访问"></a>加速访问</h3><p>大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？</p>
<p>这时候我们就可以用 <a href="https://link.zhihu.com/?target=https://www.jsdelivr.com/">jsDelivr</a> 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；</p>
<blockquote>
<p><code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code></p>
</blockquote>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>常用</title>
    <url>/2023/07/04/%E5%B8%B8%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1-git"><a href="#1-git" class="headerlink" title="1.git"></a>1.git</h3><p>1.添加子模块<br>git submodule add <a href="https://github.com/YuLong-cmd/hexo-theme-butterfly.git">https://github.com/YuLong-cmd/hexo-theme-butterfly.git</a>   butterfly</p>
<ol>
<li>新增子模块<br>向一个项目中添加子模块</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule add https://github.com/yyy/xxx.git</span><br></pre></td></tr></table></figure>

<p>之后会 clone 该子模块对应的远程项目文件到本地父项目目录下的同名文件夹中（.&#x2F;xxx&#x2F;），父项目下也会多一个叫 .gitmodules 的文件，内容大致为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[submodule &quot;xxx&quot;]</span><br><span class="line">	path = xxx</span><br><span class="line">	url = git@github.com:yyy/xxx.git</span><br></pre></td></tr></table></figure>
<p>如果存在多个子模块，则会继续向该文件中追加与上面相同格式的内容；</p>
<p>同时父项目下的 .git 目录中也会新增 &#x2F;modules&#x2F;xxx&#x2F; 目录，里面的内容对应子模块仓库中原有的 .git 目录中的文件，此时虽然子模块目录下的 .git 依然存在，但是已经由一个文件夹变成了文件，内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitdir: ../.git/modules/xxx</span><br></pre></td></tr></table></figure>
<p>即指向了父项目的 .git&#x2F;modules&#x2F;xxx 目录；如果运行 git config –list 查看项目的配置，也会发现多了类似下面两行的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">submodule.xxx.url=git@github.com:yyy/xxx.git</span><br><span class="line">submodule.xxx.active=true</span><br></pre></td></tr></table></figure>
<p>如果修改 submodule.xxx.url 的值，则会覆盖 .gitmodules 文件中对应的 url 值；</p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
