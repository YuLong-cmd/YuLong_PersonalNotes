<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6-ES11笔记</title>
    <url>/2023/07/04/ES6-ES11%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="1-let"><a href="#1-let" class="headerlink" title="1.let"></a>1.let</h3><p>1、变量不能重<font color="#2DC26B">复声明  </font></p>
<p>2、块级<font color="#2DC26B">作用域  </font></p>
<p>3、<font color="#2DC26B">不存在变量提升</font>  </p>
<p>4、不影响作用域链</p>
<p>![[1_let_学习.html]]</p>
<h3 id="2-const"><a href="#2-const" class="headerlink" title="2.const"></a>2.const</h3><p>1、一定要赋初始值<br>2、一般常量使用大写<br>3、常量的值不能修改<br>4、块级作用域<br>5、对于数组和对象的元素修改，不算做对常量的修改</p>
<p>![[2_const_学习.html]]</p>
<h3 id="3-变量的解构赋值"><a href="#3-变量的解构赋值" class="headerlink" title="3.变量的解构赋值"></a>3.变量的解构赋值</h3><p>1、数组的解构赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cA=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">     <span class="keyword">let</span> [d,f,z]=A;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(f);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(z);</span><br></pre></td></tr></table></figure>

<p>2、对象的解构赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">const</span> a = &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">          <span class="attr">age</span>: <span class="number">66</span>,</span><br><span class="line">          <span class="attr">xxx</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;55656&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> &#123;name,age,xxx&#125;=a;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xxx);</span><br><span class="line">        <span class="title function_">xxx</span>();</span><br></pre></td></tr></table></figure>

<p>![[3_变量的解构赋值.html]]</p>
<h3 id="4-模板字符串"><a href="#4-模板字符串" class="headerlink" title="4.模板字符串"></a>4.模板字符串</h3><p>1、声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`我是模版字符串`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str,<span class="keyword">typeof</span> str);</span><br></pre></td></tr></table></figure>
<p>2、内容中可以直接出现换行符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;111&lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;222&lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;333&lt;li&gt;    </span></span><br><span class="line"><span class="string">        &lt;ul&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br></pre></td></tr></table></figure>
<p>3、变量的拼接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lovt = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;lovt&#125;</span> 666666666666666`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out);</span><br></pre></td></tr></table></figure>

<p>![[4_模版字符串.html]]</p>
<h3 id="5-简化对象写法"><a href="#5-简化对象写法" class="headerlink" title="5.简化对象写法"></a>5.简化对象写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name =<span class="string">&#x27;光锥&#x27;</span>;</span><br><span class="line">        <span class="keyword">let</span> chang = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;光锥之内皆是命运&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> school =&#123;</span><br><span class="line">            name,</span><br><span class="line">            chang,</span><br><span class="line">            <span class="title function_">impove</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;超越光锥才能超越命运&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>![[5_简化对象写法.html]]</p>
<h3 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6.箭头函数"></a>6.箭头函数</h3><p>1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值<br>2.不能作为构造实例化对象<br>3.不能使用 arguments 变量<br>4.箭头函数的简写</p>
<ol>
<li>省略小括号，当形参有且只有一个的时候</li>
<li>省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值<br>![[6_箭头函数.html]]<br>5.练习<br>![[7_箭头函数的案例.html]]</li>
</ol>
<h3 id="7-参数默认值"><a href="#7-参数默认值" class="headerlink" title="7.参数默认值"></a>7.参数默认值</h3><p>1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">      <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">123</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  2.与解构赋值结合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connrct</span>(<span class="params">&#123;host=<span class="string">&#x27;127.0.0.1&#x27;</span>,username,password,port&#125;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">connrct</span>(&#123;</span><br><span class="line">        <span class="comment">// host:&quot;百度.com&quot;,</span></span><br><span class="line">        <span class="attr">username</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="attr">port</span>:<span class="number">8080</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8-rest参数"><a href="#8-rest参数" class="headerlink" title="8.rest参数"></a>8.rest参数</h3><p>1.ES5 获取实参的方式    对象形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_">date</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>![[Pasted image 20230611231727.png]]</p>
<p>2.rest 参数必须要放到参数最后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b,...args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">69</span>,<span class="number">6</span>,<span class="number">88</span>);</span><br></pre></td></tr></table></figure>
<p>![[Pasted image 20230611231830.png]]</p>
<h3 id="9-扩展运算符的认识和应用"><a href="#9-扩展运算符的认识和应用" class="headerlink" title="9.扩展运算符的认识和应用"></a>9.扩展运算符的认识和应用</h3><p>1.认识 扩展运算符     ES6 【…】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line">      <span class="keyword">const</span> arr = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>]; <span class="comment">//【数组】</span></span><br><span class="line">      <span class="comment">// =&gt; &#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;   【参数序列】</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 声明一个函数</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">chang</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">chang</span>(...arr); <span class="comment">//chang(&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;)   【参数序列】</span></span><br><span class="line">      <span class="title function_">chang</span>(arr);</span><br></pre></td></tr></table></figure>
<p>2.扩展运算符的应用<br> 1).数组的合并
 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AArr</span> = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>];</span><br><span class="line">     <span class="keyword">const</span> <span class="title class_">BArr</span> = [<span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>];</span><br><span class="line">     <span class="keyword">const</span> <span class="title class_">CArr</span> = <span class="title class_">AArr</span>.<span class="title function_">concat</span>(<span class="title class_">AArr</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">CArr</span>);</span><br><span class="line">     <span class="keyword">const</span> <span class="title class_">DArr</span> = [...<span class="title class_">AArr</span>, ...<span class="title class_">BArr</span>];</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DArr</span>);</span><br></pre></td></tr></table></figure>
<p>2).数组的克隆   浅克隆</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">KArr</span> = [<span class="string">&quot;H&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>];</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">YArr</span> = [...<span class="title class_">KArr</span>];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">YArr</span>);</span><br></pre></td></tr></table></figure>

<p>3).将伪类数组转换为真正的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> divs=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(divs);</span><br><span class="line">      <span class="keyword">const</span> divArr = [...divs];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(divArr);</span><br></pre></td></tr></table></figure>



<h3 id="10-Symbol的认识与创建"><a href="#10-Symbol的认识与创建" class="headerlink" title="10.Symbol的认识与创建"></a>10.Symbol的认识与创建</h3><p>1.创建Symobl</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&quot;光锥&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;光锥&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1, s2, s1 == s4);</span><br></pre></td></tr></table></figure>

<p>2  Symbol.for 创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&quot;光锥&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>(<span class="string">&quot;光锥&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(s3, s4, s3 == s4);</span><br></pre></td></tr></table></figure>

<p>3.不能与其他数据进行运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = s+1100l;</span><br><span class="line">      <span class="keyword">let</span> result = s&gt;1100l;</span><br><span class="line">      <span class="keyword">let</span> result = s+s;</span><br></pre></td></tr></table></figure>


<p>4.JS 基本数据类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">USONB</span>  you are so niubility</span><br><span class="line">     u  <span class="literal">undefined</span></span><br><span class="line">     s string symbol</span><br><span class="line">     o  object</span><br><span class="line">     n number <span class="literal">null</span></span><br><span class="line">     b boolean</span><br></pre></td></tr></table></figure>

<h3 id="11-Symbol创建对象属性"><a href="#11-Symbol创建对象属性" class="headerlink" title="11.Symbol创建对象属性"></a>11.Symbol创建对象属性</h3><p>1.创建方式一</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向对象中添加方法  up  down</span></span><br><span class="line">      <span class="keyword">let</span> game = &#123;</span><br><span class="line">        <span class="title function_">up</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原up方法&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">down</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原down方法&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;光锥&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   声明一个对象</span></span><br><span class="line">    <span class="keyword">let</span> methods= &#123;</span><br><span class="line">        <span class="attr">up</span>:<span class="title class_">Symbol</span>(),</span><br><span class="line">        <span class="attr">down</span>:<span class="title class_">Symbol</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    game[methods.<span class="property">up</span>]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Symbol的up方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    game[methods.<span class="property">down</span>]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Symbol的down方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(game);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.创建方式二</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> youxi=&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;奇葩&#x27;</span>,</span><br><span class="line">        [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Say&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        [<span class="title class_">Symbol</span>(<span class="string">&#x27;see&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;see&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(youxi);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="12-Symbol内置属性"><a href="#12-Symbol内置属性" class="headerlink" title="12.Symbol内置属性"></a>12.Symbol内置属性</h3><p>1.hasInstance 和 isConcatSpreadable 的认识</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](param)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(param)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类型检测&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> o=&#123;&#125;;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(o <span class="keyword">instanceof</span> <span class="title class_">Person</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">      <span class="keyword">const</span> arr2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">      arr2[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>]=<span class="literal">false</span>;<span class="comment">//可用于数组内的数组是否展开</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">concat</span>(arr2));</span><br></pre></td></tr></table></figure>
<p>2.更多Symbol参数认识<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol - JavaScript | MDN</a></p>
<h3 id="20-promise方法的认识"><a href="#20-promise方法的认识" class="headerlink" title="20.promise方法的认识"></a>20.promise方法的认识</h3><h4 id="1-promise的基础认知"><a href="#1-promise的基础认知" class="headerlink" title="1.promise的基础认知"></a>1.promise的基础认知</h4><p> 1.Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。除了异步操作的结果，任何其他操作都无法改变这个状态。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化 Promise 对象   定义</span></span><br><span class="line">        <span class="keyword">const</span> p =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>) &#123;</span><br><span class="line">            <span class="comment">// resolve  成功</span></span><br><span class="line">            <span class="comment">// reject   失败 </span></span><br><span class="line">            <span class="comment">// 成功和失败不会同时进行</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> date= <span class="string">&#x27;数据库中的用户数据&#x27;</span>;</span><br><span class="line">                <span class="title function_">resolve</span>(date);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> err= <span class="string">&#x27;出错了&#x27;</span>;</span><br><span class="line">                <span class="title function_">reject</span>(err);</span><br><span class="line">            &#125;,<span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 promise 对象的 then 方法</span></span><br><span class="line">        p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功：&#x27;</span>+value);</span><br><span class="line">        &#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(reason);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>


<p>2.使用 promise  读取文件<br>结构目录<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/202308032335074.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.首先引入 fs 模块   前提条件  安装 node.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法读取文件</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./21_promise读取文件/倔强.md&#x27;, (err, date) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     // 如果失败，则抛出错误</span></span><br><span class="line"><span class="comment">//     if (err) throw err;</span></span><br><span class="line"><span class="comment">//     // 如果成功，则输出内容  date  单纯的它是一个buffer对象  &lt;Buffer e9 80 86 e9 a3 8e e7 9a 84 e6 96 b9 e5 90 91 20 e6 9b b4 e9 80 82 e5 90 88 e9 a3 9e e7 bf 94 0d 0a e6 88 91 e4 b8 8d e6 80 95 e5 8d 83 e4 b8 87 e4 ba ... 71 more bytes&gt;</span></span><br><span class="line"><span class="comment">//     console.log(date.toString());</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.使用Promise 封装</span></span><br><span class="line"><span class="keyword">const</span> p= <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./21_promise读取文件/倔强.md&#x27;</span>, <span class="function">(<span class="params">err, date</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 判断如果失败</span></span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="comment">// 如果成功</span></span><br><span class="line">        <span class="title function_">resolve</span>(date);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败：&#x27;</span> + reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="2-promise的案例"><a href="#2-promise的案例" class="headerlink" title="2.promise的案例"></a>2.promise的案例</h4><p>使用Promise封装 AJAX<br>api  已经失效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resove, reject</span>) &#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">// 2.初始化</span></span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.发送</span></span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">        <span class="comment">// 4.绑定事件，处理响应结果</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断响应状态码 200-299</span></span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">              <span class="comment">// 表示成功</span></span><br><span class="line">              <span class="title function_">resove</span>(xhr.<span class="property">response</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 如果失败</span></span><br><span class="line">              <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      p.<span class="title function_">then</span>(</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="23-Promise的Then方法"><a href="#23-Promise的Then方法" class="headerlink" title="23 Promise的Then方法"></a>23 Promise的Then方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">// 创建Promise对象</span></span><br><span class="line">      <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="string">&quot;用户数据&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//   调用Then方法   Then方法的返回结果是Promise对象， 对象状态由回调函数的执行结果决定</span></span><br><span class="line">      <span class="comment">// 1.如果回调函数的返回结果是 非 Promise 类型的属性，状态为成功</span></span><br><span class="line">      <span class="keyword">const</span> result = p.<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">          <span class="comment">// 1.非promise 类型的属性</span></span><br><span class="line">          <span class="comment">// return &quot;66666&quot;;</span></span><br><span class="line">          <span class="comment">// 2.是 promise 类型的 对象</span></span><br><span class="line">          <span class="comment">// return new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class="line">          <span class="comment">//     resolve(&quot;OK&quot;);</span></span><br><span class="line">          <span class="comment">//     reject(&quot;error&quot;);</span></span><br><span class="line">          <span class="comment">// &#125;)</span></span><br><span class="line">          <span class="comment">// 3. 抛出错误</span></span><br><span class="line">          <span class="comment">// throw new Error(&#x27;出错了&#x27;);</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="string">&quot;出错了&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">//   2. 链式调用   可用于解决  回调地狱</span></span><br><span class="line">      p.<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">        <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">      ).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">        <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">      );</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="24-Promise的实例实践"><a href="#24-Promise的实例实践" class="headerlink" title="24 Promise的实例实践"></a>24 Promise的实例实践</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1.首先引入 fs 模块   前提条件  安装 node.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标 读取三个文件</span></span><br><span class="line"><span class="comment">// 1.回调地狱的写法</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./promise读取文件/倔强.md&#x27;</span>,<span class="function">(<span class="params">error1,data1</span>)=&gt;</span>&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./promise读取文件/后青春期的诗.md&#x27;</span>,<span class="function">(<span class="params">error2, data2</span>)=&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./promise读取文件/知足.md&#x27;</span>, <span class="function">(<span class="params">error3, data3</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> result  = data1 +<span class="string">&#x27;\r\n&#x27;</span> + data2 +<span class="string">&#x27;\r\n&#x27;</span> +data3;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.promise 方式实现</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./promise读取文件/知足.md&#x27;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value, reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./promise读取文件/后青春期的诗.md&#x27;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([value, data]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">value, reson</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./promise读取文件/倔强.md&#x27;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">            value.<span class="title function_">push</span>(data);</span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">value, reson</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&#x27;\r\n&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="25-Promise的catch"><a href="#25-Promise的catch" class="headerlink" title="25   Promise的catch"></a>25   Promise的catch</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 设置p对象的状态为失败，并设置失败的值</span></span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">       &#125;,<span class="function">(<span class="params">reson</span>)=&gt;</span>&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">warn</span>(reson);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// catch  是当promise出现异常  终止时使用的   也可以使用  then 的方式进行替代  then  有两个参数  一个是成功一个是失败  失败的场合  类似于异常</span></span><br><span class="line">    p.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reson</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(reson);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="26-ES6集合的认识"><a href="#26-ES6集合的认识" class="headerlink" title="26  ES6集合的认识"></a>26  ES6集合的认识</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set   ES6  提供了新的数据结构 set 集合  它类似于数组，但成员变量的值是唯一的，集合实现了iterator接口  所以可以使用 扩展运算符 和 for  of 进行遍历主要方法有：</span></span><br><span class="line">        <span class="comment">// size  返回集合元素的个数</span></span><br><span class="line">        <span class="comment">// add  增加一个新元素返回当前集合</span></span><br><span class="line">        <span class="comment">// delete 删除元素 返回布尔值</span></span><br><span class="line">        <span class="comment">// has 检测集合中是否包含某个元素，返回boolean值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.声明一个set</span></span><br><span class="line">        <span class="keyword">let</span> s =<span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">        <span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 元素个数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="property">size</span>);</span><br><span class="line">        <span class="comment">// 添加新元素</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="title function_">add</span>(<span class="string">&#x27;6666&#x27;</span>));</span><br><span class="line">        <span class="comment">// 删除元素</span></span><br><span class="line">        s2.<span class="title function_">delete</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s2);</span><br><span class="line">        <span class="comment">// 检测</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="title function_">has</span>(<span class="string">&#x27;g&#x27;</span>));</span><br><span class="line">        <span class="comment">// 清空</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="property">clear</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s2)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="27-Es6-集合的实践"><a href="#27-Es6-集合的实践" class="headerlink" title="27 Es6  集合的实践"></a>27 Es6  集合的实践</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line">      <span class="number">1.</span>数组去重</span><br><span class="line">      <span class="keyword">let</span> arrdis = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arrdis);</span><br><span class="line">      <span class="number">2.</span>交集</span><br><span class="line">        <span class="keyword">let</span> result1 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line">        <span class="keyword">let</span> result = result1.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> result2 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr2);</span><br><span class="line">          <span class="keyword">if</span> (result2.<span class="title function_">has</span>(item)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//   简写</span></span><br><span class="line">        <span class="keyword">let</span> result2 = result1.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br><span class="line"></span><br><span class="line">      <span class="number">3.</span>并集</span><br><span class="line">      <span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr,...arr2])];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line">      <span class="number">4.</span>差集</span><br><span class="line">      <span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> !<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<p>结果：<br>Set集合实践_并集<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/27_Set%E9%9B%86%E5%90%88%E5%AE%9E%E8%B7%B5_%E5%B9%B6%E9%9B%86.png"></p>
<p>Set集合实践_数组去重<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/27_Set%E9%9B%86%E5%90%88%E5%AE%9E%E8%B7%B5_%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D.png"></p>
<p>Set集合实践_交集<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/27_Set%E9%9B%86%E5%90%88%E5%AE%9E%E8%B7%B5_%E4%BA%A4%E9%9B%86.png"></p>
<p>Set集合实践_差集<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/27_Set%E9%9B%86%E5%90%88%E5%AE%9E%E8%B7%B5_%E5%B7%AE%E9%9B%86.png"></p>
<h3 id="28-Map集合"><a href="#28-Map集合" class="headerlink" title="28 Map集合"></a>28 Map集合</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Map的认识</span></span><br><span class="line">        <span class="comment">// map类似于对象，也是键值对的集合 但键的范围不在局限于字符串，各种类型的值（包括对象）都可以作为键。map也实现；额iterator接口，所以可以使用扩展运算符和 for...of.. 进行遍历。</span></span><br><span class="line">        <span class="comment">// map 的属性和方法：</span></span><br><span class="line">        <span class="comment">// 1.size 返回map的元素个数</span></span><br><span class="line">        <span class="comment">// 2. set 增加一个新元素，返回当前的map</span></span><br><span class="line">        <span class="comment">// 3.get 返回键名对象的键值</span></span><br><span class="line">        <span class="comment">// 4.has 检测Map中是否包含某个元素返回boolean值</span></span><br><span class="line">        <span class="comment">// 5.clear 清空集合 返回 undefined</span></span><br><span class="line">        <span class="comment">// 6.delete 删除map里面的某个元素  返回boolean值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.声明map</span></span><br><span class="line">        <span class="keyword">let</span> m=<span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;光&#x27;</span>);</span><br><span class="line">        m.<span class="title function_">set</span>(<span class="string">&#x27;change&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;map 里面的一个方法&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> key =&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;迪迦&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        m.<span class="title function_">set</span>(key,<span class="string">&#x27;66666&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for of </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------for of ------&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// size</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------size------&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>);</span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------删除------&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line">        <span class="comment">// 获取</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------获取------&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&#x27;change&#x27;</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(key));</span><br><span class="line">        <span class="comment">// 清除</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------清除------&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">clear</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/28_Map%E9%9B%86%E5%90%88.png"></p>
<p>29 Class 类 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Es6 class类可以 看做只是一个语法糖，它的绝大部分功能，Es5都可以做到，新的class写法只是让对象原型的写法更加清晰，更像面向对象编程的语法而已。</span></span><br><span class="line">      <span class="comment">// 1.class 声明类</span></span><br><span class="line">      <span class="comment">// 2.constructor 定义函数初始化</span></span><br><span class="line">      <span class="comment">// 3.extends 继承父类</span></span><br><span class="line">      <span class="comment">// 4.super 调用父类构造方法</span></span><br><span class="line">      <span class="comment">// 5.static 定义静态方法和属性</span></span><br><span class="line">      <span class="comment">// 6.父类方法可以重写</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 1.Es5 原型形式</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 添加方法</span></span><br><span class="line">      <span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是一部手机&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 实例化对象</span></span><br><span class="line">      <span class="keyword">let</span> huawei = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;华为&quot;</span>, <span class="number">5999</span>);</span><br><span class="line">      huawei.<span class="title function_">call</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(huawei);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.class</span></span><br><span class="line">      <span class="keyword">class</span> <span class="title class_">shouji</span> &#123;</span><br><span class="line">        <span class="comment">// 构造方法 名字不能修改</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法必须使用该语法，不能使用Es5 的对象完整形式</span></span><br><span class="line">        <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1+&quot;</span>, <span class="number">66666</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> onePhone = <span class="keyword">new</span> <span class="title function_">shouji</span>(<span class="string">&quot;1+&quot;</span>, <span class="number">666</span>);</span><br><span class="line">      onePhone.<span class="title function_">call</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(onePhone);</span><br></pre></td></tr></table></figure>

<p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/29_Class%E8%AE%A4%E8%AF%86.png"></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot核心功能</title>
    <url>/2023/07/11/SpringBoot%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="SpringBoot核心功能"><a href="#SpringBoot核心功能" class="headerlink" title="SpringBoot核心功能"></a>SpringBoot核心功能</h1><p>重点：</p>
<p>springboot使用的springmvc的底层 所有请求都经过 DispatchServlet.java文件</p>
<h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h2><h3 id="1-文件类型"><a href="#1-文件类型" class="headerlink" title="1.文件类型"></a>1.文件类型</h3><p><strong>properties文件的优先级高于yaml</strong></p>
<h4 id="1-1-properties"><a href="#1-1-properties" class="headerlink" title="1.1 properties"></a>1.1 properties</h4><p>同以前的properties用法</p>
<h4 id="1-2-yaml"><a href="#1-2-yaml" class="headerlink" title="1.2 yaml"></a>1.2 yaml</h4><h5 id="1-2-1-简介"><a href="#1-2-1-简介" class="headerlink" title="1.2.1 简介"></a>1.2.1 简介</h5><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p>
<p>非常适合用来做以数据为中心的配置文件</p>
<h5 id="1-2-2-基本语法"><a href="#1-2-2-基本语法" class="headerlink" title="1.2.2 基本语法"></a>1.2.2 基本语法</h5><ul>
<li>key: value；kv之间有空格</li>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进不允许使用tab，只允许空格</li>
<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>
<li>‘#’表示注释</li>
<li>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义&#x2F;不转义</li>
</ul>
<p><strong>‘  ’</strong>会被以串字符串输出</p>
<h5 id="1-2-3-数据类型"><a href="#1-2-3-数据类型" class="headerlink" title="1.2.3 数据类型"></a>1.2.3 数据类型</h5><ul>
<li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象：键值对的集合。map、hash、set、object</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> &#123;<span class="string">k1:v1</span>,<span class="string">k2:v2</span>,<span class="string">k3:v3</span>&#125;</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组：一组按次序排列的值。array、list、queue</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2-4-示例"><a href="#1-2-4-示例" class="headerlink" title="1.2.4 示例"></a>1.2.4 示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> Boolean boss;</span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> Pet pet;</span><br><span class="line">	<span class="keyword">private</span> String[] interests;</span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Double weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yaml表示以上对象</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/12/12</span> <span class="number">20</span><span class="string">:12:33</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pet:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">23.4</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">篮球</span>,<span class="string">游泳</span>]</span><br><span class="line">  <span class="attr">animal:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">jerry</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mario</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">english:</span> </span><br><span class="line">      <span class="attr">first:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">second:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">third:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">math:</span> [<span class="number">131</span>,<span class="number">140</span>,<span class="number">148</span>]</span><br><span class="line">    <span class="attr">chinese:</span> &#123;<span class="attr">first:</span> <span class="number">128</span>,<span class="attr">second:</span> <span class="number">136</span>&#125;</span><br><span class="line">  <span class="attr">salarys:</span> [<span class="number">3999</span>,<span class="number">4999.98</span>,<span class="number">5999.99</span>]</span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tom</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">jerry</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;</span><br><span class="line">    <span class="attr">health:</span> [&#123;<span class="attr">name:</span> <span class="string">mario</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;]</span><br></pre></td></tr></table></figure>

<h3 id="2-配置提示"><a href="#2-配置提示" class="headerlink" title="2. 配置提示"></a>2. 配置提示</h3><p>自定义的类和配置文件绑定一般没有提示。</p>
<p>如何来使它有提示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        用于自定义的类和配置文件绑定后有提示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                用于打包后将自定义的类和配置文件绑定提示的相关依赖去除 减少文件占用--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-Web开发"><a href="#2-Web开发" class="headerlink" title="2. Web开发"></a>2. Web开发</h2><p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220509133335937.png" alt="image-20220509133335937"></p>
<h3 id="1-SpringMVC自动配置概览"><a href="#1-SpringMVC自动配置概览" class="headerlink" title="1. SpringMVC自动配置概览"></a>1. SpringMVC自动配置概览</h3><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p>
<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
</li>
<li><ul>
<li>内容协商视图解析器和BeanName视图解析器</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).</p>
</li>
<li><ul>
<li>静态资源（包括webjars）</li>
</ul>
</li>
<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>
</li>
<li><ul>
<li>自动注册 <code>Converter，GenericConverter，Formatter </code></li>
</ul>
</li>
<li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).</p>
</li>
<li><ul>
<li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li>
</ul>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).</p>
</li>
<li><ul>
<li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li>
</ul>
</li>
<li><p>Static <code>index.html</code> support.</p>
</li>
<li><ul>
<li>静态index.html 页支持</li>
</ul>
</li>
<li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).</p>
</li>
<li><ul>
<li>自定义 <code>Favicon</code></li>
</ul>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).</p>
</li>
<li><ul>
<li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li>
</ul>
</li>
</ul>
<p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>
<p><strong>不用@EnableWebMvc注解。使用</strong> <code>**@Configuration**</code> <strong>+</strong> <code>**WebMvcConfigurer**</code> <strong>自定义规则</strong></p>
<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>
<p><strong>声明</strong> <code>**WebMvcRegistrations**</code> <strong>改变默认底层组件</strong></p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>
<p><strong>使用</strong> <code>**@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC**</code></p>
<h3 id="2-简单功能分析"><a href="#2-简单功能分析" class="headerlink" title="2.简单功能分析"></a>2.简单功能分析</h3><h4 id="2-1-静态资源访问"><a href="#2-1-静态资源访问" class="headerlink" title="2.1 静态资源访问"></a>2.1 静态资源访问</h4><h5 id="1-静态资源目录"><a href="#1-静态资源目录" class="headerlink" title="1. 静态资源目录"></a>1. 静态资源目录</h5><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p>
<p>访问 ： 当前项目根路径&#x2F; + 静态资源名 </p>
<p>原理： 静态映射&#x2F;**。</p>
<p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p>
<p>改变默认的静态资源路径</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>

<h5 id="2-静态资源访问前缀"><a href="#2-静态资源访问前缀" class="headerlink" title="2.静态资源访问前缀"></a>2.静态资源访问前缀</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure>

<p>当前项目 + static-path-pattern + 静态资源名 &#x3D; 静态资源文件夹下找</p>
<h5 id="3-webjar"><a href="#3-webjar" class="headerlink" title="3.webjar"></a>3.webjar</h5><p>一些静态资源通过地址进行访问或者调用，首先导入相关静态资源的依赖如（jquery)在找到相关包所在的路径通过返回值进行返回</p>
<p>自动映射 &#x2F;<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">webjars</a>&#x2F;**</p>
<p><a href="https://www.webjars.org/">https://www.webjars.org/</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery&#x2F;3.5.1&#x2F;jquery.js</strong></a>   后面地址要按照依赖里面的包路径</p>
<h4 id="2-2-欢迎页支持"><a href="#2-2-欢迎页支持" class="headerlink" title="2.2 欢迎页支持"></a>2.2 欢迎页支持</h4><ul>
<li><p>静态资源路径下  index.html</p>
</li>
<li><ul>
<li><p>可以配置静态资源路径</p>
</li>
<li><p>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**     #这个会导致welcome page功能失效</span></span><br><span class="line">   <span class="attr">resources:</span></span><br><span class="line">     <span class="attr">static-locations:</span> [<span class="string">classpath:/yu/</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>controller能处理&#x2F;index</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-3-、自定义-Favicon"><a href="#2-3-、自定义-Favicon" class="headerlink" title="2.3 、自定义 Favicon"></a>2.3 、自定义 <code>Favicon</code></h4><p>favicon.ico 放在静态资源目录下即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-静态资源配置原理"><a href="#2-4-静态资源配置原理" class="headerlink" title="2.4 静态资源配置原理"></a>2.4 静态资源配置原理</h4><p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220509155320298.png" alt="image-20220509155320298"></p>
<p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220509155414389.png" alt="image-20220509155414389"></p>
<ul>
<li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li>
<li>SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">		ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>给容器中配了什么。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置文件的相关属性和xxx进行了绑定。WebMvcProperties&#x3D;&#x3D;<strong>spring.mvc</strong>、ResourceProperties&#x3D;&#x3D;<strong>spring.resources</strong></li>
</ul>
<h5 id="1、配置类只有一个有参构造器"><a href="#1、配置类只有一个有参构造器" class="headerlink" title="1、配置类只有一个有参构造器"></a>1、配置类只有一个有参构造器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//有参构造器所有参数的值都会从容器中确定</span></span><br><span class="line"><span class="comment">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//ListableBeanFactory beanFactory Spring的beanFactory</span></span><br><span class="line"><span class="comment">//HttpMessageConverters 找到所有的HttpMessageConverters</span></span><br><span class="line"><span class="comment">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span></span><br><span class="line"><span class="comment">//DispatcherServletPath  </span></span><br><span class="line"><span class="comment">//ServletRegistrationBean   给应用注册Servlet、Filter....</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">WebMvcAutoConfigurationAdapter</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span><br><span class="line"><span class="params">				ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span><br><span class="line"><span class="params">				ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span><br><span class="line"><span class="params">				ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span><br><span class="line"><span class="params">				ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> &#123;</span><br><span class="line">			<span class="built_in">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">			<span class="built_in">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">			<span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">			<span class="built_in">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">			<span class="built_in">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">			<span class="built_in">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line">			<span class="built_in">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2、资源处理的默认规则"><a href="#2、资源处理的默认规则" class="headerlink" title="2、资源处理的默认规则"></a>2、资源处理的默认规则</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">				logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">Duration</span> <span class="variable">cachePeriod</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">			<span class="type">CacheControl</span> <span class="variable">cacheControl</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">			<span class="comment">//webjars的规则</span></span><br><span class="line">            <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">				customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">						.addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">			&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">			<span class="type">String</span> <span class="variable">staticPathPattern</span> <span class="operator">=</span> <span class="built_in">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">			<span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">				customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">						.addResourceLocations(getResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="string">禁用所有静态资源规则</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class="line"><span class="comment">	 * /resources/, /static/, /public/].</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br></pre></td></tr></table></figure>

<h5 id="3-欢迎页的处理规则"><a href="#3-欢迎页的处理规则" class="headerlink" title="3.欢迎页的处理规则"></a>3.欢迎页的处理规则</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。	</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span><br><span class="line"><span class="params">			FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class="line">		<span class="type">WelcomePageHandlerMapping</span> <span class="variable">welcomePageHandlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">				<span class="built_in">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">		welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">		welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">		<span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">		ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class="line">	<span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">           <span class="comment">//要用欢迎页功能，必须是/**</span></span><br><span class="line">		logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class="line">		setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">           <span class="comment">// 调用Controller  /index</span></span><br><span class="line">		logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">		setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="4-favicon"><a href="#4-favicon" class="headerlink" title="4.favicon"></a>4.favicon</h5><p>浏览器会发送&#x2F;favicon.ico请求获取到图标，整个session期间不在获取</p>
<h3 id="3-请求参数处理"><a href="#3-请求参数处理" class="headerlink" title="3.请求参数处理"></a>3.请求参数处理</h3><h4 id="0-请求映射"><a href="#0-请求映射" class="headerlink" title="0 请求映射"></a>0 请求映射</h4><p> @RequestMapping(value &#x3D; “&#x2F;user”,method &#x3D; RequestMethod.DELETE)   和<br>    @DeleteMapping(“&#x2F;user”)    是相同的，能够完成同种功能。</p>
<h5 id="1-rest使用与原理"><a href="#1-rest使用与原理" class="headerlink" title="1.rest使用与原理"></a>1.rest使用与原理</h5><ul>
<li><p>@xxxMapping；</p>
</li>
<li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p>
</li>
<li><ul>
<li><em>以前：</em><em>&#x2F;getUser</em>  <em>获取用户</em>    <em>&#x2F;deleteUser</em> <em>删除用户</em>   <em>&#x2F;editUser</em>  <em>修改用户</em>      <em>&#x2F;saveUser</em> <em>保存用户</em></li>
<li><em>现在： &#x2F;user</em>    *GET-*<em>获取用户</em>    *DELETE-*<em>删除用户</em>     *PUT-*<em>修改用户</em>      *POST-*<em>保存用户</em></li>
<li>核心Filter；HiddenHttpMethodFilter</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>用法： 表单method&#x3D;post，隐藏域 _method&#x3D;put</li>
<li>SpringBoot中手动开启</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>扩展：如何把_method 这个名字换成我们自己喜欢的</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">======================================前端=======================</span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;你好&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Speingboot <span class="number">2</span> 你好&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/user&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;input value=<span class="string">&quot;REST-GET 提交 查&quot;</span> type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/user&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input value=<span class="string">&quot;REST-POST 提交 增&quot;</span> type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/user&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;_method&quot;</span> type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;DELETE&quot;</span>&gt;</span><br><span class="line">    &lt;input value=<span class="string">&quot;REST-DELETE 提交 删&quot;</span> type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/user&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;_method&quot;</span> type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;PUT&quot;</span>&gt;</span><br><span class="line">    &lt;input value=<span class="string">&quot;REST-PUT 提交 改 一般用于修改&quot;</span> type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">    ====================后端========================</span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">postUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">putUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//SpringBoot中手动开启HiddenHttpMethodFilter   原理部分</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line">	<span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class="line">	<span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedHiddenHttpMethodFilter</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义filter   可以在controller也可以在config里面   即 Put DELETE等提交方式 使用from表单时如何_method 替换成自己定义的</span></span><br><span class="line"><span class="comment"> *             &lt;form action=&quot;/user&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;input name=&quot;_method&quot; type=&quot;hidden&quot; value=&quot;PUT&quot;&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;input name=&quot;_m&quot; type=&quot;hidden&quot; value=&quot;PUT&quot;&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;input value=&quot;REST-PUT 提交 改 一般用于修改&quot; type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/form&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">methodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        methodFilter.setMethodParam(<span class="string">&quot;_m&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> methodFilter;</span><br><span class="line">    &#125;</span><br><span class="line">=======================开启HiddenHttpMethodFilter================================</span><br><span class="line">    spring:</span><br><span class="line">  mvc:</span><br><span class="line">    hiddenmethod:</span><br><span class="line">      filter:</span><br><span class="line">        enabled: <span class="literal">true</span>   #开启页面表单的Rest功能</span><br></pre></td></tr></table></figure>

<p>Rest原理（表单提交要使用REST的时候）</p>
<ul>
<li><p>表单提交会带上**_method&#x3D;PUT**</p>
</li>
<li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p>
</li>
<li><ul>
<li>请求是否正常，并且是POST</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>获取到**_method**的值。</li>
<li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li>
<li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li>
<li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Rest使用客户端工具，</strong></p>
<ul>
<li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure>

<h5 id="2-请求映射原理"><a href="#2-请求映射原理" class="headerlink" title="2. 请求映射原理"></a>2. 请求映射原理</h5><p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220510140832254.png" alt="image-20220510140832254"></p>
<p>SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）</p>
<p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220510141536945.png" alt="image-20220510141536945"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">		<span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">			<span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				processedRequest = checkMultipart(request);</span><br><span class="line">				multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span></span><br><span class="line">				mappedHandler = getHandler(processedRequest);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span></span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220510140933607.png" alt="image-20220510140933607"></p>
<p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p>
<p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220510141027345.png" alt="image-20220510141027345"></p>
<p>所有的请求映射都在HandlerMapping中。</p>
<ul>
<li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 &#x2F;能访问到index.html；</p>
</li>
<li><p>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</p>
</li>
<li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p>
</li>
<li><ul>
<li>如果有就找到这个请求对应的handler</li>
<li>如果没有就是下一个 HandlerMapping</li>
</ul>
</li>
<li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings != <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (HandlerMapping mapping : <span class="built_in">this</span>.handlerMappings) &#123;</span><br><span class="line">			<span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request);</span><br><span class="line">			<span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> handler;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-普通参数与基本注解"><a href="#4-普通参数与基本注解" class="headerlink" title="4.普通参数与基本注解"></a>4.普通参数与基本注解</h3><h4 id="4-1-注解"><a href="#4-1-注解" class="headerlink" title="4.1 注解"></a>4.1 注解</h4><p>@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterTestController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前提 ： <span class="doctag">@GetMapping</span>(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="comment"> *1.<span class="doctag">@PathVariable</span>  路径变量</span></span><br><span class="line"><span class="comment"> *  前端访问   &lt;a href=&quot;/car/3/owner/lisi&quot;&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * 即能获取到浏览器地址栏中的变量   带有参数就只去参数 不带参数可以通过</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@PathVariable</span> Map&lt;String,String&gt; pv&#125; Map&lt;String,String&gt; 来获取全部 map的泛型必须是String</span></span><br><span class="line"><span class="comment"> * 2.<span class="doctag">@RequestHeader</span>  该注解是 用于获取请求头   集具体用法类似于1</span></span><br><span class="line"><span class="comment"> *3.<span class="doctag">@RequestParam</span>  获取请求参数   例：</span></span><br><span class="line"><span class="comment"> * 前端部分   &lt;a href=&quot;/car/3/owner/lisi?age=18&amp;initers=bask&amp;initers=aaa&quot;&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestParam</span>(&quot;age&quot;) Integer age,  获取单个参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestParam</span>(&quot;initers&quot;) List&lt;String&gt; initers,  获取列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestParam</span> Map&lt;String, String&gt; params    获取全部参数</span></span><br><span class="line"><span class="comment"> *4.<span class="doctag">@CookieValue</span>  获取cookie  必须要有其名字   以Cookie为 类型不能添加至Map之中进行返回前端，在后端拿到Cookie后能作相应处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CookieValue</span>(&quot;Webstorm-f21fb5b0&quot;) String _dd,</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@CookieValue</span>(&quot;Webstorm-f21fb5b0&quot;) Cookie cookie</span></span><br><span class="line"><span class="comment"> *  5.<span class="doctag">@RequestBody</span>   获取请求体【POST】</span></span><br><span class="line"><span class="comment"> *  前端 ： &lt;form action=&quot;/save&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="comment"> *     测试RequestBody获取数据&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     用户名：&lt;input name=&quot;username&quot;&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     邮箱：&lt;input name=&quot;email&quot;&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/form&gt;</span></span><br><span class="line"><span class="comment"> * 获取到的数据为 拼接后的数据   &quot;conter&quot;: &quot;username=yu&amp;email=2837041086%40qq.com&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">getCar</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(&quot;initers&quot;)</span> List&lt;String&gt; initers,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span><br><span class="line"><span class="params">            <span class="meta">@CookieValue(&quot;Webstorm-f21fb5b0&quot;)</span> String _dd,</span></span><br><span class="line"><span class="params">            <span class="meta">@CookieValue(&quot;Webstorm-f21fb5b0&quot;)</span> Cookie cookie</span></span><br><span class="line"><span class="params">            )</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;,id);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;username&quot;,name);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;header&quot;,header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;initers&quot;</span>,initers);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        map.put(<span class="string">&quot;_dd&quot;</span>,_dd);</span><br><span class="line"><span class="comment">//        map.put(&quot;cookie&quot;,cookie);</span></span><br><span class="line">        System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">postMeth</span><span class="params">(<span class="meta">@RequestBody</span> String conter)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;conter&quot;</span>,conter);</span><br><span class="line"><span class="comment">//        System.out.println(conter.toString());</span></span><br><span class="line"><span class="comment">//        System.out.println(conter.toLowerCase());</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    矩阵变量</span></span><br><span class="line"><span class="comment">//   1.语法： /car/sell;low=89;brand=cc,aa,dd</span></span><br><span class="line"><span class="comment">//    2.springboot默认是禁用了矩阵变量的功能</span></span><br><span class="line"><span class="comment">//            手动开启：原理。 对路径的处理。 UrlPathHelper进行解析</span></span><br><span class="line"><span class="comment">//                removeSemicoloContent （移除分好内容）  支持矩阵变量</span></span><br><span class="line"><span class="comment">//    3.矩阵变量必须有url路径变量（    @GetMapping(&quot;/car/&#123;path&#125;&quot;)）才能被解析</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">carsSell</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable(&quot;path&quot;)</span> String path</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;low&quot;</span>,low);</span><br><span class="line">        map.put(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">boss</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;bossAge&quot;</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">&quot;empAge&quot;</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">===========================前端==================================</span><br><span class="line">    测试基本注解：</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;!--    &lt;a href=<span class="string">&quot;/car/3/owner/lisi&quot;</span>&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;--&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/car/3/owner/lisi?age=18&amp;initers=bask&amp;initers=aaa&quot;</span>&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;<span class="meta">@PathVariable(路径变量)</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="meta">@RequestHeader(获取请求头)</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="meta">@RequestParam(获取请求参数)</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="meta">@CookieValue(获取cookie)</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="meta">@RequestBody(获取请求体【POST】)</span>&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;li&gt;<span class="meta">@RequestAttribute(获取request域属性)</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="meta">@MatrixVariable(矩阵变量)</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;h2&gt;request域属性所需&lt;/h2&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    测试RequestBody获取数据&lt;br/&gt;</span><br><span class="line">    用户名：&lt;input name=<span class="string">&quot;username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    邮箱：&lt;input name=<span class="string">&quot;email&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;h2&gt;矩阵变量所需&lt;/h2&gt;</span><br><span class="line">/cars/&#123;path&#125;?xxx=xxx&amp;aaa=ccc  querySting查询字符串。<span class="meta">@RequesParam</span>;&lt;br/&gt;</span><br><span class="line">/cars/&#123;path;low=<span class="number">89</span>;brand=cc,aa,dd&#125;   矩阵变量&lt;br/&gt;</span><br><span class="line">页面开发，cookie禁用了，session里面的内容怎么使用；</span><br><span class="line">session.set(a,b)---》jsession---》cookie---》每次发送请求携带</span><br><span class="line">url重写：/abc；jsessionid=xxx   把cookie的值使用矩阵变量的方式进行传递&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/car/sell;low=89;brand=cc,aa,dd&quot;</span>&gt;<span class="meta">@MatrixVariable(矩阵变量)</span>/car/sell;low=<span class="number">89</span>;brand=cc,aa,dd&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/car/sell;low=89;brand=cc;brand=aa;brand=dd&quot;</span>&gt;<span class="meta">@MatrixVariable(矩阵变量)</span>/car/sell;low=<span class="number">89</span>;brand=cc;brand=aa;brand=dd&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/boss/1;age=20/2;age10&quot;</span>&gt;<span class="meta">@MatrixVariable(矩阵变量)</span>/boss/&#123;boosId&#125;/&#123;empId&#125;&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;矩阵变量需要在springboot中手动开启&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;根据RFC3896的规范，矩阵变量应当绑定在路径变量中&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;若是有多个矩阵变量，应当使用英文符号;进行分隔&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;若是一个矩阵变量有多个值，应当使用英文符号,进行分隔，或命名多个重复的key即可&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;如：/car/sell;low=<span class="number">89</span>;brand=cc,aa,dd&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot基础入门</title>
    <url>/2023/07/11/SpringBoot%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="SpringBoot笔记"><a href="#SpringBoot笔记" class="headerlink" title="SpringBoot笔记"></a>SpringBoot笔记</h2><h3 id="缺失-："><a href="#缺失-：" class="headerlink" title="缺失 ："></a>缺失 ：</h3><p>meven——本地meven{</p>
<p>使用阿里云下载，及默认JDK</p>
<p>}</p>
<h2 id="重要注解"><a href="#重要注解" class="headerlink" title="重要注解"></a>重要注解</h2><h4 id="1-RestController"><a href="#1-RestController" class="headerlink" title="1.@RestController{"></a>1.@RestController{</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Controller</span><br><span class="line">@ResponseBody   //声明返回的为字符串 而不是要跳转的路径</span><br></pre></td></tr></table></figure>

<p>}</p>
<h4 id="2-ResponseBody的作用其实是将java对象转为json格式的数据。"><a href="#2-ResponseBody的作用其实是将java对象转为json格式的数据。" class="headerlink" title="2.@ResponseBody的作用其实是将java对象转为json格式的数据。"></a>2.@ResponseBody的作用其实是将java对象转为json格式的数据。</h4><p>@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。<br>注意：在使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中，他的效果等同于通过response对象输出指定格式的数据。</p>
<p>@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用【也就是AJAX】。<br>注意：在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。 比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。</p>
<h3 id="1-基础案例-Holle-Word"><a href="#1-基础案例-Holle-Word" class="headerlink" title="1.基础案例 Holle Word"></a>1.基础案例 Holle Word</h3><h4 id="01基本流程"><a href="#01基本流程" class="headerlink" title="01基本流程"></a>01基本流程</h4><p>1.创建maven工程</p>
<p>2.引入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    使用springboot开发--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.2</span><span class="number">.5</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">&lt;!--        web场景依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>3.创建主程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 声明这是一个springboot应用</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HMin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HMin.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4.编写业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handle01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello Springboot 2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5.测试</p>
<p>直接运行main方法</p>
<p>6.简化配置</p>
<p>配置都在application.properties文件之中进行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.port=8889</span><br></pre></td></tr></table></figure>

<p>7.简化部署</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        用于将项目进行打包 打包的类型在上边设置     &lt;packaging&gt;jar&lt;/packaging&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把项目打成jar包，直接在目标服务器执行即可。</p>
<h3 id="2-了解自动配置"><a href="#2-了解自动配置" class="headerlink" title="2.了解自动配置"></a>2.了解自动配置</h3><h4 id="2-1依赖管理"><a href="#2-1依赖管理" class="headerlink" title="2.1依赖管理"></a>2.1依赖管理</h4><h5 id="2-1-1父项目做依赖管理"><a href="#2-1-1父项目做依赖管理" class="headerlink" title="2.1.1父项目做依赖管理"></a>2.1.1父项目做依赖管理</h5> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">依赖管理    </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目</span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2开发导入starter场景启动器"><a href="#2-1-2开发导入starter场景启动器" class="headerlink" title="2.1.2开发导入starter场景启动器"></a>2.1.2开发导入starter场景启动器</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、见到很多 spring-boot-starter-* ： *就某种场景</span><br><span class="line">2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</span><br><span class="line">3、SpringBoot所有支持的场景</span><br><span class="line">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</span><br><span class="line">4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</span><br><span class="line">5、所有场景启动器最底层的依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-1-3无需关注版本号，自动版本仲裁"><a href="#2-1-3无需关注版本号，自动版本仲裁" class="headerlink" title="2.1.3无需关注版本号，自动版本仲裁"></a>2.1.3无需关注版本号，自动版本仲裁</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、引入依赖默认都可以不写版本</span><br><span class="line">2、引入非版本仲裁的jar，要写版本号。</span><br></pre></td></tr></table></figure>

<h5 id="2-1-4-可以修改默认版本号"><a href="#2-1-4-可以修改默认版本号" class="headerlink" title="2.1.4 可以修改默认版本号"></a>2.1.4 可以修改默认版本号</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</span><br><span class="line">2、在当前项目里面重写配置</span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2自动配置"><a href="#2-2自动配置" class="headerlink" title="2.2自动配置"></a>2.2自动配置</h4><h5 id="2-2-1自动配好Tomcat"><a href="#2-2-1自动配好Tomcat" class="headerlink" title="2.2.1自动配好Tomcat"></a>2.2.1自动配好Tomcat</h5><ul>
<li><ul>
<li><p>引入Tomcat依赖。</p>
</li>
<li><p>配置Tomcat</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-2自动配好SpringMVC"><a href="#2-2-2自动配好SpringMVC" class="headerlink" title="2.2.2自动配好SpringMVC"></a>2.2.2自动配好SpringMVC</h5><ul>
<li><ul>
<li>引入SpringMVC全套组件</li>
<li>自动配好SpringMVC常用组件（功能）</li>
</ul>
</li>
</ul>
<h5 id="2-2-3自动配好Web常见功能，如：字符编码问题"><a href="#2-2-3自动配好Web常见功能，如：字符编码问题" class="headerlink" title="2.2.3自动配好Web常见功能，如：字符编码问题"></a>2.2.3自动配好Web常见功能，如：字符编码问题</h5><ul>
<li><ul>
<li>SpringBoot帮我们配置好了所有web开发的常见场景</li>
</ul>
</li>
</ul>
<h5 id="2-2-4默认的包结构"><a href="#2-2-4默认的包结构" class="headerlink" title="2.2.4默认的包结构"></a>2.2.4默认的包结构</h5><ul>
<li><ul>
<li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li>
<li>无需以前的包扫描配置</li>
<li>想要改变扫描路径，**@SpringBootApplication(scanBasePackages&#x3D;”com.atguigu”)**</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>或者@ComponentScan 指定扫描路径</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br></pre></td></tr></table></figure>



<h5 id="2-2-5各种配置拥有默认值"><a href="#2-2-5各种配置拥有默认值" class="headerlink" title="2.2.5各种配置拥有默认值"></a>2.2.5各种配置拥有默认值</h5><ul>
<li><ul>
<li>默认配置最终都是映射到某个类上，如：MultipartProperties</li>
<li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li>
</ul>
</li>
</ul>
<h5 id="2-2-6按需加载所有自动配置项"><a href="#2-2-6按需加载所有自动配置项" class="headerlink" title="2.2.6按需加载所有自动配置项"></a>2.2.6按需加载所有自动配置项</h5><ul>
<li><ul>
<li>非常多的starter</li>
<li>引入了哪些场景这个场景的自动配置才会开启</li>
<li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li>
</ul>
</li>
</ul>
<h3 id="3-容器功能"><a href="#3-容器功能" class="headerlink" title="3.容器功能"></a>3.容器功能</h3><h4 id="3-1组件添加"><a href="#3-1组件添加" class="headerlink" title="3.1组件添加"></a>3.1组件添加</h4><h5 id="1-Configuration详解"><a href="#1-Configuration详解" class="headerlink" title="1.Configuration详解"></a>1.Configuration详解</h5><ul>
<li><p>基本使用</p>
</li>
<li><p><strong>Full模式与Lite模式</strong></p>
</li>
<li><ul>
<li>示例</li>
<li>最佳实战</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</li>
<li>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#############################基础类示例######################################################</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宠物类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pet</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pet</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pet&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, pet=&quot;</span> + pet +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name,Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">getPet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPet</span><span class="params">(Pet pet)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pet = pet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################Configuration使用示例######################################################</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment"> *2.配置类本身也是组件</span></span><br><span class="line"><span class="comment"> * 3.proxyBeanMethods：代理bean的方法</span></span><br><span class="line"><span class="comment"> * 为true则不管创建多少都会调用容器里的它们本身是相同的</span></span><br><span class="line"><span class="comment"> * 为false则相反并且不走代理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * full（proxyBeanMethods = true）、lite（proxyBeanMethods = false）</span></span><br><span class="line"><span class="comment"> * 组件依赖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span>   <span class="comment">//告诉springboot这是一个配置类== 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user00</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了pet组件</span></span><br><span class="line">        zhangsan.setPet(tomPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tomm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">tomPet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">################################<span class="meta">@Configuration</span>测试代码如下########################################</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 声明这是一个springboot应用</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="comment">//@SpringBootApplication(scanBasePackages = &quot;com.yu&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HMin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        1.返回我们IOC容器</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(HMin.class, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.查看容器里面的组件</span></span><br><span class="line">        String[] names=run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name:names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3.从容器之中获取组件</span></span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom01</span> <span class="operator">=</span>run.getBean(<span class="string">&quot;tomm&quot;</span>, Pet.class);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom02</span> <span class="operator">=</span>run.getBean(<span class="string">&quot;tomm&quot;</span>, Pet.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;组件&quot;</span>+(tom01==tom02));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4.com.yu.config.bean$$EnhancerBySpringCGLIB$$b06a1497@88a8218</span></span><br><span class="line">        bean bean=run.getBean(bean.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果@Configuration(proxyBeanMethods = true) 代理对象调用方法。springboot总会检查这个组件是否在容器里</span></span><br><span class="line"><span class="comment">//        保持组件单实例</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span>bean.user00();</span><br><span class="line">        User user1=bean.user00();</span><br><span class="line">        System.out.println(user == user1);</span><br><span class="line"></span><br><span class="line">        User user2=run.getBean(<span class="string">&quot;user00&quot;</span>,User.class);</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tomm</span> <span class="operator">=</span>run.getBean(<span class="string">&quot;tomm&quot;</span>,Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span>+(user2.getPet()==tomm));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-Bean、-Component、-Controller、-Service、-Repository"><a href="#2-Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="2.@Bean、@Component、@Controller、@Service、@Repository"></a>2.@Bean、@Component、@Controller、@Service、@Repository</h5><p>@Component   	表示这是一个组件</p>
<p>@Controller			表示这是一个控制器</p>
<p>@Service  				表示这是一个业务逻辑组件</p>
<p>@Repository			表示这是数据库层组件</p>
<h5 id="3-ComponentScan、-Import"><a href="#3-ComponentScan、-Import" class="headerlink" title="3.@ComponentScan、@Import"></a>3.@ComponentScan、@Import</h5><p>@ComponentScan			表示包扫描能够指定包扫描规则</p>
<p>@Import{</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.@Import(&#123;User.class, DBHelper.class&#125;)</span><br><span class="line"> *      给容器中自动创建出这两个类型的组件，(User.class)默认组组件的名字是全类名</span><br><span class="line"> @Import(&#123;User.class, DBHelper.class&#125;)</span><br><span class="line">@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件</span><br><span class="line">public class bean &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>}</p>
<p>@Import 高级用法： <a href="https://www.bilibili.com/video/BV1gW411W7wy?p=8">https://www.bilibili.com/video/BV1gW411W7wy?p=8</a></p>
<h5 id="4-Conditional-条件注解"><a href="#4-Conditional-条件注解" class="headerlink" title="4.@Conditional  条件注解"></a>4.@Conditional  条件注解</h5><p>条件装配：满足Conditional指定的条件，则进行组件注入或其他操作</p>
<p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220507135500299.png" alt="image-20220507135500299"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=====================测试条件装配==========================</span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span>   <span class="comment">//告诉springboot这是一个配置类== 配置文件</span></span><br><span class="line"><span class="comment">//@ConditionalOnBean(name = &quot;tomm&quot;)   //若容器之中有tomm组件则运行整个bean类</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;tomm&quot;)</span>   <span class="comment">//若容器之中没有tomm组件则运行整个bean类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user00</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了pet组件</span></span><br><span class="line">        zhangsan.setPet(tomPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tomm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">tomPet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">=====================主程序测试==========================</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HMin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        1.返回我们IOC容器</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(HMin.class, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.查看容器里面的组件</span></span><br><span class="line">        String[] names=run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name:names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//        测试条件 ConditionalOnMissingBean  ConditionalOnBean  注解所需</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">tom</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;tomm&quot;</span>);<span class="comment">//判断容器之中有无某个组件</span></span><br><span class="line">        System.out.println(<span class="string">&quot;容器之中Tom组件：&quot;</span>+tom);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">user00</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;user00&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器之中user01组件&quot;</span>+user00);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">=====================输出结果==========================</span><br><span class="line">容器之中Tom组件：<span class="literal">true</span></span><br><span class="line">容器之中user01组件<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-原生配置文件引入"><a href="#3-2-原生配置文件引入" class="headerlink" title="3.2 原生配置文件引入"></a>3.2 原生配置文件引入</h4><h5 id="1、-ImportResource-主要是为了兼容第三方-注入IOC"><a href="#1、-ImportResource-主要是为了兼容第三方-注入IOC" class="headerlink" title="1、@ImportResource     主要是为了兼容第三方  注入IOC"></a>1、@ImportResource     主要是为了兼容第三方  注入IOC</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">======================bean.xml=========================</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    原生spring给容器添加组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yu.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ccc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yu.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">======================配置类=================</span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span>   <span class="comment">//告诉springboot这是一个配置类== 配置文件</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:bean.xml&quot;)</span>   <span class="comment">//只用写一次，随便一个配置类中就好</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bean</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">======================主程序类中  测试  =================</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">aaa</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ccc</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;haha：&quot;</span>+aaa);<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hehe：&quot;</span>+ccc);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-配置绑定"><a href="#3-3-配置绑定" class="headerlink" title="3.3 配置绑定"></a>3.3 配置绑定</h4><p>​	不使用springboot框架：			如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getProperties</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">         <span class="type">Properties</span> <span class="variable">pps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">         pps.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">         <span class="type">Enumeration</span> <span class="variable">enum1</span> <span class="operator">=</span> pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">         <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class="line">             <span class="type">String</span> <span class="variable">strKey</span> <span class="operator">=</span> (String) enum1.nextElement();</span><br><span class="line">             <span class="type">String</span> <span class="variable">strValue</span> <span class="operator">=</span> pps.getProperty(strKey);</span><br><span class="line">             System.out.println(strKey + <span class="string">&quot;=&quot;</span> + strValue);</span><br><span class="line">             <span class="comment">//封装到JavaBean。</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1、-ConfigurationProperties"><a href="#1、-ConfigurationProperties" class="headerlink" title="1、@ConfigurationProperties"></a>1、@ConfigurationProperties</h5><p>​						<strong>@ConfigurationProperties(prefix &#x3D; “mycar”) &#x2F;&#x2F;与配置文件中的  mycar 前缀相互绑定</strong></p>
<h5 id="2-EnableConfigurationProperties-ConfigurationProperties"><a href="#2-EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="2.  @EnableConfigurationProperties        @ConfigurationProperties"></a>2.  @EnableConfigurationProperties        @ConfigurationProperties</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">############################# Car类 示例######################################################</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只有在容器中的组件，才会拥有springboot提供的强大功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span> <span class="comment">//与配置文件中的  mycar 前缀相互绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;  <span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">private</span> Integer price;  <span class="comment">//价格</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Integer price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#############################<span class="meta">@ConfigurationProperties</span>示例######################################################</span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span>   <span class="comment">//告诉springboot这是一个配置类== 配置文件  </span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span><span class="comment">//1.开启Car配置绑定功能。2.把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bean</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user00</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了pet组件</span></span><br><span class="line">        zhangsan.setPet(tomPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(&quot;tomm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">tomPet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#############################   application.properties   配置文件示例######################################################</span><br><span class="line">server.port=<span class="number">9999</span></span><br><span class="line">mycar.brand=yu</span><br><span class="line">mycar.price=<span class="number">10000</span></span><br><span class="line">############################# 配置对外API 控制层 示例######################################################</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Car car;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/car&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">car</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-Component-ConfigurationProperties"><a href="#3-Component-ConfigurationProperties" class="headerlink" title="3. @Component         @ConfigurationProperties"></a>3. @Component         @ConfigurationProperties</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#############################<span class="meta">@ConfigurationProperties</span>示例######################################################</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只有在容器中的组件，才会拥有springboot提供的强大功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//将其加入到容器之中</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span> <span class="comment">//与配置文件中的  mycar 前缀相互绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;  <span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">private</span> Integer price;  <span class="comment">//价格</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Integer price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#############################   application.properties   配置文件示例######################################################</span><br><span class="line">server.port=<span class="number">9999</span></span><br><span class="line">mycar.brand=yu</span><br><span class="line">mycar.price=<span class="number">10000</span></span><br><span class="line">############################# 配置对外API 控制层 示例######################################################</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Car car;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/car&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">car</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果截图：</p>
<p>​	<img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220507160301194.png" alt="image-20220507160301194"></p>
<h3 id="4-自动配置原理入门"><a href="#4-自动配置原理入门" class="headerlink" title="4.自动配置原理入门"></a>4.自动配置原理入门</h3><h4 id="4-1引导加载自动配置类"><a href="#4-1引导加载自动配置类" class="headerlink" title="4.1引导加载自动配置类"></a>4.1引导加载自动配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">===================SpringBootApplication注解内的内容==========================</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">		@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======================</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h5 id="1-SpringBootConfiguration"><a href="#1-SpringBootConfiguration" class="headerlink" title="1.@SpringBootConfiguration"></a>1.@SpringBootConfiguration</h5><p>@Configuration。代表当前是一个配置类</p>
<h5 id="2-ComponentScan"><a href="#2-ComponentScan" class="headerlink" title="2.ComponentScan"></a>2.ComponentScan</h5><p>指定扫描哪些包，Spring注解；</p>
<p>例：@ComponentScan(“com.yu”)</p>
<h5 id="3、-EnableAutoConfiguration"><a href="#3、-EnableAutoConfiguration" class="headerlink" title="3、@EnableAutoConfiguration"></a>3、@EnableAutoConfiguration</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure>

<h6 id="1、-AutoConfigurationPackage"><a href="#1、-AutoConfigurationPackage" class="headerlink" title="1、@AutoConfigurationPackage"></a>1、@AutoConfigurationPackage</h6><p>自动配置包？指定了默认的包规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span>  <span class="comment">//给容器中导入一个组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用Registrar给容器中导入一系列组件</span></span><br><span class="line"><span class="comment">//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="2、-Import-AutoConfigurationImportSelector-class"><a href="#2、-Import-AutoConfigurationImportSelector-class" class="headerlink" title="2、@Import(AutoConfigurationImportSelector.class)"></a>2、@Import(AutoConfigurationImportSelector.class)</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件</span><br><span class="line"><span class="number">2</span>、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</span><br><span class="line"><span class="number">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span>；得到所有的组件</span><br><span class="line"><span class="number">4</span>、从META-INF/spring.factories位置来加载一个文件。</span><br><span class="line">	默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</span><br><span class="line">    spring-boot-autoconfigure-<span class="number">2.3</span><span class="number">.4</span>.RELEASE.jar包里面也有META-INF/spring.factories</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220508211138147.png" alt="image-20220508211138147"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">文件里面写死了spring-boot一启动就要给容器中加载的所有配置类</span><br><span class="line">spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories</span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-2按需开启自动配置项"><a href="#4-2按需开启自动配置项" class="headerlink" title="4.2按需开启自动配置项"></a>4.2按需开启自动配置项</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">虽然我们<span class="number">127</span>个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration</span><br><span class="line">按照条件装配规则（<span class="meta">@Conditional</span>），最终会按需配置。</span><br></pre></td></tr></table></figure>

<h4 id="4-3、修改默认配置"><a href="#4-3、修改默认配置" class="headerlink" title="4.3、修改默认配置"></a>4.3、修改默认配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">//容器中有这个类型组件</span></span><br><span class="line">		<span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="comment">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class="line">		<span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> &#123;</span><br><span class="line">            <span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line">            <span class="comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line">			<span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">			<span class="keyword">return</span> resolver;</span><br><span class="line">		&#125;</span><br><span class="line">给容器中加入了文件上传解析器；</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="keyword">public</span> CharacterEncodingFilter <span class="title function_">characterEncodingFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p>
</li>
<li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p>
</li>
<li><p>生效的配置类就会给容器中装配很多组件</p>
</li>
<li><p>只要容器中有这些组件，相当于这些功能就有了</p>
</li>
<li><p>定制化配置</p>
</li>
<li><ul>
<li>用户直接自己@Bean替换底层的组件   必须在有@Configuration(proxyBeanMethods &#x3D; true)   的类里才能配置</li>
<li>用户去看这个组件是获取的配置文件什么值就去修改。</li>
</ul>
</li>
</ul>
<p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p>
<h4 id="4-4-最佳实践"><a href="#4-4-最佳实践" class="headerlink" title="4.4 最佳实践"></a>4.4 最佳实践</h4><ul>
<li><p>引入场景依赖</p>
</li>
<li><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li>
</ul>
</li>
<li><p>查看自动配置了哪些（选做）</p>
</li>
<li><ul>
<li>自己分析，引入场景对应的自动配置一般都生效了</li>
<li>配置文件中debug&#x3D;true开启自动配置报告。Negative（不生效）\Positive（生效）</li>
</ul>
</li>
<li><p>是否需要修改</p>
</li>
<li><ul>
<li>参照文档修改配置项</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li>
<li>自己分析。xxxxProperties绑定了配置文件的哪些。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>自定义加入或者替换组件</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>@Bean、@Component。。。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>自定义器  <strong>XXXXXCustomizer</strong>；</li>
<li>……</li>
</ul>
</li>
</ul>
<h4 id="4-5-开发小技巧"><a href="#4-5-开发小技巧" class="headerlink" title="4.5 开发小技巧"></a>4.5 开发小技巧</h4><h5 id="1-Lombok"><a href="#1-Lombok" class="headerlink" title="1  Lombok"></a>1  Lombok</h5><p>简化JavaBean开发</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">idea中搜索安装lombok插件</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">===============================简化JavaBean开发===================================</span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name,Integer age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================简化日志开发===================================</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handle01</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;请求进来了....&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>+<span class="string">&quot;你好：&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-dev-tools"><a href="#2-dev-tools" class="headerlink" title="2  dev-tools"></a>2  dev-tools</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-Spring-Initailizr（项目初始化向导）"><a href="#3-Spring-Initailizr（项目初始化向导）" class="headerlink" title="3  Spring Initailizr（项目初始化向导）"></a>3  Spring Initailizr（项目初始化向导）</h5><h6 id="0、选择我们需要的开发场景"><a href="#0、选择我们需要的开发场景" class="headerlink" title="0、选择我们需要的开发场景"></a>0、选择我们需要的开发场景</h6><p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220508225801210.png" alt="image-20220508225801210"></p>
<h6 id="1-自动依赖引入"><a href="#1-自动依赖引入" class="headerlink" title="1.自动依赖引入"></a>1.自动依赖引入</h6><p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220508225827517.png" alt="image-20220508225827517"></p>
<h6 id="2-自动创建项目结构"><a href="#2-自动创建项目结构" class="headerlink" title="2.自动创建项目结构"></a>2.自动创建项目结构</h6><p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220508225857016.png" alt="image-20220508225857016"></p>
<h6 id="3-自动编写好主配置类"><a href="#3-自动编写好主配置类" class="headerlink" title="3.自动编写好主配置类"></a>3.自动编写好主配置类</h6><p><img src="C:\Users\26524\AppData\Roaming\Typora\typora-user-images\image-20220508225921631.png" alt="image-20220508225921631"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>代码片段</title>
    <url>/2023/07/19/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
    <content><![CDATA[<h3 id="1-图片转换base64"><a href="#1-图片转换base64" class="headerlink" title="1.图片转换base64"></a>1.图片转换base64</h3><p><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/202307192317538.png"></p>
<h3 id="2-Excel-文件的下载"><a href="#2-Excel-文件的下载" class="headerlink" title="2.Excel 文件的下载"></a>2.Excel 文件的下载</h3><p><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/202307192317537.png"></p>
]]></content>
      <categories>
        <category>代码片段</category>
      </categories>
      <tags>
        <tag>代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>软件</title>
    <url>/2023/09/24/%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="1-预览软件-QuickLook"><a href="#1-预览软件-QuickLook" class="headerlink" title="1.预览软件   QuickLook"></a>1.预览软件   QuickLook</h3><p><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230712230537.png"></p>
<p>空格键：预览&#x2F;关闭预览<br>ESC：关闭预览<br>回车：运行程序并关闭预览<br>CTRL+鼠标滚轮：缩放图片&#x2F;文档<br>鼠标滚轮：调节音量</p>
<p>获取方式：微软商店</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>图床</title>
    <url>/2023/07/04/%E5%B8%B8%E7%94%A8/%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h3 id="1-下载PicGo-PicGo"><a href="#1-下载PicGo-PicGo" class="headerlink" title="1.下载PicGo PicGo"></a>1.下载PicGo PicGo</h3><p>下载地址: <a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></p>
<h3 id="2-创建GitHub仓库"><a href="#2-创建GitHub仓库" class="headerlink" title="2.创建GitHub仓库"></a>2.创建GitHub仓库</h3><p><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOEIH.png"><br>点自己头像，点Setting<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOx0S.png"></p>
<p>再点Developer settings<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOzTg.jpg"></p>
<p>再点Personal access tokens<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXpkQ.png"></p>
<p>填写内容，记得勾选repo<br><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXCfs.png"></p>
<p>复制生成的token,（再关闭网页这个token就没法复制了）</p>
<h3 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230704220025.png"></p>
<h3 id="加速访问"><a href="#加速访问" class="headerlink" title="加速访问"></a>加速访问</h3><p>大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？</p>
<p>这时候我们就可以用 <a href="https://link.zhihu.com/?target=https://www.jsdelivr.com/">jsDelivr</a> 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；</p>
<blockquote>
<p><code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code></p>
</blockquote>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>常用</title>
    <url>/2023/09/22/%E5%B8%B8%E7%94%A8/%E5%B8%B8%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1-git"><a href="#1-git" class="headerlink" title="1.git"></a>1.git</h3><p>1.添加子模块<br>git submodule add <a href="https://github.com/YuLong-cmd/hexo-theme-butterfly.git">https://github.com/YuLong-cmd/hexo-theme-butterfly.git</a>   butterfly</p>
<ol>
<li>新增子模块<br>向一个项目中添加子模块</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule add https://github.com/yyy/xxx.git</span><br></pre></td></tr></table></figure>

<p>之后会 clone 该子模块对应的远程项目文件到本地父项目目录下的同名文件夹中（.&#x2F;xxx&#x2F;），父项目下也会多一个叫 .gitmodules 的文件，内容大致为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[submodule &quot;xxx&quot;]</span><br><span class="line">	path = xxx</span><br><span class="line">	url = git@github.com:yyy/xxx.git</span><br></pre></td></tr></table></figure>
<p>如果存在多个子模块，则会继续向该文件中追加与上面相同格式的内容；</p>
<p>同时父项目下的 .git 目录中也会新增 &#x2F;modules&#x2F;xxx&#x2F; 目录，里面的内容对应子模块仓库中原有的 .git 目录中的文件，此时虽然子模块目录下的 .git 依然存在，但是已经由一个文件夹变成了文件，内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitdir: ../.git/modules/xxx</span><br></pre></td></tr></table></figure>
<p>即指向了父项目的 .git&#x2F;modules&#x2F;xxx 目录；如果运行 git config –list 查看项目的配置，也会发现多了类似下面两行的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">submodule.xxx.url=git@github.com:yyy/xxx.git</span><br><span class="line">submodule.xxx.active=true</span><br></pre></td></tr></table></figure>
<p>如果修改 submodule.xxx.url 的值，则会覆盖 .gitmodules 文件中对应的 url 值；</p>
<h3 id="2-创建文件链接"><a href="#2-创建文件链接" class="headerlink" title="2.创建文件链接"></a>2.创建文件链接</h3><p>mklink &#x2F;D “C:\Users\26524\AppData\Local\Obsidian” “E:\software\Obsidian”</p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>本地项目让别人可以被访问</title>
    <url>/2023/07/11/%E5%B8%B8%E7%94%A8/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E8%AE%A9%E5%88%AB%E4%BA%BA%E5%8F%AF%E4%BB%A5%E8%A2%AB%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/image-20220821233250364.png"></p>
<p>通过花生壳将本地项目让别人可以被访问</p>
]]></content>
      <categories>
        <category>常用</category>
      </categories>
      <tags>
        <tag>常用</tag>
      </tags>
  </entry>
</search>
