{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/img/2.jpg","path":"img/2.jpg","modified":0,"renderable":0},{"_id":"source/img/3.jpg","path":"img/3.jpg","modified":0,"renderable":0},{"_id":"source/img/asid_img.jpg","path":"img/asid_img.jpg","modified":0,"renderable":0},{"_id":"source/img/asid_img_dark.jpg","path":"img/asid_img_dark.jpg","modified":0,"renderable":0},{"_id":"source/img/hk.jpeg","path":"img/hk.jpeg","modified":0,"renderable":0},{"_id":"source/img/wallhaven-rr2wmm.png","path":"img/wallhaven-rr2wmm.png","modified":0,"renderable":0},{"_id":"source/src/ES6-ES11/ES6-11基础知识点.emmx","path":"src/ES6-ES11/ES6-11基础知识点.emmx","modified":0,"renderable":0},{"_id":"source/img/20230709195511.png","path":"img/20230709195511.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"83a6104e28b42582e6060c4db4a2f546e7a9ea0a","modified":1688656602631},{"_id":"source/_posts/ES6-ES11笔记.md","hash":"0052e1afedce8dbe81f17f17a09136c96d8399da","modified":1688998280872},{"_id":"source/_posts/图床.md","hash":"5b57351a4164f4eb6a7909762f80fe1b8268da1a","modified":1688480092411},{"_id":"source/_posts/常用.md","hash":"bfc8af7fdf14580e3948f6652640a1b259774f40","modified":1688913080617},{"_id":"source/categories/index.md","hash":"7bdf9152b792775d775eaf513ba7e693d64f173d","modified":1687507319534},{"_id":"source/js/universe.js","hash":"d89bef4cdc3c22b9d84182eb5269f5f209b8611e","modified":1688907869464},{"_id":"source/css/personalStyle.css","hash":"80c36b2d82f46b2b2bb5e1c4de47be8d2f471f02","modified":1688998503463},{"_id":"source/link/index.md","hash":"a44390c59cd6c39d49b2a22affaaa1ddfadd3f52","modified":1687507563364},{"_id":"source/tags/index.md","hash":"2002be73942907c0dff9f1c6bc9eb97436cd625d","modified":1687507190784},{"_id":"source/img/asid_img_dark.jpg","hash":"cb67a3601eb8c54cfe56ddd45a92059cc03bda2d","modified":1688883512809},{"_id":"source/img/2.jpg","hash":"0cdce65960fc3123dc64e48ba409e6262550fa46","modified":1589603253684},{"_id":"source/img/hk.jpeg","hash":"3df7ffbb779704a1b23b2d636718147d24919b8a","modified":1575784804000},{"_id":"source/img/asid_img.jpg","hash":"569c2a92983aafee56b6439728b44d47ad9a8e7d","modified":1688824030982},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1687499165571},{"_id":"themes/butterfly/README.md","hash":"5ca893c78f8971f512da55c785b8ccbfa9d37cfc","modified":1687499165572},{"_id":"themes/butterfly/README_CN.md","hash":"f6ae7f38d016135340fd25c5fd1be65452b6773d","modified":1687499165573},{"_id":"themes/butterfly/_config.yml","hash":"ac4af6bbccf8f353807924928a89bbc688f9b2de","modified":1688998200974},{"_id":"themes/butterfly/package.json","hash":"a6a032654a36408d7b7274bc9cfe21f89946d29c","modified":1687499165777},{"_id":"themes/butterfly/plugins.yml","hash":"6d68dab3b79accb1bceb4710c8aaab724a45053a","modified":1687499165778},{"_id":"themes/butterfly/languages/default.yml","hash":"d444cbb5c5456aaf27f3fb1b4308634689c7bb53","modified":1687528898720},{"_id":"themes/butterfly/languages/en.yml","hash":"4957fd976c99745d3aa24000a85b2955e8d1cf81","modified":1687528898720},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"cc8672dc0c2762b694f689cbeb6e34810f1c194e","modified":1687528898720},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"145ec301db185c8a06de1f34a77ca391e1d2729b","modified":1687528898721},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1687528898721},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1687528898722},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1687528898779},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1687528898779},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1687528898779},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1687528898780},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1687528898715},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1687528898715},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1687528898716},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1687528898716},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1687528898716},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1687528898722},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"601c29cb7f1dbdeab4b7f73402bef32e0dc0b8cc","modified":1687528898723},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"b50b0afdc41c54279587410c3f82c8cb3c5ff46d","modified":1687528898723},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1687528898723},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1687528898744},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1687528898748},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1687528898749},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"c55f05400eb27ab051f47396ec8d4249ce6f71ec","modified":1687528898749},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1687528898782},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1687528898782},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1687528898783},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1687528898782},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1687528898783},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1687528898784},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1687528898783},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a3323fcb11cfd3f3e21230737341beb5d76b40aa","modified":1687528898784},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1687528898812},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1687528898812},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1687528898813},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1687528898785},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1687528898811},{"_id":"themes/butterfly/source/css/var.styl","hash":"e1e37a2e932163886789b72624c7348545003f1d","modified":1687528898811},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1687528898785},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1687528898785},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"7222102f9919f8e961d4f1688425845fb7775ada","modified":1687528898786},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1687528898787},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"6005907245dd74b153f03afdccfae1abb66bb482","modified":1687528898786},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1687528898787},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"b8d95ac1851c37f1dce4b1dd4a1d3ffdff501a03","modified":1687528898788},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1687528898788},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1687528898788},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1687528898789},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1687528898789},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1687528898790},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1687528898790},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"fc5a80707cf522378be3cf8638ef78bccc88c510","modified":1687528898791},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1687528898791},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1687528898791},{"_id":"themes/butterfly/source/js/main.js","hash":"4fd1cd7a02dedcb686caf6149c35fd8e1fbcafc9","modified":1687528898813},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"a102a6cacf7b20183946a54580867a964f3674c4","modified":1687528898815},{"_id":"themes/butterfly/source/js/utils.js","hash":"13b2b02118a0f4ec2e9e0bb1b90f5b1a30a70f44","modified":1687528898815},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1687528898724},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1687528898725},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1687528898725},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f5207840c96df6b26ad227433babca4f8c362624","modified":1687528898725},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1687528898726},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1687528898726},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1687528898727},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1687528898727},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1687528898741},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1687528898727},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1687528898742},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1687528898744},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1687528898742},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1687528898742},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1687528898743},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1687528898745},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1687528898745},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1687528898745},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1687528898746},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"3adb731465a4ab14529277fd7867889e0800ad16","modified":1687528898746},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1687528898746},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1687528898748},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1687528898747},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1687528898747},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1687528898749},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1687528898751},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1687528898764},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1687528898770},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"82bb447a5d045980789cf3f9de9d49cc32011b13","modified":1687528898770},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1687528898770},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1687528898774},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1687528898774},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1687528898775},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1687528898775},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1687528898775},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1687528898776},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1687528898776},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1687528898777},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1687528898777},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1687528898777},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1687528898778},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1687528898778},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1687528898778},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"ba94ceb40d7c81372a76103d958dcc2cc6a84f00","modified":1687528898778},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"431b4a252443e224872bd6b4f6aa76ed1679a82c","modified":1687528898792},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"9893656128c347d1c09c90784627c84c979b326f","modified":1687528898793},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"e43017dbc73e0ce95dcfcb9dfb4fcce0c1715dd4","modified":1687528898793},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1687528898796},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"3969f599e8657adf8c3ce287d83f5d0a23f276a9","modified":1687528898796},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1687528898797},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1687528898797},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1687528898797},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"20303c0dad28e5c5335ce2fa6582f1fafae5b628","modified":1687528898798},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1687528898798},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1687528898799},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"fc029f5e00d7904c0878efd20dd4e09fc55e1d03","modified":1687528898800},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1687528898800},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1687528898801},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1687528898800},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1687528898801},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1687528898801},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"4c86c10f8ec0c8fb60b400a5a2f14699d3155be4","modified":1687528898801},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"9066a62e442affce3a923a06a90486bf9d364e0e","modified":1687528898801},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1687528898802},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1687528898802},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1687528898802},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1687528898803},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1687528898805},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1687528898803},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"57d333ef47bfb8fd22da31f600527c9d91e8e322","modified":1687528898803},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1687528898804},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1687528898805},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1687528898806},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"cf90ea339fbb7f345212319627fcd68964024e40","modified":1687528898805},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1687528898806},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1687528898806},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1687528898807},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1687528898807},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1687528898807},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1687528898808},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1687528898808},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1687528898810},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1687528898811},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"bbe930d8425bdaee2a5ba3cade42b617cee42934","modified":1687528898814},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"40e76d6da538cb3c1ef6b79ffc0adfa64fe6b8ba","modified":1687528898814},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"19b5cfa1f77781246e02967cefe149f19170e45f","modified":1687528898751},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"0010c7a10d265c4329f0fd4db85b4a9ea7ba06b5","modified":1687528898750},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1687528898750},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1687528898751},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1687528898752},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1687528898752},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1687528898752},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1687528898753},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1687528898753},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"c42bbce31fcd8846cf3360f4c383dec9368daeba","modified":1687528898754},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1687528898754},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1687528898755},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1687528898755},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1687528898755},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1687528898756},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1687528898756},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"b47698e153c73cb29286b19bec5ddd920cb7ffba","modified":1687528898757},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f8b73bc63ec1b45d86aa3891d8c81ef4d5980943","modified":1687528898757},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"b19b123df682b23491b17dcca386d79062cd8f6e","modified":1687528898758},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"1a20b11fa0e6b1943e9b4d81e197a25ca36af66d","modified":1687528898758},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"7c7fbe27d82becc9ee509765f1195c69f5864a0b","modified":1687528898760},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"a56edeb1ce2f1b1fb0e866a30543f274b9f7d69e","modified":1687528898759},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1687528898761},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"c5e131d65a7ad30f3cb98ac3b94cd2f6a94c22e9","modified":1687528898761},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f618457d62ef35d78a31e7fb1e375a462f64b228","modified":1687528898762},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1687528898761},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4bb4cf58e219dfb8787273c931b1ea978b2ab88f","modified":1687528898762},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"386a2b371644c2682560733617561ba6e6bf9ab2","modified":1687528898763},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1687528898763},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"6b0d28671afd5ed286a714f25ba16256a2e7d880","modified":1687528898763},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1687528898765},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1687528898765},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1687528898766},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"da94966a9650ef3e4c69f3ee93758b30fa42cb78","modified":1687528898766},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"cfcfaed3a52fa47fff4cc65a053a2f025fb3b7b6","modified":1687528898767},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"a6be932d1f64c6190f5d03b5b77fba09fa0fd6b8","modified":1687528898767},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1687528898768},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"4f8bd22c5c32d5430cbe08ab4e861b6f8b86f820","modified":1687528898767},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"4fb998a05e51ef2302775945883307ee3039a544","modified":1687528898768},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"edd4ebf76a79fb74cfae03a286fab90f74324dbd","modified":1687528898769},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1687528898771},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ce4ab79c85df9f77395269eb01e9a023d7f96376","modified":1687528898769},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"2f3af113713563e34b10bbe998cc15008f81c85a","modified":1687528898769},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"ba04174d977da988a1d49c06641262c413352346","modified":1687528898771},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1687528898771},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"4b9c35375e0eb9cf99ad246d5ca838eca64a635d","modified":1687528898772},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1687528898772},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1687528898772},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1687528898773},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1687528898773},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1687528898794},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1687528898794},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1687528898795},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1687528898795},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1687528898796},{"_id":"source/img/3.jpg","hash":"5db68f6a07e8814c31bb0c694f1102c8fbcfd021","modified":1688824112344},{"_id":"source/img/wallhaven-rr2wmm.png","hash":"112d5f0bf6997c0d80a7588747f6107fcbef4526","modified":1688887873807},{"_id":"source/_data/link.yml","hash":"d309f02239aa5dce82f3c02cbcb25fa0616cfaf7","modified":1688902979457},{"_id":"source/src/ES6-ES11/0_html模版.html","hash":"cfa96ab33f81db30fd3440927b550151cfd746d5","modified":1686064419747},{"_id":"source/src/ES6-ES11/0index.html","hash":"1a1366eaea6b22addfe93136266fcb180d06294f","modified":1688902933376},{"_id":"source/src/ES6-ES11/10_扩展运算符的认识和应用.html","hash":"acd72ce48059802a784040b39b350bd4c04a3cb0","modified":1686583900091},{"_id":"source/src/ES6-ES11/11_Symbol的认识与创建.html","hash":"5f12af622df1c4c53abf39f7528aae6e22bcafe8","modified":1686585097112},{"_id":"source/src/ES6-ES11/12_Symbol创建对象属性.html","hash":"e41229c657e7b05497b0b8c2d7298e37eada2608","modified":1686753303614},{"_id":"source/src/ES6-ES11/13_Symbol内置属性.html","hash":"5554c16d4828105edcc2b821e60437a514eba9d1","modified":1686754360694},{"_id":"source/src/ES6-ES11/14_迭代器.html","hash":"a179f128df6231349dbaf6acd605c8854a5742be","modified":1687703270580},{"_id":"source/src/ES6-ES11/15_自定义遍历数组.html","hash":"17e5b1ab85357401a01a59a014b6f8908de8e533","modified":1687794203314},{"_id":"source/src/ES6-ES11/16_生成器函数的认识.html","hash":"3f3c54a8d83302bf09b8da9178ac516efe2d66d9","modified":1687880572085},{"_id":"source/src/ES6-ES11/17_生成器函数参数.html","hash":"d68d648097daf2208e794961d63dff2879877739","modified":1688653728978},{"_id":"source/src/ES6-ES11/1_let_学习.html","hash":"3737c942e725e69f0530fd77ab93e8b548ff2b7c","modified":1688903210222},{"_id":"source/src/ES6-ES11/2_const_学习.html","hash":"68e7343849d53bd18cac48455aeb567bcab0c647","modified":1685542513531},{"_id":"source/src/ES6-ES11/3_变量的解构赋值.html","hash":"8004f5cfdeed7218e05592a9ad54c29fadf7a957","modified":1686150530765},{"_id":"source/src/ES6-ES11/4_模版字符串.html","hash":"ff756bf2621fad00225e5902cfa55ae2c3ac595a","modified":1686150812701},{"_id":"source/src/ES6-ES11/5_简化对象写法.html","hash":"64975f9caa39104e0e280e504ca1b0e0b14d0d89","modified":1686064880176},{"_id":"source/src/ES6-ES11/6_箭头函数.html","hash":"52345648984ab0c793638481d87169006da5d812","modified":1686239520497},{"_id":"source/src/ES6-ES11/7_箭头函数的案例.html","hash":"99ef05f3b2ee966fc3b3a444a161c02473ec18d5","modified":1686324389134},{"_id":"source/src/ES6-ES11/8_参数默认值.html","hash":"f7f8586a5fc3fd3640eb04787b013bec7c15826a","modified":1686495461910},{"_id":"source/src/ES6-ES11/9_rest.html","hash":"1933ec475551d2bdb73d7db023b49459c18a62bd","modified":1686496517498},{"_id":"source/src/ES6-ES11/ES6-11基础知识点.emmx","hash":"5caec5daf15db096bf65169df90b06f391ab5b78","modified":1685979442931},{"_id":"source/src/ES6-ES11/ES6-ES11笔记.md","hash":"cf92ae2846bd0415956f5e59c1073f238bdf948c","modified":1688462811141},{"_id":"source/img/20230709195511.png","hash":"960785cb89596b0d81d87d8c3d3b312fe31ab25b","modified":1688904099036},{"_id":"public/css/personalStyle.css","hash":"e060e31208da1d3b49182b7ba65264bcfd29ea41","modified":1688904548193},{"_id":"public/js/universe.js","hash":"154ed55427d14318e3b436ddbb2adfb8da25e30a","modified":1688904548193},{"_id":"public/search.xml","hash":"6ad8f479c96badcf1bcbfe3ef50a766b69a66cba","modified":1688904548193},{"_id":"public/about/index.html","hash":"df19fc51f5354c6dee6089526ed46a22c26336f9","modified":1688904548193},{"_id":"public/categories/index.html","hash":"2a2785091d18c9486b49f3259d2ceb9d6eed26ff","modified":1688904548193},{"_id":"public/link/index.html","hash":"5b634631788b74b404d62a7cb744b7458a76ce0e","modified":1688904548193},{"_id":"public/tags/index.html","hash":"f004e701e4e7cc14b9815403fcf08c366d1f2a3c","modified":1688904548193},{"_id":"public/src/ES6-ES11/0_html模版.html","hash":"1e2cb59319f2a74a39c1b43027aecf4b4255b6ba","modified":1688904548193},{"_id":"public/src/ES6-ES11/0index.html","hash":"4fad139525c5f80b5c4df0683b4d1a5cdb80edeb","modified":1688904548193},{"_id":"public/src/ES6-ES11/11_Symbol的认识与创建.html","hash":"2af15e848a5311dd6fe9a18f5b1879574cdaae53","modified":1688904548193},{"_id":"public/src/ES6-ES11/10_扩展运算符的认识和应用.html","hash":"66bbab4b226d8aa35ecdcb730580b0942a0c0389","modified":1688904548193},{"_id":"public/src/ES6-ES11/12_Symbol创建对象属性.html","hash":"34b6b7efbc6b280d4b1ca03c67114fe9ea283ef6","modified":1688904548193},{"_id":"public/src/ES6-ES11/13_Symbol内置属性.html","hash":"35bf74ab213507d1316ef5ee6f71dc6eb4b0f6b2","modified":1688904548193},{"_id":"public/src/ES6-ES11/14_迭代器.html","hash":"65fa396818459a185ec2cfa363d5f2a9888ea0d2","modified":1688904548193},{"_id":"public/src/ES6-ES11/15_自定义遍历数组.html","hash":"55651b1898aa1e238c8b11939ac23784c55e93a7","modified":1688904548193},{"_id":"public/src/ES6-ES11/16_生成器函数的认识.html","hash":"e234ca9f5cbd1a140a9c94941af0515b71407edf","modified":1688904548193},{"_id":"public/src/ES6-ES11/17_生成器函数参数.html","hash":"b403a405fcc95065990c3bcefda19a4a1c7d4efa","modified":1688904548193},{"_id":"public/src/ES6-ES11/1_let_学习.html","hash":"41da8e1227c2a40575ebd0e0cd5f8dc3fff57b01","modified":1688904548193},{"_id":"public/src/ES6-ES11/2_const_学习.html","hash":"cfd4c01baa54ee05e324f05aadd0b4be94653061","modified":1688904548193},{"_id":"public/src/ES6-ES11/3_变量的解构赋值.html","hash":"ea0caa1379b4c872f98de0e335a004f5798354ce","modified":1688904548193},{"_id":"public/src/ES6-ES11/4_模版字符串.html","hash":"ed349130c713456226b196e6f131974d3dbb80e0","modified":1688904548193},{"_id":"public/src/ES6-ES11/5_简化对象写法.html","hash":"8892719d6253b0153c375ab7fd5eb9e3e30d4f61","modified":1688904548193},{"_id":"public/src/ES6-ES11/7_箭头函数的案例.html","hash":"a8d40b08c4b200714e81a5993d208e0a0ffeda66","modified":1688904548193},{"_id":"public/src/ES6-ES11/9_rest.html","hash":"ad9cb52e1df4baf15436436c9865030244c09931","modified":1688904548193},{"_id":"public/src/ES6-ES11/6_箭头函数.html","hash":"00284bbfa3ac406b431a0677a429f8b7c6e31f5c","modified":1688904548193},{"_id":"public/src/ES6-ES11/8_参数默认值.html","hash":"82ef1e9d52d01ac220a7729af1be2dbc545136c8","modified":1688904548193},{"_id":"public/src/ES6-ES11/ES6-ES11笔记.html","hash":"74138132d310f18b743ee5b233e6dae59af29195","modified":1688904548193},{"_id":"public/2023/07/04/图床/index.html","hash":"3f670334b856df036d825a3ad201fe77497dbe10","modified":1688904548193},{"_id":"public/2023/07/04/常用/index.html","hash":"368a362670ab9aa822ab4c3a7f5ed786188bc599","modified":1688904548193},{"_id":"public/2023/07/04/ES6-ES11笔记/index.html","hash":"917871b02bd1fbcbf7d8f2744a38196df13d6acb","modified":1688904548193},{"_id":"public/archives/index.html","hash":"34d83a513e1bf320423cd19e8a977aeac4d4b0f6","modified":1688904548193},{"_id":"public/archives/2023/index.html","hash":"151f5fa9c1c9274a7fdff70d79e569c074277a36","modified":1688904548193},{"_id":"public/archives/2023/07/index.html","hash":"c91affc11b107c7dbc458d70ee0dbc0ff4338689","modified":1688904548193},{"_id":"public/categories/JS/index.html","hash":"4f57e07a94011b52d1f270ec36e6cd88d13ea228","modified":1688904548193},{"_id":"public/categories/GitHub/index.html","hash":"6d0ee4d77228cf758317af1b03bc115da5c8ccde","modified":1688904548193},{"_id":"public/index.html","hash":"691a3832af8dde3434021bf26fc5df41f4cb5cc2","modified":1688904548193},{"_id":"public/tags/JS-ES6/index.html","hash":"06db51cced3082b7ab39bce9e93e28678ea2d59c","modified":1688904548193},{"_id":"public/tags/GitHub/index.html","hash":"a0d1f3219d4139d9ad235205ceec25096cafef96","modified":1688904548193},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1688904548193},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1688904548193},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1688904548193},{"_id":"public/src/ES6-ES11/ES6-11基础知识点.emmx","hash":"5caec5daf15db096bf65169df90b06f391ab5b78","modified":1688904548193},{"_id":"public/img/20230709195511.png","hash":"960785cb89596b0d81d87d8c3d3b312fe31ab25b","modified":1688904548193},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1688904548193},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1688904548193},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1688904548193},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1688904548193},{"_id":"public/css/index.css","hash":"a65e7c436ff97c1256eba5fa73a6cf8cbf1d1a54","modified":1688904548193},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1688904548193},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1688904548193},{"_id":"public/img/asid_img_dark.jpg","hash":"cb67a3601eb8c54cfe56ddd45a92059cc03bda2d","modified":1688904548193},{"_id":"public/img/2.jpg","hash":"0cdce65960fc3123dc64e48ba409e6262550fa46","modified":1688904548193},{"_id":"public/img/hk.jpeg","hash":"3df7ffbb779704a1b23b2d636718147d24919b8a","modified":1688904548193},{"_id":"public/img/asid_img.jpg","hash":"569c2a92983aafee56b6439728b44d47ad9a8e7d","modified":1688904548193},{"_id":"public/img/3.jpg","hash":"5db68f6a07e8814c31bb0c694f1102c8fbcfd021","modified":1688904548193},{"_id":"public/img/wallhaven-rr2wmm.png","hash":"112d5f0bf6997c0d80a7588747f6107fcbef4526","modified":1688904548193},{"_id":"source/.gitignore","hash":"3d92d8a525edf773deefbd02a9081a395ff080de","modified":1688912849905},{"_id":"source/.obsidian/app.json","hash":"529cf502de282f6e025a3c2cc3c1b855f194642d","modified":1689173776915},{"_id":"source/.obsidian/.gitignore","hash":"58a6d42b59e126114604701e70c266069f29584e","modified":1686497601792},{"_id":"source/.obsidian/appearance.json","hash":"06d3a5cc162be5105c7c17b3ee0a7bc4596c999a","modified":1688912698041},{"_id":"source/.obsidian/community-plugins.json","hash":"d9f172e35521f7d650034363a361120c25c7096a","modified":1688799575559},{"_id":"source/.obsidian/graph.json","hash":"c2e73287414310ff7e496a7b992d65095bea0c7b","modified":1688913153941},{"_id":"source/.obsidian/core-plugins-migration.json","hash":"6135e79c9956f42f27d5022b3a8097ebd7a53ce0","modified":1688912697682},{"_id":"source/.obsidian/core-plugins.json","hash":"752981e1685d8657f11e210c180d28649340cd7d","modified":1688912697680},{"_id":"source/.obsidian/hotkeys.json","hash":"27b7003a8647e7316f292e8e9817f44049bf5319","modified":1688458746050},{"_id":"source/.obsidian/templates.json","hash":"56191000973bb78224993290a4ba008dd8a01414","modified":1689086209665},{"_id":"source/.obsidian/workspace.json","hash":"45909e1f413e31ef6bd663f8f51ac56c7691319e","modified":1689174443617},{"_id":"source/.obsidian/workspaces.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1686143364954},{"_id":"source/模版/模版.md","hash":"a3ebd92ca4b4a0059c367e07238aa69e66502c14","modified":1688462315512},{"_id":"source/.obsidian/plugins/ZH增强编辑/data.json","hash":"8c71a223865c3a28f4b83694698bc9ed2b3c83e4","modified":1686153430139},{"_id":"source/.obsidian/plugins/ZH增强编辑/manifest.json","hash":"a201f89fbb8926f9d555e07e7c4ef0c9646d92a4","modified":1676358475109},{"_id":"source/.obsidian/plugins/editing-toolbar/data.json","hash":"5dca4f016a4452e4bdb2a6cb10d63b8509ec3559","modified":1687504549331},{"_id":"source/.obsidian/plugins/editing-toolbar/manifest.json","hash":"43a68212b76e1c7af5c9936136849837f5753104","modified":1686153670239},{"_id":"source/.obsidian/plugins/editing-toolbar/styles.css","hash":"9fbca60b18f5a68e9bf057e6db5daec41bd217e9","modified":1686153673519},{"_id":"source/.obsidian/plugins/obsidian-auto-link-title/main.js","hash":"29dab353b7abc7346b7f905984d44c2173f4a164","modified":1686151612230},{"_id":"source/.obsidian/plugins/obsidian-auto-link-title/manifest.json","hash":"9b95f68b5c21ccaec6c00822b4f2204970b5fc07","modified":1686151611243},{"_id":"source/.obsidian/plugins/obsidian-auto-link-title/styles.css","hash":"ab566e8ba2a21c8f92b056d37e7d5264888c145a","modified":1686151613083},{"_id":"source/.obsidian/plugins/table-editor-obsidian/data.json","hash":"94c879cd5c6a819bd39c4de9d25919dcf08764a0","modified":1688912704097},{"_id":"source/.obsidian/plugins/table-editor-obsidian/manifest.json","hash":"d63fff649e6fcd9fd5b8eada80b6414feddad7de","modified":1687504889851},{"_id":"source/.obsidian/plugins/table-editor-obsidian/styles.css","hash":"a03f657e10903825a3c4b2c2ff67b378b33df136","modified":1687504923748},{"_id":"source/.obsidian/plugins/ZH增强编辑/main.js","hash":"399bc110196349afc3d6ccbb243d1b67dfef1987","modified":1676359991130},{"_id":"source/模版/模版 全套样式解析.md","hash":"234ca20c0a735bbdc82a4685e867affde5f8d10c","modified":1688457039893},{"_id":"source/.obsidian/plugins/editing-toolbar/main.js","hash":"4d51ef9a1a088d2f1aca1727b45f2468fb6b3bc8","modified":1686153672638},{"_id":"source/.obsidian/plugins/table-editor-obsidian/main.js","hash":"ad3a3ce7b72c396c15c638c1e4e835fe2a4951ba","modified":1687504922740},{"_id":"source/_posts/SpringBoot基础入门.md","hash":"90e68021eb63789d31951abe3272b7e28cb5b8ab","modified":1689086370422},{"_id":"source/_posts/SpringBoot核心功能.md","hash":"85a4afa2c403d09d7ec9d74584f8b0c965d722e7","modified":1689086352071},{"_id":"source/_posts/本地项目让别人可以被访问.md","hash":"cb387233982d91354e246ba8eac954938d5666fa","modified":1689086694543},{"_id":"source/categories/软件.md","hash":"89e317f59d1f198c238d7039f449351e9a99e8c4","modified":1689174034768},{"_id":"source/src/ES6-ES11/17_生成器函数参数传递.html","hash":"d68d648097daf2208e794961d63dff2879877739","modified":1688653728978},{"_id":"source/src/ES6-ES11/18_生成器函数实例.html","hash":"9cb2f77292f7af8b84a49edbd5abbc6ea237c519","modified":1688999455282},{"_id":"source/src/ES6-ES11/19_生成器实例2.html","hash":"0ef803b846e00d8fea716a1c26aaa368b7f8a32e","modified":1689003499553},{"_id":"source/_posts/软件.md","hash":"89e317f59d1f198c238d7039f449351e9a99e8c4","modified":1689174034768},{"_id":"source/_posts/a/软件.md","hash":"f1c38b384aa4b79973f22ea5e54fc213d92fde93","modified":1689174456696}],"Category":[{"name":"JS","_id":"cljv8uxm500047ci03e8071as"},{"name":"GitHub","_id":"cljv8uxm9000a7ci0gm0c6kne"},{"name":"SpringBoot","_id":"cljzumpt50006dgi0g80tey22"},{"name":"常用","_id":"cljzumptc000cdgi04r84288s"},{"name":"软件","_id":"cljzuocxw000kdgi091ytgyc4"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}],"Page":[{"title":"关于","date":"2023-06-23T08:00:06.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2023-06-23 16:00:06\ntype: \"about\"\n---\n","updated":"2023-07-06T15:16:42.631Z","path":"about/index.html","comments":1,"layout":"page","_id":"cljv8uxlw00007ci07drld42v","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"分类页","date":"2023-06-23T08:00:06.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类页\ndate: 2023-06-23 16:00:06\ntype: \"categories\"\n---\n","updated":"2023-06-23T08:01:59.534Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cljv8uxm300027ci0dsm26y4q","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"_content":"[data-theme=\"dark\"] *{\n  color: #ffffff;\n}\n\n/* 页脚透明 */\n#footer {\n  background: transparent !important;\n}\n\n/* 头图透明 */\n/* #page-header {\n    background: transparent !important;\n} */\n\n/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */\n/* #page-header.post-bg:before {\n    background-color: transparent !important;\n} */\n\n/*夜间模式伪类遮罩层透明*/\n[data-theme=\"dark\"] #footer::before {\n  background: transparent !important;\n}\n\n[data-theme=\"dark\"] #page-header::before {\n  background: transparent !important;\n}\n\n/* #body-wrap { */\n/* background-image: url(\"https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png\"),\n    linear-gradient(60deg, rgba(255, 165, 150, 0.5) 5%, rgba(0, 228, 255, 0.35)),\n    url(\"../img/hk.jpeg\"); */\n/* 背景图像不重复 */\n/* background-repeat: no-repeat; */\n/* 背景图像大小 */\n/* background-size: cover; */\n/* } */\n\n/*侧边栏的个人信息的背景设置*/\n#aside-content > .card-widget.card-info {\n  /*换成自己图片的地址*/\n  background-image: url(\"../img/asid_img.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: inherit;\n  /* background-size: 100% */\n}\n/*黑暗主题下的配置*/\n[data-theme=\"dark\"] #aside-content > .card-widget.card-info {\n  /*换成自己图片的地址*/\n  background-image: url(\"../img/asid_img_dark.jpg\") !important;\n}\n\n/* 背景宇宙星光  */\n[data-theme=\"dark\"] #universe {\n  display: block;\n  position: fixed;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n}\n\n/* 鼠标样式 */\nbody {\n  cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur),\n    default;\n}\na,\nimg {\n  cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur),\n    default;\n}\n\n/* 滚动条 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n::-webkit-scrollbar-track {\n  background-color: rgba(73, 177, 245, 0.2);\n  border-radius: 2em;\n}\n::-webkit-scrollbar-thumb {\n  background-color: #49b1f5;\n  background-image: -webkit-linear-gradient(\n    45deg,\n    rgba(255, 255, 255, 0.4) 25%,\n    transparent 25%,\n    transparent 50%,\n    rgba(255, 255, 255, 0.4) 50%,\n    rgba(255, 255, 255, 0.4) 75%,\n    transparent 75%,\n    transparent\n  );\n  border-radius: 2em;\n}\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n::-moz-selection {\n  color: #fff;\n  background-color: #49b1f5;\n}\n\n/* 导航菜单的修改 */\n#nav-right {\n  flex: 1 1 auto;\n  justify-content: flex-end;\n  margin-left: auto;\n  display: flex;\n  flex-wrap: nowrap;\n}\n\n#web_bg {\n  position: fixed;\n  z-index: -999;\n  width: 100%;\n  height: 100%;\n  /* background: url(https://w.wallhaven.cc/full/rr/wallhaven-rr2wmm.png); */\n  background: url(\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/wallhaven-rr2wmm.png\");\n  background-attachment: local;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n/* 设置文本的透明度 */\n\n/* 文章页背景 */\n.layout_post > #post {\n  /* 以下代表透明度为0.7 可以自行修改*/\n  background: rgba(255, 255, 255, 0.7);\n}\n\n[data-theme=\"dark\"] .layout_post > #post {\n  /* 以下代表透明度为0.7 可以自行修改*/\n  background: rgba(255, 255, 255, 1);\n}\n/* 所有页面背景 */\n#aside_content .card-widget,\n#recent-posts > .recent-post-item,\n.layout_page > div:first-child:not(.recent-posts),\n.layout_post > #page,\n.layout_post > #post,\n.read-mode .layout_post > #post {\n  /* 以下代表透明度为0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n/*侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, 0.7);\n}\n/* 页脚透明 */\n#footer {\n  /* 以下代表透明度为0.7 */\n  background: rgba(255, 255, 255, 0);\n}\n\n/* 设置顶部的 透明度 */\n#page-header {\n  background: transparent !important;\n}\n\n/* 每日一言的调整 */\n/* 每日一言打字机效果 */\n#hitokoto {\n  /* height: 100vh; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: rgb(43, 52, 82); */\n}\n#hitokoto_text {\n  font-family: \"fangsong\";\n  display: inline-block;\n  position: relative;\n  font-size: 1.5em;\n  height: 30px;\n  line-height: 30px;\n  color: rgb(245, 245, 245);\n}\n#hitokoto_text::after {\n  content: \"\";\n  position: absolute;\n  right: -10px;\n  top: 5px;\n  height: 1.2em;\n  width: 3px;\n  background-color: #fff;\n  animation: san 0.5s steps(1) infinite;\n}\n@keyframes san {\n  0%,\n  100% {\n    background-color: #fff;\n  }\n  50% {\n    background-color: transparent;\n  }\n}\n\n\n/* 侧边栏  公告简介 */\n.announcement_content{\n  /* font-size: 5px; */\n  color: rgb(255, 0, 81);\n}\n","source":"css/personalStyle.css","raw":"[data-theme=\"dark\"] *{\n  color: #ffffff;\n}\n\n/* 页脚透明 */\n#footer {\n  background: transparent !important;\n}\n\n/* 头图透明 */\n/* #page-header {\n    background: transparent !important;\n} */\n\n/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */\n/* #page-header.post-bg:before {\n    background-color: transparent !important;\n} */\n\n/*夜间模式伪类遮罩层透明*/\n[data-theme=\"dark\"] #footer::before {\n  background: transparent !important;\n}\n\n[data-theme=\"dark\"] #page-header::before {\n  background: transparent !important;\n}\n\n/* #body-wrap { */\n/* background-image: url(\"https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png\"),\n    linear-gradient(60deg, rgba(255, 165, 150, 0.5) 5%, rgba(0, 228, 255, 0.35)),\n    url(\"../img/hk.jpeg\"); */\n/* 背景图像不重复 */\n/* background-repeat: no-repeat; */\n/* 背景图像大小 */\n/* background-size: cover; */\n/* } */\n\n/*侧边栏的个人信息的背景设置*/\n#aside-content > .card-widget.card-info {\n  /*换成自己图片的地址*/\n  background-image: url(\"../img/asid_img.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: inherit;\n  /* background-size: 100% */\n}\n/*黑暗主题下的配置*/\n[data-theme=\"dark\"] #aside-content > .card-widget.card-info {\n  /*换成自己图片的地址*/\n  background-image: url(\"../img/asid_img_dark.jpg\") !important;\n}\n\n/* 背景宇宙星光  */\n[data-theme=\"dark\"] #universe {\n  display: block;\n  position: fixed;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n}\n\n/* 鼠标样式 */\nbody {\n  cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur),\n    default;\n}\na,\nimg {\n  cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur),\n    default;\n}\n\n/* 滚动条 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n::-webkit-scrollbar-track {\n  background-color: rgba(73, 177, 245, 0.2);\n  border-radius: 2em;\n}\n::-webkit-scrollbar-thumb {\n  background-color: #49b1f5;\n  background-image: -webkit-linear-gradient(\n    45deg,\n    rgba(255, 255, 255, 0.4) 25%,\n    transparent 25%,\n    transparent 50%,\n    rgba(255, 255, 255, 0.4) 50%,\n    rgba(255, 255, 255, 0.4) 75%,\n    transparent 75%,\n    transparent\n  );\n  border-radius: 2em;\n}\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n::-moz-selection {\n  color: #fff;\n  background-color: #49b1f5;\n}\n\n/* 导航菜单的修改 */\n#nav-right {\n  flex: 1 1 auto;\n  justify-content: flex-end;\n  margin-left: auto;\n  display: flex;\n  flex-wrap: nowrap;\n}\n\n#web_bg {\n  position: fixed;\n  z-index: -999;\n  width: 100%;\n  height: 100%;\n  /* background: url(https://w.wallhaven.cc/full/rr/wallhaven-rr2wmm.png); */\n  background: url(\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/wallhaven-rr2wmm.png\");\n  background-attachment: local;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n/* 设置文本的透明度 */\n\n/* 文章页背景 */\n.layout_post > #post {\n  /* 以下代表透明度为0.7 可以自行修改*/\n  background: rgba(255, 255, 255, 0.7);\n}\n\n[data-theme=\"dark\"] .layout_post > #post {\n  /* 以下代表透明度为0.7 可以自行修改*/\n  background: rgba(255, 255, 255, 1);\n}\n/* 所有页面背景 */\n#aside_content .card-widget,\n#recent-posts > .recent-post-item,\n.layout_page > div:first-child:not(.recent-posts),\n.layout_post > #page,\n.layout_post > #post,\n.read-mode .layout_post > #post {\n  /* 以下代表透明度为0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n/*侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, 0.7);\n}\n/* 页脚透明 */\n#footer {\n  /* 以下代表透明度为0.7 */\n  background: rgba(255, 255, 255, 0);\n}\n\n/* 设置顶部的 透明度 */\n#page-header {\n  background: transparent !important;\n}\n\n/* 每日一言的调整 */\n/* 每日一言打字机效果 */\n#hitokoto {\n  /* height: 100vh; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: rgb(43, 52, 82); */\n}\n#hitokoto_text {\n  font-family: \"fangsong\";\n  display: inline-block;\n  position: relative;\n  font-size: 1.5em;\n  height: 30px;\n  line-height: 30px;\n  color: rgb(245, 245, 245);\n}\n#hitokoto_text::after {\n  content: \"\";\n  position: absolute;\n  right: -10px;\n  top: 5px;\n  height: 1.2em;\n  width: 3px;\n  background-color: #fff;\n  animation: san 0.5s steps(1) infinite;\n}\n@keyframes san {\n  0%,\n  100% {\n    background-color: #fff;\n  }\n  50% {\n    background-color: transparent;\n  }\n}\n\n\n/* 侧边栏  公告简介 */\n.announcement_content{\n  /* font-size: 5px; */\n  color: rgb(255, 0, 81);\n}\n","date":"2023-07-10T14:15:03.463Z","updated":"2023-07-10T14:15:03.463Z","path":"css/personalStyle.css","layout":"false","_id":"cljv8uxm700067ci0gwxhf5z8","title":"","comments":1,"content":"[data-theme=\"dark\"] *{\n  color: #ffffff;\n}\n\n/* 页脚透明 */\n#footer {\n  background: transparent !important;\n}\n\n/* 头图透明 */\n/* #page-header {\n    background: transparent !important;\n} */\n\n/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */\n/* #page-header.post-bg:before {\n    background-color: transparent !important;\n} */\n\n/*夜间模式伪类遮罩层透明*/\n[data-theme=\"dark\"] #footer::before {\n  background: transparent !important;\n}\n\n[data-theme=\"dark\"] #page-header::before {\n  background: transparent !important;\n}\n\n/* #body-wrap { */\n/* background-image: url(\"https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png\"),\n    linear-gradient(60deg, rgba(255, 165, 150, 0.5) 5%, rgba(0, 228, 255, 0.35)),\n    url(\"../img/hk.jpeg\"); */\n/* 背景图像不重复 */\n/* background-repeat: no-repeat; */\n/* 背景图像大小 */\n/* background-size: cover; */\n/* } */\n\n/*侧边栏的个人信息的背景设置*/\n#aside-content > .card-widget.card-info {\n  /*换成自己图片的地址*/\n  background-image: url(\"../img/asid_img.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: inherit;\n  /* background-size: 100% */\n}\n/*黑暗主题下的配置*/\n[data-theme=\"dark\"] #aside-content > .card-widget.card-info {\n  /*换成自己图片的地址*/\n  background-image: url(\"../img/asid_img_dark.jpg\") !important;\n}\n\n/* 背景宇宙星光  */\n[data-theme=\"dark\"] #universe {\n  display: block;\n  position: fixed;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n}\n\n/* 鼠标样式 */\nbody {\n  cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur),\n    default;\n}\na,\nimg {\n  cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur),\n    default;\n}\n\n/* 滚动条 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n::-webkit-scrollbar-track {\n  background-color: rgba(73, 177, 245, 0.2);\n  border-radius: 2em;\n}\n::-webkit-scrollbar-thumb {\n  background-color: #49b1f5;\n  background-image: -webkit-linear-gradient(\n    45deg,\n    rgba(255, 255, 255, 0.4) 25%,\n    transparent 25%,\n    transparent 50%,\n    rgba(255, 255, 255, 0.4) 50%,\n    rgba(255, 255, 255, 0.4) 75%,\n    transparent 75%,\n    transparent\n  );\n  border-radius: 2em;\n}\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n::-moz-selection {\n  color: #fff;\n  background-color: #49b1f5;\n}\n\n/* 导航菜单的修改 */\n#nav-right {\n  flex: 1 1 auto;\n  justify-content: flex-end;\n  margin-left: auto;\n  display: flex;\n  flex-wrap: nowrap;\n}\n\n#web_bg {\n  position: fixed;\n  z-index: -999;\n  width: 100%;\n  height: 100%;\n  /* background: url(https://w.wallhaven.cc/full/rr/wallhaven-rr2wmm.png); */\n  background: url(\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/wallhaven-rr2wmm.png\");\n  background-attachment: local;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n/* 设置文本的透明度 */\n\n/* 文章页背景 */\n.layout_post > #post {\n  /* 以下代表透明度为0.7 可以自行修改*/\n  background: rgba(255, 255, 255, 0.7);\n}\n\n[data-theme=\"dark\"] .layout_post > #post {\n  /* 以下代表透明度为0.7 可以自行修改*/\n  background: rgba(255, 255, 255, 1);\n}\n/* 所有页面背景 */\n#aside_content .card-widget,\n#recent-posts > .recent-post-item,\n.layout_page > div:first-child:not(.recent-posts),\n.layout_post > #page,\n.layout_post > #post,\n.read-mode .layout_post > #post {\n  /* 以下代表透明度为0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n/*侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, 0.7);\n}\n/* 页脚透明 */\n#footer {\n  /* 以下代表透明度为0.7 */\n  background: rgba(255, 255, 255, 0);\n}\n\n/* 设置顶部的 透明度 */\n#page-header {\n  background: transparent !important;\n}\n\n/* 每日一言的调整 */\n/* 每日一言打字机效果 */\n#hitokoto {\n  /* height: 100vh; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: rgb(43, 52, 82); */\n}\n#hitokoto_text {\n  font-family: \"fangsong\";\n  display: inline-block;\n  position: relative;\n  font-size: 1.5em;\n  height: 30px;\n  line-height: 30px;\n  color: rgb(245, 245, 245);\n}\n#hitokoto_text::after {\n  content: \"\";\n  position: absolute;\n  right: -10px;\n  top: 5px;\n  height: 1.2em;\n  width: 3px;\n  background-color: #fff;\n  animation: san 0.5s steps(1) infinite;\n}\n@keyframes san {\n  0%,\n  100% {\n    background-color: #fff;\n  }\n  50% {\n    background-color: transparent;\n  }\n}\n\n\n/* 侧边栏  公告简介 */\n.announcement_content{\n  /* font-size: 5px; */\n  color: rgb(255, 0, 81);\n}\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"[data-theme=\"dark\"] *{\n  color: #ffffff;\n}\n\n/* 页脚透明 */\n#footer {\n  background: transparent !important;\n}\n\n/* 头图透明 */\n/* #page-header {\n    background: transparent !important;\n} */\n\n/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */\n/* #page-header.post-bg:before {\n    background-color: transparent !important;\n} */\n\n/*夜间模式伪类遮罩层透明*/\n[data-theme=\"dark\"] #footer::before {\n  background: transparent !important;\n}\n\n[data-theme=\"dark\"] #page-header::before {\n  background: transparent !important;\n}\n\n/* #body-wrap { */\n/* background-image: url(\"https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png\"),\n    linear-gradient(60deg, rgba(255, 165, 150, 0.5) 5%, rgba(0, 228, 255, 0.35)),\n    url(\"../img/hk.jpeg\"); */\n/* 背景图像不重复 */\n/* background-repeat: no-repeat; */\n/* 背景图像大小 */\n/* background-size: cover; */\n/* } */\n\n/*侧边栏的个人信息的背景设置*/\n#aside-content > .card-widget.card-info {\n  /*换成自己图片的地址*/\n  background-image: url(\"../img/asid_img.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: inherit;\n  /* background-size: 100% */\n}\n/*黑暗主题下的配置*/\n[data-theme=\"dark\"] #aside-content > .card-widget.card-info {\n  /*换成自己图片的地址*/\n  background-image: url(\"../img/asid_img_dark.jpg\") !important;\n}\n\n/* 背景宇宙星光  */\n[data-theme=\"dark\"] #universe {\n  display: block;\n  position: fixed;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n}\n\n/* 鼠标样式 */\nbody {\n  cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur),\n    default;\n}\na,\nimg {\n  cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur),\n    default;\n}\n\n/* 滚动条 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n::-webkit-scrollbar-track {\n  background-color: rgba(73, 177, 245, 0.2);\n  border-radius: 2em;\n}\n::-webkit-scrollbar-thumb {\n  background-color: #49b1f5;\n  background-image: -webkit-linear-gradient(\n    45deg,\n    rgba(255, 255, 255, 0.4) 25%,\n    transparent 25%,\n    transparent 50%,\n    rgba(255, 255, 255, 0.4) 50%,\n    rgba(255, 255, 255, 0.4) 75%,\n    transparent 75%,\n    transparent\n  );\n  border-radius: 2em;\n}\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n::-moz-selection {\n  color: #fff;\n  background-color: #49b1f5;\n}\n\n/* 导航菜单的修改 */\n#nav-right {\n  flex: 1 1 auto;\n  justify-content: flex-end;\n  margin-left: auto;\n  display: flex;\n  flex-wrap: nowrap;\n}\n\n#web_bg {\n  position: fixed;\n  z-index: -999;\n  width: 100%;\n  height: 100%;\n  /* background: url(https://w.wallhaven.cc/full/rr/wallhaven-rr2wmm.png); */\n  background: url(\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/wallhaven-rr2wmm.png\");\n  background-attachment: local;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n/* 设置文本的透明度 */\n\n/* 文章页背景 */\n.layout_post > #post {\n  /* 以下代表透明度为0.7 可以自行修改*/\n  background: rgba(255, 255, 255, 0.7);\n}\n\n[data-theme=\"dark\"] .layout_post > #post {\n  /* 以下代表透明度为0.7 可以自行修改*/\n  background: rgba(255, 255, 255, 1);\n}\n/* 所有页面背景 */\n#aside_content .card-widget,\n#recent-posts > .recent-post-item,\n.layout_page > div:first-child:not(.recent-posts),\n.layout_post > #page,\n.layout_post > #post,\n.read-mode .layout_post > #post {\n  /* 以下代表透明度为0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n/*侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, 0.7);\n}\n/* 页脚透明 */\n#footer {\n  /* 以下代表透明度为0.7 */\n  background: rgba(255, 255, 255, 0);\n}\n\n/* 设置顶部的 透明度 */\n#page-header {\n  background: transparent !important;\n}\n\n/* 每日一言的调整 */\n/* 每日一言打字机效果 */\n#hitokoto {\n  /* height: 100vh; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: rgb(43, 52, 82); */\n}\n#hitokoto_text {\n  font-family: \"fangsong\";\n  display: inline-block;\n  position: relative;\n  font-size: 1.5em;\n  height: 30px;\n  line-height: 30px;\n  color: rgb(245, 245, 245);\n}\n#hitokoto_text::after {\n  content: \"\";\n  position: absolute;\n  right: -10px;\n  top: 5px;\n  height: 1.2em;\n  width: 3px;\n  background-color: #fff;\n  animation: san 0.5s steps(1) infinite;\n}\n@keyframes san {\n  0%,\n  100% {\n    background-color: #fff;\n  }\n  50% {\n    background-color: transparent;\n  }\n}\n\n\n/* 侧边栏  公告简介 */\n.announcement_content{\n  /* font-size: 5px; */\n  color: rgb(255, 0, 81);\n}\n"},{"_content":"\nfunction cvdisplay() {\n    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {\n        document.getElementById('universe').style.display = \"\";\n        document.getElementById('body-wrap').style.background = \"none\";\n    }\n}\ncvdisplay()\nlet theme = document.getElementsByTagName('html')[0].getAttribute('data-theme');\n// 为白天黑夜模式添加监听事件   日常模式和暗黑模式之间切换的优化\ndocument.getElementById('darkmode').addEventListener('click', function () {\n    if (theme === 'light') {\n        // theme = 'dark'\n        document.getElementById('universe').style.display = \"\";\n        document.getElementById('body-wrap').style.background = \"none\";\n    } else {\n        // theme = 'light'\n        document.getElementById('universe').style.display = \"none\";//暗黑模式的canvas画布\n        document.getElementById('body-wrap').style.background = \"\";//日常模式的背景图片\n    }\n})\n\nfunction dark() {\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n    var n, e, i, h, t = .05,\n        s = document.getElementById(\"universe\"),\n        o = !0,\n        a = \"180,184,240\",\n        r = \"226,225,142\",\n        d = \"226,225,224\",\n        c = [];\n\n    function f() {\n        n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute(\"width\", n), s.setAttribute(\"height\", e)\n    }\n\n    function u() {\n        h.clearRect(0, 0, n, e);\n        for (var t = c.length, i = 0; i < t; i++) {\n            var s = c[i];\n            s.move(), s.fadeIn(), s.fadeOut(), s.draw()\n        }\n    }\n\n    function y() {\n        this.reset = function () {\n            this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1)\n        }, this.fadeIn = function () {\n            this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do)\n        }, this.fadeOut = function () {\n            this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset()))\n        }, this.draw = function () {\n            if (h.beginPath(), this.giant) h.fillStyle = \"rgba(\" + a + \",\" + this.opacity + \")\", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1);\n            else if (this.comet) {\n                h.fillStyle = \"rgba(\" + d + \",\" + this.opacity + \")\", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1);\n                for (var t = 0; t < 30; t++) h.fillStyle = \"rgba(\" + d + \",\" + (this.opacity - this.opacity / 20 * t) + \")\", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill()\n            } else h.fillStyle = \"rgba(\" + r + \",\" + this.opacity + \")\", h.rect(this.x, this.y, this.r, this.r);\n            h.closePath(), h.fill()\n        }, this.move = function () {\n            this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0)\n        }, setTimeout(function () {\n            o = !1\n        }, 50)\n    }\n\n    function m(t) {\n        return Math.floor(1e3 * Math.random()) + 1 < 10 * t\n    }\n\n    function l(t, i) {\n        return Math.random() * (i - t) + t\n    }\n    f(), window.addEventListener(\"resize\", f, !1),\n        function () {\n            h = s.getContext(\"2d\");\n            for (var t = 0; t < i; t++) c[t] = new y, c[t].reset();\n            u()\n        }(),\n        function t() {\n            document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t)\n        }()\n};\ndark()\n\n\n\n// 每日一言 的配置准备\nlet newEle = `\n<p id=\"hitokoto\">\n  <a href=\"#\" id=\"hitokoto_text\">:D 获取中...</a>\n</p>`;\n\nlet insertAfter = function (content) {\n    this.content = content;\n    (function (content) {\n        if (document.getElementById('site-info')) {\n            var div = document.createElement('div');\n            div.innerHTML = content;\n            // div.style.color = 'red';\n            var site = document.getElementsByClassName(\"site_social_icons\")[0];\n            document.getElementById('site-info').insertBefore(div, site)\n\n            evenonlange();\n        }\n    })(content)\n};\ninsertAfter(newEle);\n\n// 每日一言内容获取\nfunction evenonlange() {\n    fetch('https://v1.hitokoto.cn')\n        .then(response => response.json())\n        .then(data => {\n            const hitokoto = document.querySelector('#hitokoto_text')\n            // hitokoto.href = `https://hitokoto.cn/?uuid=${data.uuid}`\n            hitokoto.innerText = data.hitokoto\n\n            daziji();\n        })\n        .catch(console.error)\n}\n\n\n// 打字机效果\nfunction daziji() {\n    const text = document.querySelector('#hitokoto_text');\n    const nr = document.getElementById('hitokoto_text').innerText;\n    const txt = [nr];\n\n    var index = 0;\n    var xiaBiao = 0;\n    var huan = true;\n\n    setInterval(function () {\n\n        if (huan) {\n            text.innerHTML = txt[xiaBiao].slice(0, ++index);\n            // console.log(index);\n        }\n        else {\n            text.innerHTML = txt[xiaBiao].slice(0, index--);\n            // console.log(index);\n        }\n\n        if (index == txt[xiaBiao].length + 3) {\n            huan = false;\n        }\n        else if (index < 0) {\n            index = 0;\n            huan = true;\n            xiaBiao++;\n            if (xiaBiao >= txt.length) {\n                xiaBiao = 0;\n            }\n        }\n\n    }, 200)\n}\n","source":"js/universe.js","raw":"\nfunction cvdisplay() {\n    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {\n        document.getElementById('universe').style.display = \"\";\n        document.getElementById('body-wrap').style.background = \"none\";\n    }\n}\ncvdisplay()\nlet theme = document.getElementsByTagName('html')[0].getAttribute('data-theme');\n// 为白天黑夜模式添加监听事件   日常模式和暗黑模式之间切换的优化\ndocument.getElementById('darkmode').addEventListener('click', function () {\n    if (theme === 'light') {\n        // theme = 'dark'\n        document.getElementById('universe').style.display = \"\";\n        document.getElementById('body-wrap').style.background = \"none\";\n    } else {\n        // theme = 'light'\n        document.getElementById('universe').style.display = \"none\";//暗黑模式的canvas画布\n        document.getElementById('body-wrap').style.background = \"\";//日常模式的背景图片\n    }\n})\n\nfunction dark() {\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n    var n, e, i, h, t = .05,\n        s = document.getElementById(\"universe\"),\n        o = !0,\n        a = \"180,184,240\",\n        r = \"226,225,142\",\n        d = \"226,225,224\",\n        c = [];\n\n    function f() {\n        n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute(\"width\", n), s.setAttribute(\"height\", e)\n    }\n\n    function u() {\n        h.clearRect(0, 0, n, e);\n        for (var t = c.length, i = 0; i < t; i++) {\n            var s = c[i];\n            s.move(), s.fadeIn(), s.fadeOut(), s.draw()\n        }\n    }\n\n    function y() {\n        this.reset = function () {\n            this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1)\n        }, this.fadeIn = function () {\n            this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do)\n        }, this.fadeOut = function () {\n            this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset()))\n        }, this.draw = function () {\n            if (h.beginPath(), this.giant) h.fillStyle = \"rgba(\" + a + \",\" + this.opacity + \")\", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1);\n            else if (this.comet) {\n                h.fillStyle = \"rgba(\" + d + \",\" + this.opacity + \")\", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1);\n                for (var t = 0; t < 30; t++) h.fillStyle = \"rgba(\" + d + \",\" + (this.opacity - this.opacity / 20 * t) + \")\", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill()\n            } else h.fillStyle = \"rgba(\" + r + \",\" + this.opacity + \")\", h.rect(this.x, this.y, this.r, this.r);\n            h.closePath(), h.fill()\n        }, this.move = function () {\n            this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0)\n        }, setTimeout(function () {\n            o = !1\n        }, 50)\n    }\n\n    function m(t) {\n        return Math.floor(1e3 * Math.random()) + 1 < 10 * t\n    }\n\n    function l(t, i) {\n        return Math.random() * (i - t) + t\n    }\n    f(), window.addEventListener(\"resize\", f, !1),\n        function () {\n            h = s.getContext(\"2d\");\n            for (var t = 0; t < i; t++) c[t] = new y, c[t].reset();\n            u()\n        }(),\n        function t() {\n            document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t)\n        }()\n};\ndark()\n\n\n\n// 每日一言 的配置准备\nlet newEle = `\n<p id=\"hitokoto\">\n  <a href=\"#\" id=\"hitokoto_text\">:D 获取中...</a>\n</p>`;\n\nlet insertAfter = function (content) {\n    this.content = content;\n    (function (content) {\n        if (document.getElementById('site-info')) {\n            var div = document.createElement('div');\n            div.innerHTML = content;\n            // div.style.color = 'red';\n            var site = document.getElementsByClassName(\"site_social_icons\")[0];\n            document.getElementById('site-info').insertBefore(div, site)\n\n            evenonlange();\n        }\n    })(content)\n};\ninsertAfter(newEle);\n\n// 每日一言内容获取\nfunction evenonlange() {\n    fetch('https://v1.hitokoto.cn')\n        .then(response => response.json())\n        .then(data => {\n            const hitokoto = document.querySelector('#hitokoto_text')\n            // hitokoto.href = `https://hitokoto.cn/?uuid=${data.uuid}`\n            hitokoto.innerText = data.hitokoto\n\n            daziji();\n        })\n        .catch(console.error)\n}\n\n\n// 打字机效果\nfunction daziji() {\n    const text = document.querySelector('#hitokoto_text');\n    const nr = document.getElementById('hitokoto_text').innerText;\n    const txt = [nr];\n\n    var index = 0;\n    var xiaBiao = 0;\n    var huan = true;\n\n    setInterval(function () {\n\n        if (huan) {\n            text.innerHTML = txt[xiaBiao].slice(0, ++index);\n            // console.log(index);\n        }\n        else {\n            text.innerHTML = txt[xiaBiao].slice(0, index--);\n            // console.log(index);\n        }\n\n        if (index == txt[xiaBiao].length + 3) {\n            huan = false;\n        }\n        else if (index < 0) {\n            index = 0;\n            huan = true;\n            xiaBiao++;\n            if (xiaBiao >= txt.length) {\n                xiaBiao = 0;\n            }\n        }\n\n    }, 200)\n}\n","date":"2023-07-09T13:04:29.464Z","updated":"2023-07-09T13:04:29.464Z","path":"js/universe.js","layout":"false","_id":"cljv8uxm800087ci0erp917op","title":"","comments":1,"content":"\nfunction cvdisplay() {\n    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {\n        document.getElementById('universe').style.display = \"\";\n        document.getElementById('body-wrap').style.background = \"none\";\n    }\n}\ncvdisplay()\nlet theme = document.getElementsByTagName('html')[0].getAttribute('data-theme');\n// 为白天黑夜模式添加监听事件   日常模式和暗黑模式之间切换的优化\ndocument.getElementById('darkmode').addEventListener('click', function () {\n    if (theme === 'light') {\n        // theme = 'dark'\n        document.getElementById('universe').style.display = \"\";\n        document.getElementById('body-wrap').style.background = \"none\";\n    } else {\n        // theme = 'light'\n        document.getElementById('universe').style.display = \"none\";//暗黑模式的canvas画布\n        document.getElementById('body-wrap').style.background = \"\";//日常模式的背景图片\n    }\n})\n\nfunction dark() {\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n    var n, e, i, h, t = .05,\n        s = document.getElementById(\"universe\"),\n        o = !0,\n        a = \"180,184,240\",\n        r = \"226,225,142\",\n        d = \"226,225,224\",\n        c = [];\n\n    function f() {\n        n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute(\"width\", n), s.setAttribute(\"height\", e)\n    }\n\n    function u() {\n        h.clearRect(0, 0, n, e);\n        for (var t = c.length, i = 0; i < t; i++) {\n            var s = c[i];\n            s.move(), s.fadeIn(), s.fadeOut(), s.draw()\n        }\n    }\n\n    function y() {\n        this.reset = function () {\n            this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1)\n        }, this.fadeIn = function () {\n            this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do)\n        }, this.fadeOut = function () {\n            this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset()))\n        }, this.draw = function () {\n            if (h.beginPath(), this.giant) h.fillStyle = \"rgba(\" + a + \",\" + this.opacity + \")\", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1);\n            else if (this.comet) {\n                h.fillStyle = \"rgba(\" + d + \",\" + this.opacity + \")\", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1);\n                for (var t = 0; t < 30; t++) h.fillStyle = \"rgba(\" + d + \",\" + (this.opacity - this.opacity / 20 * t) + \")\", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill()\n            } else h.fillStyle = \"rgba(\" + r + \",\" + this.opacity + \")\", h.rect(this.x, this.y, this.r, this.r);\n            h.closePath(), h.fill()\n        }, this.move = function () {\n            this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0)\n        }, setTimeout(function () {\n            o = !1\n        }, 50)\n    }\n\n    function m(t) {\n        return Math.floor(1e3 * Math.random()) + 1 < 10 * t\n    }\n\n    function l(t, i) {\n        return Math.random() * (i - t) + t\n    }\n    f(), window.addEventListener(\"resize\", f, !1),\n        function () {\n            h = s.getContext(\"2d\");\n            for (var t = 0; t < i; t++) c[t] = new y, c[t].reset();\n            u()\n        }(),\n        function t() {\n            document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t)\n        }()\n};\ndark()\n\n\n\n// 每日一言 的配置准备\nlet newEle = `\n<p id=\"hitokoto\">\n  <a href=\"#\" id=\"hitokoto_text\">:D 获取中...</a>\n</p>`;\n\nlet insertAfter = function (content) {\n    this.content = content;\n    (function (content) {\n        if (document.getElementById('site-info')) {\n            var div = document.createElement('div');\n            div.innerHTML = content;\n            // div.style.color = 'red';\n            var site = document.getElementsByClassName(\"site_social_icons\")[0];\n            document.getElementById('site-info').insertBefore(div, site)\n\n            evenonlange();\n        }\n    })(content)\n};\ninsertAfter(newEle);\n\n// 每日一言内容获取\nfunction evenonlange() {\n    fetch('https://v1.hitokoto.cn')\n        .then(response => response.json())\n        .then(data => {\n            const hitokoto = document.querySelector('#hitokoto_text')\n            // hitokoto.href = `https://hitokoto.cn/?uuid=${data.uuid}`\n            hitokoto.innerText = data.hitokoto\n\n            daziji();\n        })\n        .catch(console.error)\n}\n\n\n// 打字机效果\nfunction daziji() {\n    const text = document.querySelector('#hitokoto_text');\n    const nr = document.getElementById('hitokoto_text').innerText;\n    const txt = [nr];\n\n    var index = 0;\n    var xiaBiao = 0;\n    var huan = true;\n\n    setInterval(function () {\n\n        if (huan) {\n            text.innerHTML = txt[xiaBiao].slice(0, ++index);\n            // console.log(index);\n        }\n        else {\n            text.innerHTML = txt[xiaBiao].slice(0, index--);\n            // console.log(index);\n        }\n\n        if (index == txt[xiaBiao].length + 3) {\n            huan = false;\n        }\n        else if (index < 0) {\n            index = 0;\n            huan = true;\n            xiaBiao++;\n            if (xiaBiao >= txt.length) {\n                xiaBiao = 0;\n            }\n        }\n\n    }, 200)\n}\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"\nfunction cvdisplay() {\n    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {\n        document.getElementById('universe').style.display = \"\";\n        document.getElementById('body-wrap').style.background = \"none\";\n    }\n}\ncvdisplay()\nlet theme = document.getElementsByTagName('html')[0].getAttribute('data-theme');\n// 为白天黑夜模式添加监听事件   日常模式和暗黑模式之间切换的优化\ndocument.getElementById('darkmode').addEventListener('click', function () {\n    if (theme === 'light') {\n        // theme = 'dark'\n        document.getElementById('universe').style.display = \"\";\n        document.getElementById('body-wrap').style.background = \"none\";\n    } else {\n        // theme = 'light'\n        document.getElementById('universe').style.display = \"none\";//暗黑模式的canvas画布\n        document.getElementById('body-wrap').style.background = \"\";//日常模式的背景图片\n    }\n})\n\nfunction dark() {\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n    var n, e, i, h, t = .05,\n        s = document.getElementById(\"universe\"),\n        o = !0,\n        a = \"180,184,240\",\n        r = \"226,225,142\",\n        d = \"226,225,224\",\n        c = [];\n\n    function f() {\n        n = window.innerWidth, e = window.innerHeight, i = .216 * n, s.setAttribute(\"width\", n), s.setAttribute(\"height\", e)\n    }\n\n    function u() {\n        h.clearRect(0, 0, n, e);\n        for (var t = c.length, i = 0; i < t; i++) {\n            var s = c[i];\n            s.move(), s.fadeIn(), s.fadeOut(), s.draw()\n        }\n    }\n\n    function y() {\n        this.reset = function () {\n            this.giant = m(3), this.comet = !this.giant && !o && m(10), this.x = l(0, n - 10), this.y = l(0, e), this.r = l(1.1, 2.6), this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t, this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120), this.fadingOut = null, this.fadingIn = !0, this.opacity = 0, this.opacityTresh = l(.2, 1 - .4 * (this.comet + 1 - 1)), this.do = l(5e-4, .002) + .001 * (this.comet + 1 - 1)\n        }, this.fadeIn = function () {\n            this.fadingIn && (this.fadingIn = !(this.opacity > this.opacityTresh), this.opacity += this.do)\n        }, this.fadeOut = function () {\n            this.fadingOut && (this.fadingOut = !(this.opacity < 0), this.opacity -= this.do / 2, (this.x > n || this.y < 0) && (this.fadingOut = !1, this.reset()))\n        }, this.draw = function () {\n            if (h.beginPath(), this.giant) h.fillStyle = \"rgba(\" + a + \",\" + this.opacity + \")\", h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1);\n            else if (this.comet) {\n                h.fillStyle = \"rgba(\" + d + \",\" + this.opacity + \")\", h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1);\n                for (var t = 0; t < 30; t++) h.fillStyle = \"rgba(\" + d + \",\" + (this.opacity - this.opacity / 20 * t) + \")\", h.rect(this.x - this.dx / 4 * t, this.y - this.dy / 4 * t - 2, 2, 2), h.fill()\n            } else h.fillStyle = \"rgba(\" + r + \",\" + this.opacity + \")\", h.rect(this.x, this.y, this.r, this.r);\n            h.closePath(), h.fill()\n        }, this.move = function () {\n            this.x += this.dx, this.y += this.dy, !1 === this.fadingOut && this.reset(), (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0)\n        }, setTimeout(function () {\n            o = !1\n        }, 50)\n    }\n\n    function m(t) {\n        return Math.floor(1e3 * Math.random()) + 1 < 10 * t\n    }\n\n    function l(t, i) {\n        return Math.random() * (i - t) + t\n    }\n    f(), window.addEventListener(\"resize\", f, !1),\n        function () {\n            h = s.getContext(\"2d\");\n            for (var t = 0; t < i; t++) c[t] = new y, c[t].reset();\n            u()\n        }(),\n        function t() {\n            document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark' && u(), window.requestAnimationFrame(t)\n        }()\n};\ndark()\n\n\n\n// 每日一言 的配置准备\nlet newEle = `\n<p id=\"hitokoto\">\n  <a href=\"#\" id=\"hitokoto_text\">:D 获取中...</a>\n</p>`;\n\nlet insertAfter = function (content) {\n    this.content = content;\n    (function (content) {\n        if (document.getElementById('site-info')) {\n            var div = document.createElement('div');\n            div.innerHTML = content;\n            // div.style.color = 'red';\n            var site = document.getElementsByClassName(\"site_social_icons\")[0];\n            document.getElementById('site-info').insertBefore(div, site)\n\n            evenonlange();\n        }\n    })(content)\n};\ninsertAfter(newEle);\n\n// 每日一言内容获取\nfunction evenonlange() {\n    fetch('https://v1.hitokoto.cn')\n        .then(response => response.json())\n        .then(data => {\n            const hitokoto = document.querySelector('#hitokoto_text')\n            // hitokoto.href = `https://hitokoto.cn/?uuid=${data.uuid}`\n            hitokoto.innerText = data.hitokoto\n\n            daziji();\n        })\n        .catch(console.error)\n}\n\n\n// 打字机效果\nfunction daziji() {\n    const text = document.querySelector('#hitokoto_text');\n    const nr = document.getElementById('hitokoto_text').innerText;\n    const txt = [nr];\n\n    var index = 0;\n    var xiaBiao = 0;\n    var huan = true;\n\n    setInterval(function () {\n\n        if (huan) {\n            text.innerHTML = txt[xiaBiao].slice(0, ++index);\n            // console.log(index);\n        }\n        else {\n            text.innerHTML = txt[xiaBiao].slice(0, index--);\n            // console.log(index);\n        }\n\n        if (index == txt[xiaBiao].length + 3) {\n            huan = false;\n        }\n        else if (index < 0) {\n            index = 0;\n            huan = true;\n            xiaBiao++;\n            if (xiaBiao >= txt.length) {\n                xiaBiao = 0;\n            }\n        }\n\n    }, 200)\n}\n"},{"title":"link","date":"2023-06-23T08:05:43.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-06-23 16:05:43\ntype: \"link\"\n---\n","updated":"2023-06-23T08:06:03.364Z","path":"link/index.html","comments":1,"layout":"page","_id":"cljv8uxm900097ci06bwbc8p1","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"标签","date":"2023-06-23T07:57:38.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-06-23 15:57:38\ntype: \"tags\"\norderby: random\norder: 1\n---\n","updated":"2023-06-23T07:59:50.784Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cljv8uxma000d7ci01q772bpx","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <script>\n        \n    </script>\n</body>\n</html>","source":"src/ES6-ES11/0_html模版.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <script>\n        \n    </script>\n</body>\n</html>","date":"2023-07-09T11:40:32.449Z","updated":"2023-06-06T15:13:39.747Z","path":"src/ES6-ES11/0_html模版.html","title":"","comments":1,"layout":"page","_id":"cljvd8b9w0000p4i0dsbscqpb","content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <script>\n        \n    </script>\n</body>\n</html>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <script>\n        \n    </script>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Es6首页</title>\n</head>\n<body>\n    <a href=\"../ES6-ES11/1_let_学习.html\">let_学习</a>\n    <script>\n        \n    </script>\n</body>\n</html>","source":"src/ES6-ES11/0index.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Es6首页</title>\n</head>\n<body>\n    <a href=\"../ES6-ES11/1_let_学习.html\">let_学习</a>\n    <script>\n        \n    </script>\n</body>\n</html>","date":"2023-07-09T11:42:13.376Z","updated":"2023-07-09T11:42:13.376Z","path":"src/ES6-ES11/0index.html","title":"","comments":1,"layout":"page","_id":"cljvd8ba80001p4i09sfc7jpu","content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Es6首页</title>\n</head>\n<body>\n    <a href=\"../ES6-ES11/1_let_学习.html\">let_学习</a>\n    <script>\n        \n    </script>\n</body>\n</html>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Es6首页</title>\n</head>\n<body>\n    <a href=\"../ES6-ES11/1_let_学习.html\">let_学习</a>\n    <script>\n        \n    </script>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol的认识与创建</title>\n  </head>\n  <body>\n    <script>\n      // 1. 创建Symobl\n      let s = Symbol();\n      console.log(s);\n      let s1 = Symbol(\"光锥\");\n      let s2 = Symbol(\"光锥\");\n      console.log(s1, s2, s1 == s4);\n\n      // 2. Symbol.for 创建\n      let s3 = Symbol(\"光锥\");\n      let s4 = Symbol(\"光锥\");\n      console.log(s3, s4, s3 == s4);\n\n      //   3.不能与其他数据进行运算\n      // let result = s+1100l;\n      // let result = s>1100l;\n      // let result = s+s;\n\n      // 4.JS 基本数据类型\n      // USONB  you are so niubility\n      // u  undefined\n      // s string symbol\n      // o  object\n      // n number null\n      // b boolean\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/11_Symbol的认识与创建.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol的认识与创建</title>\n  </head>\n  <body>\n    <script>\n      // 1. 创建Symobl\n      let s = Symbol();\n      console.log(s);\n      let s1 = Symbol(\"光锥\");\n      let s2 = Symbol(\"光锥\");\n      console.log(s1, s2, s1 == s4);\n\n      // 2. Symbol.for 创建\n      let s3 = Symbol(\"光锥\");\n      let s4 = Symbol(\"光锥\");\n      console.log(s3, s4, s3 == s4);\n\n      //   3.不能与其他数据进行运算\n      // let result = s+1100l;\n      // let result = s>1100l;\n      // let result = s+s;\n\n      // 4.JS 基本数据类型\n      // USONB  you are so niubility\n      // u  undefined\n      // s string symbol\n      // o  object\n      // n number null\n      // b boolean\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.743Z","updated":"2023-06-12T15:51:37.112Z","path":"src/ES6-ES11/11_Symbol的认识与创建.html","title":"","comments":1,"layout":"page","_id":"cljvd8ba90002p4i0206o9g1v","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol的认识与创建</title>\n  </head>\n  <body>\n    <script>\n      // 1. 创建Symobl\n      let s = Symbol();\n      console.log(s);\n      let s1 = Symbol(\"光锥\");\n      let s2 = Symbol(\"光锥\");\n      console.log(s1, s2, s1 == s4);\n\n      // 2. Symbol.for 创建\n      let s3 = Symbol(\"光锥\");\n      let s4 = Symbol(\"光锥\");\n      console.log(s3, s4, s3 == s4);\n\n      //   3.不能与其他数据进行运算\n      // let result = s+1100l;\n      // let result = s>1100l;\n      // let result = s+s;\n\n      // 4.JS 基本数据类型\n      // USONB  you are so niubility\n      // u  undefined\n      // s string symbol\n      // o  object\n      // n number null\n      // b boolean\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol的认识与创建</title>\n  </head>\n  <body>\n    <script>\n      // 1. 创建Symobl\n      let s = Symbol();\n      console.log(s);\n      let s1 = Symbol(\"光锥\");\n      let s2 = Symbol(\"光锥\");\n      console.log(s1, s2, s1 == s4);\n\n      // 2. Symbol.for 创建\n      let s3 = Symbol(\"光锥\");\n      let s4 = Symbol(\"光锥\");\n      console.log(s3, s4, s3 == s4);\n\n      //   3.不能与其他数据进行运算\n      // let result = s+1100l;\n      // let result = s>1100l;\n      // let result = s+s;\n\n      // 4.JS 基本数据类型\n      // USONB  you are so niubility\n      // u  undefined\n      // s string symbol\n      // o  object\n      // n number null\n      // b boolean\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>扩展运算符</title>\n  </head>\n  <body>\n    <div></div>\n    <div></div>\n    <div></div>\n    <script>\n      // 1.认识 扩展运算符\n      // ES6 【...】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】\n      // 声明一个数组\n      const arr = [\"A\", \"C\", \"B\"]; //【数组】\n      // => 'A','C','B'   【参数序列】\n\n      // 声明一个函数\n      function chang() {\n        console.log(arguments);\n      }\n      chang(...arr); //chang('A','C','B')   【参数序列】\n      chang(arr);\n\n      // 2.扩展运算符的应用\n      // 1).数组的合并\n      const AArr = [\"A\", \"C\", \"B\"];\n      const BArr = [\"D\", \"E\", \"F\"];\n      const CArr = AArr.concat(AArr);\n      console.log(CArr);\n      const DArr = [...AArr, ...BArr];\n      console.log(DArr);\n      // 2).数组的克隆\n      const KArr = [\"H\", \"Y\", \"Z\"];\n      const YArr = [...KArr];\n      console.log(YArr);\n\n      // 3).将伪类数组转换为真正的数组\n      const divs=document.querySelectorAll('div');\n      console.log(divs);\n      const divArr = [...divs];\n      console.log(divArr);\n\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/10_扩展运算符的认识和应用.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>扩展运算符</title>\n  </head>\n  <body>\n    <div></div>\n    <div></div>\n    <div></div>\n    <script>\n      // 1.认识 扩展运算符\n      // ES6 【...】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】\n      // 声明一个数组\n      const arr = [\"A\", \"C\", \"B\"]; //【数组】\n      // => 'A','C','B'   【参数序列】\n\n      // 声明一个函数\n      function chang() {\n        console.log(arguments);\n      }\n      chang(...arr); //chang('A','C','B')   【参数序列】\n      chang(arr);\n\n      // 2.扩展运算符的应用\n      // 1).数组的合并\n      const AArr = [\"A\", \"C\", \"B\"];\n      const BArr = [\"D\", \"E\", \"F\"];\n      const CArr = AArr.concat(AArr);\n      console.log(CArr);\n      const DArr = [...AArr, ...BArr];\n      console.log(DArr);\n      // 2).数组的克隆\n      const KArr = [\"H\", \"Y\", \"Z\"];\n      const YArr = [...KArr];\n      console.log(YArr);\n\n      // 3).将伪类数组转换为真正的数组\n      const divs=document.querySelectorAll('div');\n      console.log(divs);\n      const divArr = [...divs];\n      console.log(divArr);\n\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.743Z","updated":"2023-06-12T15:31:40.091Z","path":"src/ES6-ES11/10_扩展运算符的认识和应用.html","title":"","comments":1,"layout":"page","_id":"cljvd8baa0003p4i0e1z8f9f9","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>扩展运算符</title>\n  </head>\n  <body>\n    <div></div>\n    <div></div>\n    <div></div>\n    <script>\n      // 1.认识 扩展运算符\n      // ES6 【...】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】\n      // 声明一个数组\n      const arr = [\"A\", \"C\", \"B\"]; //【数组】\n      // => 'A','C','B'   【参数序列】\n\n      // 声明一个函数\n      function chang() {\n        console.log(arguments);\n      }\n      chang(...arr); //chang('A','C','B')   【参数序列】\n      chang(arr);\n\n      // 2.扩展运算符的应用\n      // 1).数组的合并\n      const AArr = [\"A\", \"C\", \"B\"];\n      const BArr = [\"D\", \"E\", \"F\"];\n      const CArr = AArr.concat(AArr);\n      console.log(CArr);\n      const DArr = [...AArr, ...BArr];\n      console.log(DArr);\n      // 2).数组的克隆\n      const KArr = [\"H\", \"Y\", \"Z\"];\n      const YArr = [...KArr];\n      console.log(YArr);\n\n      // 3).将伪类数组转换为真正的数组\n      const divs=document.querySelectorAll('div');\n      console.log(divs);\n      const divArr = [...divs];\n      console.log(divArr);\n\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>扩展运算符</title>\n  </head>\n  <body>\n    <div></div>\n    <div></div>\n    <div></div>\n    <script>\n      // 1.认识 扩展运算符\n      // ES6 【...】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】\n      // 声明一个数组\n      const arr = [\"A\", \"C\", \"B\"]; //【数组】\n      // => 'A','C','B'   【参数序列】\n\n      // 声明一个函数\n      function chang() {\n        console.log(arguments);\n      }\n      chang(...arr); //chang('A','C','B')   【参数序列】\n      chang(arr);\n\n      // 2.扩展运算符的应用\n      // 1).数组的合并\n      const AArr = [\"A\", \"C\", \"B\"];\n      const BArr = [\"D\", \"E\", \"F\"];\n      const CArr = AArr.concat(AArr);\n      console.log(CArr);\n      const DArr = [...AArr, ...BArr];\n      console.log(DArr);\n      // 2).数组的克隆\n      const KArr = [\"H\", \"Y\", \"Z\"];\n      const YArr = [...KArr];\n      console.log(YArr);\n\n      // 3).将伪类数组转换为真正的数组\n      const divs=document.querySelectorAll('div');\n      console.log(divs);\n      const divArr = [...divs];\n      console.log(divArr);\n\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol创建对象属性</title>\n  </head>\n  <body>\n    <script>\n      // 向对象中添加方法  up  down\n      let game = {\n        up() {\n          console.log(\"原up方法\");\n        },\n        down() {\n          console.log(\"原down方法\");\n        },\n        name: \"光锥\",\n      };\n\n    //   声明一个对象\n    let methods= {\n        up:Symbol(),\n        down:Symbol()\n    }\n    game[methods.up]=function(){\n        console.log('Symbol的up方法');\n    }\n    game[methods.down]=function(){\n        console.log('Symbol的down方法');\n    }\n    console.log(game);\n\n    // 2.\n    let youxi={\n        name:'奇葩',\n        [Symbol('say')]: function(){\n            console.log('Say');\n        },\n        [Symbol('see')]: function(){\n            console.log('see');\n        }\n    }\n    console.log(youxi);\n\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/12_Symbol创建对象属性.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol创建对象属性</title>\n  </head>\n  <body>\n    <script>\n      // 向对象中添加方法  up  down\n      let game = {\n        up() {\n          console.log(\"原up方法\");\n        },\n        down() {\n          console.log(\"原down方法\");\n        },\n        name: \"光锥\",\n      };\n\n    //   声明一个对象\n    let methods= {\n        up:Symbol(),\n        down:Symbol()\n    }\n    game[methods.up]=function(){\n        console.log('Symbol的up方法');\n    }\n    game[methods.down]=function(){\n        console.log('Symbol的down方法');\n    }\n    console.log(game);\n\n    // 2.\n    let youxi={\n        name:'奇葩',\n        [Symbol('say')]: function(){\n            console.log('Say');\n        },\n        [Symbol('see')]: function(){\n            console.log('see');\n        }\n    }\n    console.log(youxi);\n\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.743Z","updated":"2023-06-14T14:35:03.614Z","path":"src/ES6-ES11/12_Symbol创建对象属性.html","title":"","comments":1,"layout":"page","_id":"cljvd8bab0004p4i0a86p05yq","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol创建对象属性</title>\n  </head>\n  <body>\n    <script>\n      // 向对象中添加方法  up  down\n      let game = {\n        up() {\n          console.log(\"原up方法\");\n        },\n        down() {\n          console.log(\"原down方法\");\n        },\n        name: \"光锥\",\n      };\n\n    //   声明一个对象\n    let methods= {\n        up:Symbol(),\n        down:Symbol()\n    }\n    game[methods.up]=function(){\n        console.log('Symbol的up方法');\n    }\n    game[methods.down]=function(){\n        console.log('Symbol的down方法');\n    }\n    console.log(game);\n\n    // 2.\n    let youxi={\n        name:'奇葩',\n        [Symbol('say')]: function(){\n            console.log('Say');\n        },\n        [Symbol('see')]: function(){\n            console.log('see');\n        }\n    }\n    console.log(youxi);\n\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol创建对象属性</title>\n  </head>\n  <body>\n    <script>\n      // 向对象中添加方法  up  down\n      let game = {\n        up() {\n          console.log(\"原up方法\");\n        },\n        down() {\n          console.log(\"原down方法\");\n        },\n        name: \"光锥\",\n      };\n\n    //   声明一个对象\n    let methods= {\n        up:Symbol(),\n        down:Symbol()\n    }\n    game[methods.up]=function(){\n        console.log('Symbol的up方法');\n    }\n    game[methods.down]=function(){\n        console.log('Symbol的down方法');\n    }\n    console.log(game);\n\n    // 2.\n    let youxi={\n        name:'奇葩',\n        [Symbol('say')]: function(){\n            console.log('Say');\n        },\n        [Symbol('see')]: function(){\n            console.log('see');\n        }\n    }\n    console.log(youxi);\n\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol 内置属性</title>\n  </head>\n  <body>\n    <script>\n      class Person{\n        static [Symbol.hasInstance](param){\n          console.log(param)\n          console.log('类型检测');\n          return false;\n        }\n      }\n      let o={};\n      console.log(o instanceof Person);\n\n      const arr=[1,2,3];\n      const arr2=[4,5,6];\n      arr2[Symbol.isConcatSpreadable]=false;//可用于数组内的数组是否展开\n      console.log(arr.concat(arr2));\n\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/13_Symbol内置属性.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol 内置属性</title>\n  </head>\n  <body>\n    <script>\n      class Person{\n        static [Symbol.hasInstance](param){\n          console.log(param)\n          console.log('类型检测');\n          return false;\n        }\n      }\n      let o={};\n      console.log(o instanceof Person);\n\n      const arr=[1,2,3];\n      const arr2=[4,5,6];\n      arr2[Symbol.isConcatSpreadable]=false;//可用于数组内的数组是否展开\n      console.log(arr.concat(arr2));\n\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.743Z","updated":"2023-06-14T14:52:40.694Z","path":"src/ES6-ES11/13_Symbol内置属性.html","title":"","comments":1,"layout":"page","_id":"cljvd8bab0005p4i008di25kr","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol 内置属性</title>\n  </head>\n  <body>\n    <script>\n      class Person{\n        static [Symbol.hasInstance](param){\n          console.log(param)\n          console.log('类型检测');\n          return false;\n        }\n      }\n      let o={};\n      console.log(o instanceof Person);\n\n      const arr=[1,2,3];\n      const arr2=[4,5,6];\n      arr2[Symbol.isConcatSpreadable]=false;//可用于数组内的数组是否展开\n      console.log(arr.concat(arr2));\n\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Symbol 内置属性</title>\n  </head>\n  <body>\n    <script>\n      class Person{\n        static [Symbol.hasInstance](param){\n          console.log(param)\n          console.log('类型检测');\n          return false;\n        }\n      }\n      let o={};\n      console.log(o instanceof Person);\n\n      const arr=[1,2,3];\n      const arr2=[4,5,6];\n      arr2[Symbol.isConcatSpreadable]=false;//可用于数组内的数组是否展开\n      console.log(arr.concat(arr2));\n\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>迭代器</title>\n  </head>\n  <body>\n    <script>\n              // 1.简单认识\n              // 迭代器(lterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署lterator接口，就可以完成遍历操作。\n              // 1)ES6创造了一种新的遍历命令for...of循环，lterator接口主要供 for...of消费\n              // 2)原生具备iterator接口的数据(可用for of遍历)\n                // a)Array\n                // b)Arguments\n                // c)Set\n                // d)Map\n                // e)String\n                // f)TypedArray\n                // g)NodeList\n            // 3) 工作原理\n            // a)创建一个指针对象，指向当前数据结构的起始位置\n            // b)第一次调用对象的next方法，指针自动指向数据结构的第一个成员c)接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员\n            // d)每调用next方法返回一个包含value和 done属性的对象\n            // 注:需要自定义遍历数据的时候,要想到迭代器。\n\n\n            // 2.声明一个数组\n            const xiyou =['a','b','c','d'];\n            // 使用 for ...of 遍历数组   for ...in  输出的是索引\n            for(let v of xiyou){\n                console.log(v);\n            }\n\n            let iterator = xiyou[Symbol.iterator]();\n\n            // 调用对象的next方法\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n\n\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/14_迭代器.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>迭代器</title>\n  </head>\n  <body>\n    <script>\n              // 1.简单认识\n              // 迭代器(lterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署lterator接口，就可以完成遍历操作。\n              // 1)ES6创造了一种新的遍历命令for...of循环，lterator接口主要供 for...of消费\n              // 2)原生具备iterator接口的数据(可用for of遍历)\n                // a)Array\n                // b)Arguments\n                // c)Set\n                // d)Map\n                // e)String\n                // f)TypedArray\n                // g)NodeList\n            // 3) 工作原理\n            // a)创建一个指针对象，指向当前数据结构的起始位置\n            // b)第一次调用对象的next方法，指针自动指向数据结构的第一个成员c)接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员\n            // d)每调用next方法返回一个包含value和 done属性的对象\n            // 注:需要自定义遍历数据的时候,要想到迭代器。\n\n\n            // 2.声明一个数组\n            const xiyou =['a','b','c','d'];\n            // 使用 for ...of 遍历数组   for ...in  输出的是索引\n            for(let v of xiyou){\n                console.log(v);\n            }\n\n            let iterator = xiyou[Symbol.iterator]();\n\n            // 调用对象的next方法\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n\n\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.743Z","updated":"2023-06-25T14:27:50.580Z","path":"src/ES6-ES11/14_迭代器.html","title":"","comments":1,"layout":"page","_id":"cljvd8bac0006p4i06ne89f82","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>迭代器</title>\n  </head>\n  <body>\n    <script>\n              // 1.简单认识\n              // 迭代器(lterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署lterator接口，就可以完成遍历操作。\n              // 1)ES6创造了一种新的遍历命令for...of循环，lterator接口主要供 for...of消费\n              // 2)原生具备iterator接口的数据(可用for of遍历)\n                // a)Array\n                // b)Arguments\n                // c)Set\n                // d)Map\n                // e)String\n                // f)TypedArray\n                // g)NodeList\n            // 3) 工作原理\n            // a)创建一个指针对象，指向当前数据结构的起始位置\n            // b)第一次调用对象的next方法，指针自动指向数据结构的第一个成员c)接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员\n            // d)每调用next方法返回一个包含value和 done属性的对象\n            // 注:需要自定义遍历数据的时候,要想到迭代器。\n\n\n            // 2.声明一个数组\n            const xiyou =['a','b','c','d'];\n            // 使用 for ...of 遍历数组   for ...in  输出的是索引\n            for(let v of xiyou){\n                console.log(v);\n            }\n\n            let iterator = xiyou[Symbol.iterator]();\n\n            // 调用对象的next方法\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n\n\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>迭代器</title>\n  </head>\n  <body>\n    <script>\n              // 1.简单认识\n              // 迭代器(lterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署lterator接口，就可以完成遍历操作。\n              // 1)ES6创造了一种新的遍历命令for...of循环，lterator接口主要供 for...of消费\n              // 2)原生具备iterator接口的数据(可用for of遍历)\n                // a)Array\n                // b)Arguments\n                // c)Set\n                // d)Map\n                // e)String\n                // f)TypedArray\n                // g)NodeList\n            // 3) 工作原理\n            // a)创建一个指针对象，指向当前数据结构的起始位置\n            // b)第一次调用对象的next方法，指针自动指向数据结构的第一个成员c)接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员\n            // d)每调用next方法返回一个包含value和 done属性的对象\n            // 注:需要自定义遍历数据的时候,要想到迭代器。\n\n\n            // 2.声明一个数组\n            const xiyou =['a','b','c','d'];\n            // 使用 for ...of 遍历数组   for ...in  输出的是索引\n            for(let v of xiyou){\n                console.log(v);\n            }\n\n            let iterator = xiyou[Symbol.iterator]();\n\n            // 调用对象的next方法\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n            console.log(iterator.next());\n\n\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>自定义遍历数组</title>\n  </head>\n  <body>\n    <script>\n      // 声明一个对象\n      const banji = {\n        name: \"一班\",\n        stu: [\"w\", \"z\", \"k\", \"y\"],\n        [Symbol.iterator]() {\n          // 索引变量\n          let index = 0;\n          // 创建指向banji对象的this\n          let _this = this;\n          // return {};  //1.创建指针对象\n          // return {next:function(){}};  //2.对象的next方法\n          // return {next:function(){return {value:'abc',done:false}}};  //3.next方法返回一个包含value和 done属性的对象\n\n          //最终样式\n          return {\n            next: function () {\n              if (index < _this.stu.length) {\n                const result = { value: _this.stu[index], done: false };\n                index++;\n                return result;\n              } else {\n                const result = { value: undefined, done: true };\n                return result;\n              }\n            },\n          };\n        },\n      };\n\n      for (let v of banji) {\n        console.log(v);\n      }\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/15_自定义遍历数组.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>自定义遍历数组</title>\n  </head>\n  <body>\n    <script>\n      // 声明一个对象\n      const banji = {\n        name: \"一班\",\n        stu: [\"w\", \"z\", \"k\", \"y\"],\n        [Symbol.iterator]() {\n          // 索引变量\n          let index = 0;\n          // 创建指向banji对象的this\n          let _this = this;\n          // return {};  //1.创建指针对象\n          // return {next:function(){}};  //2.对象的next方法\n          // return {next:function(){return {value:'abc',done:false}}};  //3.next方法返回一个包含value和 done属性的对象\n\n          //最终样式\n          return {\n            next: function () {\n              if (index < _this.stu.length) {\n                const result = { value: _this.stu[index], done: false };\n                index++;\n                return result;\n              } else {\n                const result = { value: undefined, done: true };\n                return result;\n              }\n            },\n          };\n        },\n      };\n\n      for (let v of banji) {\n        console.log(v);\n      }\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.744Z","updated":"2023-06-26T15:43:23.314Z","path":"src/ES6-ES11/15_自定义遍历数组.html","title":"","comments":1,"layout":"page","_id":"cljvd8bad0007p4i02wjicd83","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>自定义遍历数组</title>\n  </head>\n  <body>\n    <script>\n      // 声明一个对象\n      const banji = {\n        name: \"一班\",\n        stu: [\"w\", \"z\", \"k\", \"y\"],\n        [Symbol.iterator]() {\n          // 索引变量\n          let index = 0;\n          // 创建指向banji对象的this\n          let _this = this;\n          // return {};  //1.创建指针对象\n          // return {next:function(){}};  //2.对象的next方法\n          // return {next:function(){return {value:'abc',done:false}}};  //3.next方法返回一个包含value和 done属性的对象\n\n          //最终样式\n          return {\n            next: function () {\n              if (index < _this.stu.length) {\n                const result = { value: _this.stu[index], done: false };\n                index++;\n                return result;\n              } else {\n                const result = { value: undefined, done: true };\n                return result;\n              }\n            },\n          };\n        },\n      };\n\n      for (let v of banji) {\n        console.log(v);\n      }\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>自定义遍历数组</title>\n  </head>\n  <body>\n    <script>\n      // 声明一个对象\n      const banji = {\n        name: \"一班\",\n        stu: [\"w\", \"z\", \"k\", \"y\"],\n        [Symbol.iterator]() {\n          // 索引变量\n          let index = 0;\n          // 创建指向banji对象的this\n          let _this = this;\n          // return {};  //1.创建指针对象\n          // return {next:function(){}};  //2.对象的next方法\n          // return {next:function(){return {value:'abc',done:false}}};  //3.next方法返回一个包含value和 done属性的对象\n\n          //最终样式\n          return {\n            next: function () {\n              if (index < _this.stu.length) {\n                const result = { value: _this.stu[index], done: false };\n                index++;\n                return result;\n              } else {\n                const result = { value: undefined, done: true };\n                return result;\n              }\n            },\n          };\n        },\n      };\n\n      for (let v of banji) {\n        console.log(v);\n      }\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器</title>\n  </head>\n  <body>\n    <script>\n      // 生成器其实就是一个人特殊的函数\n      // 异步编程 纯回调函数  node fs ajax mongodb\n      // 函数代码的分隔符\n      function* gen() {\n        console.log(111);\n        yield \"aaaa\"; //'aaaa'  代指表达式和自变量等\n        console.log(222);\n        yield \"bbb\";\n        console.log(333);\n        yield \"ccc\";\n        console.log(4444);\n      }\n\n      let iterator = gen();\n      //   iterator.next();\n      //   iterator.next();\n      //   iterator.next();\n      //   iterator.next();\n\n      console.log(iterator.next());\n      console.log(iterator.next());\n      console.log(iterator.next());\n      console.log(iterator.next());\n\n      console.log(\"------------------------------\");\n      for (let v of gen()) {\n        console.log(v);\n      }\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/16_生成器函数的认识.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器</title>\n  </head>\n  <body>\n    <script>\n      // 生成器其实就是一个人特殊的函数\n      // 异步编程 纯回调函数  node fs ajax mongodb\n      // 函数代码的分隔符\n      function* gen() {\n        console.log(111);\n        yield \"aaaa\"; //'aaaa'  代指表达式和自变量等\n        console.log(222);\n        yield \"bbb\";\n        console.log(333);\n        yield \"ccc\";\n        console.log(4444);\n      }\n\n      let iterator = gen();\n      //   iterator.next();\n      //   iterator.next();\n      //   iterator.next();\n      //   iterator.next();\n\n      console.log(iterator.next());\n      console.log(iterator.next());\n      console.log(iterator.next());\n      console.log(iterator.next());\n\n      console.log(\"------------------------------\");\n      for (let v of gen()) {\n        console.log(v);\n      }\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.744Z","updated":"2023-06-27T15:42:52.085Z","path":"src/ES6-ES11/16_生成器函数的认识.html","title":"","comments":1,"layout":"page","_id":"cljvd8bad0008p4i0dao26iaf","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器</title>\n  </head>\n  <body>\n    <script>\n      // 生成器其实就是一个人特殊的函数\n      // 异步编程 纯回调函数  node fs ajax mongodb\n      // 函数代码的分隔符\n      function* gen() {\n        console.log(111);\n        yield \"aaaa\"; //'aaaa'  代指表达式和自变量等\n        console.log(222);\n        yield \"bbb\";\n        console.log(333);\n        yield \"ccc\";\n        console.log(4444);\n      }\n\n      let iterator = gen();\n      //   iterator.next();\n      //   iterator.next();\n      //   iterator.next();\n      //   iterator.next();\n\n      console.log(iterator.next());\n      console.log(iterator.next());\n      console.log(iterator.next());\n      console.log(iterator.next());\n\n      console.log(\"------------------------------\");\n      for (let v of gen()) {\n        console.log(v);\n      }\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器</title>\n  </head>\n  <body>\n    <script>\n      // 生成器其实就是一个人特殊的函数\n      // 异步编程 纯回调函数  node fs ajax mongodb\n      // 函数代码的分隔符\n      function* gen() {\n        console.log(111);\n        yield \"aaaa\"; //'aaaa'  代指表达式和自变量等\n        console.log(222);\n        yield \"bbb\";\n        console.log(333);\n        yield \"ccc\";\n        console.log(4444);\n      }\n\n      let iterator = gen();\n      //   iterator.next();\n      //   iterator.next();\n      //   iterator.next();\n      //   iterator.next();\n\n      console.log(iterator.next());\n      console.log(iterator.next());\n      console.log(iterator.next());\n      console.log(iterator.next());\n\n      console.log(\"------------------------------\");\n      for (let v of gen()) {\n        console.log(v);\n      }\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>let</title>\n  </head>\n  <body>\n    <script>\n      //声明变量\n      let a;\n      let b, c, d;\n      let e = 100;\n      let f = 1,\n        g = 6,\n        h = \"7865456\";\n\n      // 1. 变量不能重复声明\n      // let star =\"aaa\";\n      // let star=\"66\";\n\n      // 2.块儿级作用域 全局，函数，eval\n      // {\n      //     let girt ='aaa';\n      // }\n      // console.log(girt);\n\n      // 3.不存在变量提升\n      // console.log(song);\n      // let song = 'er';\n\n      // 4.不影响作用域链\n      {\n        let school ='yuLong';\n        function fn() {\n            console.log(school);\n        }\n        fn();\n      }\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/1_let_学习.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>let</title>\n  </head>\n  <body>\n    <script>\n      //声明变量\n      let a;\n      let b, c, d;\n      let e = 100;\n      let f = 1,\n        g = 6,\n        h = \"7865456\";\n\n      // 1. 变量不能重复声明\n      // let star =\"aaa\";\n      // let star=\"66\";\n\n      // 2.块儿级作用域 全局，函数，eval\n      // {\n      //     let girt ='aaa';\n      // }\n      // console.log(girt);\n\n      // 3.不存在变量提升\n      // console.log(song);\n      // let song = 'er';\n\n      // 4.不影响作用域链\n      {\n        let school ='yuLong';\n        function fn() {\n            console.log(school);\n        }\n        fn();\n      }\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:46:50.222Z","updated":"2023-07-09T11:46:50.222Z","path":"src/ES6-ES11/1_let_学习.html","_id":"cljvd8bag000ap4i0bkh10qt7","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>let</title>\n  </head>\n  <body>\n    <script>\n      //声明变量\n      let a;\n      let b, c, d;\n      let e = 100;\n      let f = 1,\n        g = 6,\n        h = \"7865456\";\n\n      // 1. 变量不能重复声明\n      // let star =\"aaa\";\n      // let star=\"66\";\n\n      // 2.块儿级作用域 全局，函数，eval\n      // {\n      //     let girt ='aaa';\n      // }\n      // console.log(girt);\n\n      // 3.不存在变量提升\n      // console.log(song);\n      // let song = 'er';\n\n      // 4.不影响作用域链\n      {\n        let school ='yuLong';\n        function fn() {\n            console.log(school);\n        }\n        fn();\n      }\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>let</title>\n  </head>\n  <body>\n    <script>\n      //声明变量\n      let a;\n      let b, c, d;\n      let e = 100;\n      let f = 1,\n        g = 6,\n        h = \"7865456\";\n\n      // 1. 变量不能重复声明\n      // let star =\"aaa\";\n      // let star=\"66\";\n\n      // 2.块儿级作用域 全局，函数，eval\n      // {\n      //     let girt ='aaa';\n      // }\n      // console.log(girt);\n\n      // 3.不存在变量提升\n      // console.log(song);\n      // let song = 'er';\n\n      // 4.不影响作用域链\n      {\n        let school ='yuLong';\n        function fn() {\n            console.log(school);\n        }\n        fn();\n      }\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Const常量学习</title>\n  </head>\n  <body>\n    <script>\n      // 声明变量\n      const SCHOOL = \"CHINA\";\n\n      //   1. 一定要赋初始值\n      // const A;\n      // 2. 一般常量使用大写\n      // const a=100;\n      // 3. 常量的值不能修改\n      // SCHOOL = 11;\n      // 4. 块级作用域\n      // {\n      //   const PLAY ='UZI';\n      // }\n      // console.log(PLAY);\n      // 5. 对于数组和对象的元素修改，不算做对常量的修改\n      // const TEAM =['U','A','F'];\n      // TEAM.push('5656');\n      // TEAM[1] ='55';\n      // console.log(TEAM);\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/2_const_学习.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Const常量学习</title>\n  </head>\n  <body>\n    <script>\n      // 声明变量\n      const SCHOOL = \"CHINA\";\n\n      //   1. 一定要赋初始值\n      // const A;\n      // 2. 一般常量使用大写\n      // const a=100;\n      // 3. 常量的值不能修改\n      // SCHOOL = 11;\n      // 4. 块级作用域\n      // {\n      //   const PLAY ='UZI';\n      // }\n      // console.log(PLAY);\n      // 5. 对于数组和对象的元素修改，不算做对常量的修改\n      // const TEAM =['U','A','F'];\n      // TEAM.push('5656');\n      // TEAM[1] ='55';\n      // console.log(TEAM);\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.745Z","updated":"2023-05-31T14:15:13.531Z","path":"src/ES6-ES11/2_const_学习.html","title":"","comments":1,"layout":"page","_id":"cljvd8bah000bp4i08f6605qx","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Const常量学习</title>\n  </head>\n  <body>\n    <script>\n      // 声明变量\n      const SCHOOL = \"CHINA\";\n\n      //   1. 一定要赋初始值\n      // const A;\n      // 2. 一般常量使用大写\n      // const a=100;\n      // 3. 常量的值不能修改\n      // SCHOOL = 11;\n      // 4. 块级作用域\n      // {\n      //   const PLAY ='UZI';\n      // }\n      // console.log(PLAY);\n      // 5. 对于数组和对象的元素修改，不算做对常量的修改\n      // const TEAM =['U','A','F'];\n      // TEAM.push('5656');\n      // TEAM[1] ='55';\n      // console.log(TEAM);\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Const常量学习</title>\n  </head>\n  <body>\n    <script>\n      // 声明变量\n      const SCHOOL = \"CHINA\";\n\n      //   1. 一定要赋初始值\n      // const A;\n      // 2. 一般常量使用大写\n      // const a=100;\n      // 3. 常量的值不能修改\n      // SCHOOL = 11;\n      // 4. 块级作用域\n      // {\n      //   const PLAY ='UZI';\n      // }\n      // console.log(PLAY);\n      // 5. 对于数组和对象的元素修改，不算做对常量的修改\n      // const TEAM =['U','A','F'];\n      // TEAM.push('5656');\n      // TEAM[1] ='55';\n      // console.log(TEAM);\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // 1.数组的解构赋值\n      // const cA=['a','b','c'];\n      // let [d,f,z]=A;\n      // console.log(d);\n      // console.log(f);\n      // console.log(z);\n      // 2.对象的解构赋值\n      //   const a = {\n      //     name: \"zhangsan\",\n      //     age: 66,\n      //     xxx: function () {\n      //       console.log(\"55656\");\n      //     },\n      //   };\n      //   let {name,age,xxx}=a;\n      //   console.log(name);\n      //   console.log(age);\n      //   console.log(xxx);\n      //   xxx();\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/3_变量的解构赋值.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // 1.数组的解构赋值\n      // const cA=['a','b','c'];\n      // let [d,f,z]=A;\n      // console.log(d);\n      // console.log(f);\n      // console.log(z);\n      // 2.对象的解构赋值\n      //   const a = {\n      //     name: \"zhangsan\",\n      //     age: 66,\n      //     xxx: function () {\n      //       console.log(\"55656\");\n      //     },\n      //   };\n      //   let {name,age,xxx}=a;\n      //   console.log(name);\n      //   console.log(age);\n      //   console.log(xxx);\n      //   xxx();\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.745Z","updated":"2023-06-07T15:08:50.765Z","path":"src/ES6-ES11/3_变量的解构赋值.html","title":"","comments":1,"layout":"page","_id":"cljvd8bai000cp4i03j269w06","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // 1.数组的解构赋值\n      // const cA=['a','b','c'];\n      // let [d,f,z]=A;\n      // console.log(d);\n      // console.log(f);\n      // console.log(z);\n      // 2.对象的解构赋值\n      //   const a = {\n      //     name: \"zhangsan\",\n      //     age: 66,\n      //     xxx: function () {\n      //       console.log(\"55656\");\n      //     },\n      //   };\n      //   let {name,age,xxx}=a;\n      //   console.log(name);\n      //   console.log(age);\n      //   console.log(xxx);\n      //   xxx();\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // 1.数组的解构赋值\n      // const cA=['a','b','c'];\n      // let [d,f,z]=A;\n      // console.log(d);\n      // console.log(f);\n      // console.log(z);\n      // 2.对象的解构赋值\n      //   const a = {\n      //     name: \"zhangsan\",\n      //     age: 66,\n      //     xxx: function () {\n      //       console.log(\"55656\");\n      //     },\n      //   };\n      //   let {name,age,xxx}=a;\n      //   console.log(name);\n      //   console.log(age);\n      //   console.log(xxx);\n      //   xxx();\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // ES6 引入新的声明字符串的方法 【``】 ''  \"\"\n      // // 1.声明\n      // let str = `我是模版字符串`;\n      // console.log(str,typeof str);\n\n      // 2.内容中可以直接出现换行符\n      let str = `\n        <ul>\n            <li>111<li>\n            <li>222<li>\n            <li>333<li>    \n        <ul>\n        `;\n      // 3.变量的拼接\n      let lovt = \"aaa\";\n      let out = `${lovt} 666666666666666`;\n      console.log(out);\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/4_模版字符串.html","raw":"<!DOCTYPE html>\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // ES6 引入新的声明字符串的方法 【``】 ''  \"\"\n      // // 1.声明\n      // let str = `我是模版字符串`;\n      // console.log(str,typeof str);\n\n      // 2.内容中可以直接出现换行符\n      let str = `\n        <ul>\n            <li>111<li>\n            <li>222<li>\n            <li>333<li>    \n        <ul>\n        `;\n      // 3.变量的拼接\n      let lovt = \"aaa\";\n      let out = `${lovt} 666666666666666`;\n      console.log(out);\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.745Z","updated":"2023-06-07T15:13:32.701Z","path":"src/ES6-ES11/4_模版字符串.html","title":"","comments":1,"layout":"page","_id":"cljvd8baj000dp4i0dvwddy0c","content":"<!DOCTYPE html>\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // ES6 引入新的声明字符串的方法 【``】 ''  \"\"\n      // // 1.声明\n      // let str = `我是模版字符串`;\n      // console.log(str,typeof str);\n\n      // 2.内容中可以直接出现换行符\n      let str = `\n        <ul>\n            <li>111<li>\n            <li>222<li>\n            <li>333<li>    \n        <ul>\n        `;\n      // 3.变量的拼接\n      let lovt = \"aaa\";\n      let out = `${lovt} 666666666666666`;\n      console.log(out);\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // ES6 引入新的声明字符串的方法 【``】 ''  \"\"\n      // // 1.声明\n      // let str = `我是模版字符串`;\n      // console.log(str,typeof str);\n\n      // 2.内容中可以直接出现换行符\n      let str = `\n        <ul>\n            <li>111<li>\n            <li>222<li>\n            <li>333<li>    \n        <ul>\n        `;\n      // 3.变量的拼接\n      let lovt = \"aaa\";\n      let out = `${lovt} 666666666666666`;\n      console.log(out);\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>简化对象写法</title>\n</head>\n<body>\n    <script>\n        // ES6 允许在大括号里面，直接写入变量核函数，作为对象的属性和方法. 这样的书写更加的简洁\n\n        let name ='光锥';\n        let chang = function() {\n            console.log('光锥之内皆是命运');\n        }\n\n        const school ={\n            name,\n            chang,\n            impove(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n\n     /*\n     等价于\n         const school ={\n            naem:name,\n            chang:chang,\n            impove:function(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n     */\n\n     console.log(school);\n    </script>\n</body>\n</html>","source":"src/ES6-ES11/5_简化对象写法.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>简化对象写法</title>\n</head>\n<body>\n    <script>\n        // ES6 允许在大括号里面，直接写入变量核函数，作为对象的属性和方法. 这样的书写更加的简洁\n\n        let name ='光锥';\n        let chang = function() {\n            console.log('光锥之内皆是命运');\n        }\n\n        const school ={\n            name,\n            chang,\n            impove(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n\n     /*\n     等价于\n         const school ={\n            naem:name,\n            chang:chang,\n            impove:function(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n     */\n\n     console.log(school);\n    </script>\n</body>\n</html>","date":"2023-07-09T11:40:09.745Z","updated":"2023-06-06T15:21:20.176Z","path":"src/ES6-ES11/5_简化对象写法.html","title":"","comments":1,"layout":"page","_id":"cljvd8baj000ep4i09rlrb2k6","content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>简化对象写法</title>\n</head>\n<body>\n    <script>\n        // ES6 允许在大括号里面，直接写入变量核函数，作为对象的属性和方法. 这样的书写更加的简洁\n\n        let name ='光锥';\n        let chang = function() {\n            console.log('光锥之内皆是命运');\n        }\n\n        const school ={\n            name,\n            chang,\n            impove(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n\n     /*\n     等价于\n         const school ={\n            naem:name,\n            chang:chang,\n            impove:function(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n     */\n\n     console.log(school);\n    </script>\n</body>\n</html>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>简化对象写法</title>\n</head>\n<body>\n    <script>\n        // ES6 允许在大括号里面，直接写入变量核函数，作为对象的属性和方法. 这样的书写更加的简洁\n\n        let name ='光锥';\n        let chang = function() {\n            console.log('光锥之内皆是命运');\n        }\n\n        const school ={\n            name,\n            chang,\n            impove(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n\n     /*\n     等价于\n         const school ={\n            naem:name,\n            chang:chang,\n            impove:function(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n     */\n\n     console.log(school);\n    </script>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n    <style>\n      #ad {\n        width: 200px;\n        height: 200px;\n        background-color: aqua;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"ad\"></div>\n    <script>\n      // 1.点击div 2S 后div 变色\n      let ad = document.getElementById(\"ad\");\n      //   保存 this 的值\n      // let _this =this;\n      ad.addEventListener(\"click\", function () {\n        setTimeout(() => {\n          this.style.backgroundColor = \"blue\";\n        }, 2000);\n      });\n\n      //   2.从数组中返回偶数的元素\n      const arr = [1, 2, 3, 4, 8, 10, 45, 56, 69];\n      // const result =arr.filter(function (item) {\n      //     if(item%2===0){\n      //         return true;\n      //     }else{\n      //         return false;\n      //     }\n      // });\n      const result = arr.filter((item) => item % 2 === 0);\n\n      console.log(result);\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/7_箭头函数的案例.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n    <style>\n      #ad {\n        width: 200px;\n        height: 200px;\n        background-color: aqua;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"ad\"></div>\n    <script>\n      // 1.点击div 2S 后div 变色\n      let ad = document.getElementById(\"ad\");\n      //   保存 this 的值\n      // let _this =this;\n      ad.addEventListener(\"click\", function () {\n        setTimeout(() => {\n          this.style.backgroundColor = \"blue\";\n        }, 2000);\n      });\n\n      //   2.从数组中返回偶数的元素\n      const arr = [1, 2, 3, 4, 8, 10, 45, 56, 69];\n      // const result =arr.filter(function (item) {\n      //     if(item%2===0){\n      //         return true;\n      //     }else{\n      //         return false;\n      //     }\n      // });\n      const result = arr.filter((item) => item % 2 === 0);\n\n      console.log(result);\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.746Z","updated":"2023-06-09T15:26:29.134Z","path":"src/ES6-ES11/7_箭头函数的案例.html","title":"","comments":1,"layout":"page","_id":"cljvd8bak000fp4i0ec9c206o","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n    <style>\n      #ad {\n        width: 200px;\n        height: 200px;\n        background-color: aqua;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"ad\"></div>\n    <script>\n      // 1.点击div 2S 后div 变色\n      let ad = document.getElementById(\"ad\");\n      //   保存 this 的值\n      // let _this =this;\n      ad.addEventListener(\"click\", function () {\n        setTimeout(() => {\n          this.style.backgroundColor = \"blue\";\n        }, 2000);\n      });\n\n      //   2.从数组中返回偶数的元素\n      const arr = [1, 2, 3, 4, 8, 10, 45, 56, 69];\n      // const result =arr.filter(function (item) {\n      //     if(item%2===0){\n      //         return true;\n      //     }else{\n      //         return false;\n      //     }\n      // });\n      const result = arr.filter((item) => item % 2 === 0);\n\n      console.log(result);\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n    <style>\n      #ad {\n        width: 200px;\n        height: 200px;\n        background-color: aqua;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"ad\"></div>\n    <script>\n      // 1.点击div 2S 后div 变色\n      let ad = document.getElementById(\"ad\");\n      //   保存 this 的值\n      // let _this =this;\n      ad.addEventListener(\"click\", function () {\n        setTimeout(() => {\n          this.style.backgroundColor = \"blue\";\n        }, 2000);\n      });\n\n      //   2.从数组中返回偶数的元素\n      const arr = [1, 2, 3, 4, 8, 10, 45, 56, 69];\n      // const result =arr.filter(function (item) {\n      //     if(item%2===0){\n      //         return true;\n      //     }else{\n      //         return false;\n      //     }\n      // });\n      const result = arr.filter((item) => item % 2 === 0);\n\n      console.log(result);\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>箭头函数</title>\n  </head>\n  <body>\n    <script>\n      // // 声明一个函数\n      // let fn= function(){\n\n      // }\n      // let fnJ =(a,b)=>{\n      //     return a+b;\n      // }\n      // // 调用函数\n      // let result= fnJ(1,2);\n      // console.log(result);\n\n      // // 1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值\n      // function getname(){\n      //     console.log(this.name);\n      // }\n      // let getname2=()=>{\n      //     console.log(this.name);\n      // }\n\n      // // 设置window 对象的name属性\n      // window.name='光锥';\n      // const school ={\n      //     name:\"guangzhui\"\n      // }\n\n      // // 直接调用\n      // getname();\n      // getname2();\n\n      // // call 方法调用\n      // getname.call(school);\n      // getname2.call(school);\n\n      // // 2.不能作为构造实例化对象\n      // let Person  =(name,age)=>{\n      //     this.name=name;\n      //     this.age=age;\n      // }\n      // let me =new Person ('xiao',20);\n      // console.log(me);\n\n      // 3.不能使用 arguments 变量\n      let fnA = () => {\n        console.log(arguments);\n      };\n      let fnB = function () {\n        console.log(arguments);\n      };\n      fnB(1, 2, 3);\n      fnA(1, 2, 3);\n\n      // 4.箭头函数的简写\n      //  1) 省略小括号，当形参有且只有一个的时候\n      let add = (n) => {\n        return n + n;\n      };\n      let add2 = (n) => {\n        return n + n;\n      };\n      console.log(add(3));\n      console.log(add2(3));\n\n      //   2) 省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值\n      let pow = (n) => n * n;\n\n      console.log(pow(6));\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/6_箭头函数.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>箭头函数</title>\n  </head>\n  <body>\n    <script>\n      // // 声明一个函数\n      // let fn= function(){\n\n      // }\n      // let fnJ =(a,b)=>{\n      //     return a+b;\n      // }\n      // // 调用函数\n      // let result= fnJ(1,2);\n      // console.log(result);\n\n      // // 1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值\n      // function getname(){\n      //     console.log(this.name);\n      // }\n      // let getname2=()=>{\n      //     console.log(this.name);\n      // }\n\n      // // 设置window 对象的name属性\n      // window.name='光锥';\n      // const school ={\n      //     name:\"guangzhui\"\n      // }\n\n      // // 直接调用\n      // getname();\n      // getname2();\n\n      // // call 方法调用\n      // getname.call(school);\n      // getname2.call(school);\n\n      // // 2.不能作为构造实例化对象\n      // let Person  =(name,age)=>{\n      //     this.name=name;\n      //     this.age=age;\n      // }\n      // let me =new Person ('xiao',20);\n      // console.log(me);\n\n      // 3.不能使用 arguments 变量\n      let fnA = () => {\n        console.log(arguments);\n      };\n      let fnB = function () {\n        console.log(arguments);\n      };\n      fnB(1, 2, 3);\n      fnA(1, 2, 3);\n\n      // 4.箭头函数的简写\n      //  1) 省略小括号，当形参有且只有一个的时候\n      let add = (n) => {\n        return n + n;\n      };\n      let add2 = (n) => {\n        return n + n;\n      };\n      console.log(add(3));\n      console.log(add2(3));\n\n      //   2) 省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值\n      let pow = (n) => n * n;\n\n      console.log(pow(6));\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.745Z","updated":"2023-06-08T15:52:00.497Z","path":"src/ES6-ES11/6_箭头函数.html","title":"","comments":1,"layout":"page","_id":"cljvd8bal000gp4i00z6ya325","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>箭头函数</title>\n  </head>\n  <body>\n    <script>\n      // // 声明一个函数\n      // let fn= function(){\n\n      // }\n      // let fnJ =(a,b)=>{\n      //     return a+b;\n      // }\n      // // 调用函数\n      // let result= fnJ(1,2);\n      // console.log(result);\n\n      // // 1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值\n      // function getname(){\n      //     console.log(this.name);\n      // }\n      // let getname2=()=>{\n      //     console.log(this.name);\n      // }\n\n      // // 设置window 对象的name属性\n      // window.name='光锥';\n      // const school ={\n      //     name:\"guangzhui\"\n      // }\n\n      // // 直接调用\n      // getname();\n      // getname2();\n\n      // // call 方法调用\n      // getname.call(school);\n      // getname2.call(school);\n\n      // // 2.不能作为构造实例化对象\n      // let Person  =(name,age)=>{\n      //     this.name=name;\n      //     this.age=age;\n      // }\n      // let me =new Person ('xiao',20);\n      // console.log(me);\n\n      // 3.不能使用 arguments 变量\n      let fnA = () => {\n        console.log(arguments);\n      };\n      let fnB = function () {\n        console.log(arguments);\n      };\n      fnB(1, 2, 3);\n      fnA(1, 2, 3);\n\n      // 4.箭头函数的简写\n      //  1) 省略小括号，当形参有且只有一个的时候\n      let add = (n) => {\n        return n + n;\n      };\n      let add2 = (n) => {\n        return n + n;\n      };\n      console.log(add(3));\n      console.log(add2(3));\n\n      //   2) 省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值\n      let pow = (n) => n * n;\n\n      console.log(pow(6));\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>箭头函数</title>\n  </head>\n  <body>\n    <script>\n      // // 声明一个函数\n      // let fn= function(){\n\n      // }\n      // let fnJ =(a,b)=>{\n      //     return a+b;\n      // }\n      // // 调用函数\n      // let result= fnJ(1,2);\n      // console.log(result);\n\n      // // 1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值\n      // function getname(){\n      //     console.log(this.name);\n      // }\n      // let getname2=()=>{\n      //     console.log(this.name);\n      // }\n\n      // // 设置window 对象的name属性\n      // window.name='光锥';\n      // const school ={\n      //     name:\"guangzhui\"\n      // }\n\n      // // 直接调用\n      // getname();\n      // getname2();\n\n      // // call 方法调用\n      // getname.call(school);\n      // getname2.call(school);\n\n      // // 2.不能作为构造实例化对象\n      // let Person  =(name,age)=>{\n      //     this.name=name;\n      //     this.age=age;\n      // }\n      // let me =new Person ('xiao',20);\n      // console.log(me);\n\n      // 3.不能使用 arguments 变量\n      let fnA = () => {\n        console.log(arguments);\n      };\n      let fnB = function () {\n        console.log(arguments);\n      };\n      fnB(1, 2, 3);\n      fnA(1, 2, 3);\n\n      // 4.箭头函数的简写\n      //  1) 省略小括号，当形参有且只有一个的时候\n      let add = (n) => {\n        return n + n;\n      };\n      let add2 = (n) => {\n        return n + n;\n      };\n      console.log(add(3));\n      console.log(add2(3));\n\n      //   2) 省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值\n      let pow = (n) => n * n;\n\n      console.log(pow(6));\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <script>\n        // ES6 引入 rest 参数 ，用于获取函数的实参，用来代替 arguments\n        // 1.ES5 获取实参的方式    对象形式\n        function date(){\n            console.log(arguments);\n        }\n        date('a','b','c','d');\n        \n        // 2.rest 参数必须要放到参数最后\n        function fn(a,b,...args){\n            console.log(a);\n            console.log(b);\n            console.log(args);\n        }\n        fn(1,2,3,45,6,69,6,88);\n    </script>\n</body>\n</html>","source":"src/ES6-ES11/9_rest.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <script>\n        // ES6 引入 rest 参数 ，用于获取函数的实参，用来代替 arguments\n        // 1.ES5 获取实参的方式    对象形式\n        function date(){\n            console.log(arguments);\n        }\n        date('a','b','c','d');\n        \n        // 2.rest 参数必须要放到参数最后\n        function fn(a,b,...args){\n            console.log(a);\n            console.log(b);\n            console.log(args);\n        }\n        fn(1,2,3,45,6,69,6,88);\n    </script>\n</body>\n</html>","date":"2023-07-09T11:40:09.746Z","updated":"2023-06-11T15:15:17.498Z","path":"src/ES6-ES11/9_rest.html","title":"","comments":1,"layout":"page","_id":"cljvd8bal000hp4i02c5s0rh4","content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <script>\n        // ES6 引入 rest 参数 ，用于获取函数的实参，用来代替 arguments\n        // 1.ES5 获取实参的方式    对象形式\n        function date(){\n            console.log(arguments);\n        }\n        date('a','b','c','d');\n        \n        // 2.rest 参数必须要放到参数最后\n        function fn(a,b,...args){\n            console.log(a);\n            console.log(b);\n            console.log(args);\n        }\n        fn(1,2,3,45,6,69,6,88);\n    </script>\n</body>\n</html>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <script>\n        // ES6 引入 rest 参数 ，用于获取函数的实参，用来代替 arguments\n        // 1.ES5 获取实参的方式    对象形式\n        function date(){\n            console.log(arguments);\n        }\n        date('a','b','c','d');\n        \n        // 2.rest 参数必须要放到参数最后\n        function fn(a,b,...args){\n            console.log(a);\n            console.log(b);\n            console.log(args);\n        }\n        fn(1,2,3,45,6,69,6,88);\n    </script>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // ES6 允许给函数参数赋初始值\n      // 1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)\n      function add(a, b, c = 123) {\n        return a + b + c;\n      }\n      console.log(add(1, 2));\n\n    //   2.与解构赋值结合\n    function connrct({host='127.0.0.1',username,password,port}){\n        console.log(host);\n        console.log(username);\n        console.log(password);\n        console.log(port);\n    }\n    connrct({\n        // host:\"百度.com\",\n        username:\"root\",\n        password:\"root\",\n        port:8080\n    });\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/8_参数默认值.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // ES6 允许给函数参数赋初始值\n      // 1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)\n      function add(a, b, c = 123) {\n        return a + b + c;\n      }\n      console.log(add(1, 2));\n\n    //   2.与解构赋值结合\n    function connrct({host='127.0.0.1',username,password,port}){\n        console.log(host);\n        console.log(username);\n        console.log(password);\n        console.log(port);\n    }\n    connrct({\n        // host:\"百度.com\",\n        username:\"root\",\n        password:\"root\",\n        port:8080\n    });\n    </script>\n  </body>\n</html>\n","date":"2023-07-09T11:40:09.746Z","updated":"2023-06-11T14:57:41.910Z","path":"src/ES6-ES11/8_参数默认值.html","title":"","comments":1,"layout":"page","_id":"cljvd8bam000ip4i09a0207k8","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // ES6 允许给函数参数赋初始值\n      // 1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)\n      function add(a, b, c = 123) {\n        return a + b + c;\n      }\n      console.log(add(1, 2));\n\n    //   2.与解构赋值结合\n    function connrct({host='127.0.0.1',username,password,port}){\n        console.log(host);\n        console.log(username);\n        console.log(password);\n        console.log(port);\n    }\n    connrct({\n        // host:\"百度.com\",\n        username:\"root\",\n        password:\"root\",\n        port:8080\n    });\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Title</title>\n  </head>\n  <body>\n    <script>\n      // ES6 允许给函数参数赋初始值\n      // 1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)\n      function add(a, b, c = 123) {\n        return a + b + c;\n      }\n      console.log(add(1, 2));\n\n    //   2.与解构赋值结合\n    function connrct({host='127.0.0.1',username,password,port}){\n        console.log(host);\n        console.log(username);\n        console.log(password);\n        console.log(port);\n    }\n    connrct({\n        // host:\"百度.com\",\n        username:\"root\",\n        password:\"root\",\n        port:8080\n    });\n    </script>\n  </body>\n</html>\n"},{"title":"ES6-ES11笔记","date":"2023-07-04T09:25:00.000Z","updated":"2023-07-04T09:25:00.000Z","tags":"JS ES6","categories":"JS","keywords":"ES6","description":"ES6 学习笔记","cover":false,"_content":"\n### 1.let\n1、变量不能重<font color=\"#2DC26B\">复声明  </font>\n\n2、块级<font color=\"#2DC26B\">作用域  </font>\n\n3、<font color=\"#2DC26B\">不存在变量提升</font>  \n\n4、不影响作用域链\n\n![[1_let_学习.html]]\n### 2.const\n1、一定要赋初始值\n2、一般常量使用大写\n3、常量的值不能修改\n4、块级作用域\n5、对于数组和对象的元素修改，不算做对常量的修改\n\n![[2_const_学习.html]]\n### 3.变量的解构赋值\n1、数组的解构赋值\n\n```js\n const cA=['a','b','c'];\n      let [d,f,z]=A;\n      console.log(d);\n      console.log(f);\n      console.log(z);\n```\n\n2、对象的解构赋值\n```js\n   const a = {\n          name: \"zhangsan\",\n          age: 66,\n          xxx: function () {\n            console.log(\"55656\");\n          },\n        };\n        let {name,age,xxx}=a;\n        console.log(name);\n        console.log(age);\n        console.log(xxx);\n        xxx();\n```\n\n![[3_变量的解构赋值.html]]\n### 4.模板字符串\n1、声明\n```JS\nlet str = `我是模版字符串`;\nconsole.log(str,typeof str);\n```\n2、内容中可以直接出现换行符\n```JS\nlet str = `\n        <ul>\n            <li>111<li>\n            <li>222<li>\n            <li>333<li>    \n        <ul>\n        `;\n```\n3、变量的拼接\n```JS\nlet lovt = \"aaa\";\nlet out = `${lovt} 666666666666666`;\nconsole.log(out);\n```\n\n![[4_模版字符串.html]]\n### 5.简化对象写法\n```JS\nlet name ='光锥';\n        let chang = function() {\n            console.log('光锥之内皆是命运');\n        }\n\n        const school ={\n            name,\n            chang,\n            impove(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n```\n\n![[5_简化对象写法.html]]\n### 6.箭头函数\n1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值\n2.不能作为构造实例化对象\n3.不能使用 arguments 变量\n4.箭头函数的简写\n1) 省略小括号，当形参有且只有一个的时候\n2) 省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值\n![[6_箭头函数.html]]\n5.练习\n![[7_箭头函数的案例.html]]\n\n### 7.参数默认值\n1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)\n\n\n``` JS\n      function add(a, b, c = 123) {\n        return a + b + c;\n      }\n      console.log(add(1, 2));\n\n```\n  2.与解构赋值结合\n\n```JS\nfunction connrct({host='127.0.0.1',username,password,port}){\n        console.log(host);\n        console.log(username);\n        console.log(password);\n        console.log(port);\n    }\n    connrct({\n        // host:\"百度.com\",\n        username:\"root\",\n        password:\"root\",\n        port:8080\n    });\n```\n\n### 8.rest参数\n1.ES5 获取实参的方式    对象形式\n\n```JS\n function date(){\n            console.log(arguments);\n        }\n        date('a','b','c','d');\n```\n![[Pasted image 20230611231727.png]]\n\n2.rest 参数必须要放到参数最后\n\n```JS\nfunction fn(a,b,...args){\n            console.log(a);\n            console.log(b);\n            console.log(args);\n        }\n        fn(1,2,3,45,6,69,6,88);\n```\n![[Pasted image 20230611231830.png]]\n\n### 9.扩展运算符的认识和应用\n1.认识 扩展运算符     ES6 【...】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】\n\n```JS\n// 声明一个数组\n      const arr = [\"A\", \"C\", \"B\"]; //【数组】\n      // => 'A','C','B'   【参数序列】\n\n      // 声明一个函数\n      function chang() {\n        console.log(arguments);\n      }\n      chang(...arr); //chang('A','C','B')   【参数序列】\n      chang(arr);\n```\n2.扩展运算符的应用\n 1).数组的合并\n \n```JS\n const AArr = [\"A\", \"C\", \"B\"];\n      const BArr = [\"D\", \"E\", \"F\"];\n      const CArr = AArr.concat(AArr);\n      console.log(CArr);\n      const DArr = [...AArr, ...BArr];\n      console.log(DArr);\n```\n2).数组的克隆   浅克隆\n\n```JS\nconst KArr = [\"H\", \"Y\", \"Z\"];\n      const YArr = [...KArr];\n      console.log(YArr);\n```\n\n3).将伪类数组转换为真正的数组\n\n```JS\n    <div></div>\n    <div></div>\n    <div></div>\n\nconst divs=document.querySelectorAll('div');\n      console.log(divs);\n      const divArr = [...divs];\n      console.log(divArr);\n```\n\n\n\n### 10.Symbol的认识与创建\n1.创建Symobl\n\n```JS\n      let s = Symbol();\n      console.log(s);\n      let s1 = Symbol(\"光锥\");\n      let s2 = Symbol(\"光锥\");\n      console.log(s1, s2, s1 == s4);\n```\n\n2  Symbol.for 创建\n\n```JS\nlet s3 = Symbol(\"光锥\");\n      let s4 = Symbol(\"光锥\");\n      console.log(s3, s4, s3 == s4);\n```\n\n3.不能与其他数据进行运算\n\n\n```JS\nlet result = s+1100l;\n      let result = s>1100l;\n      let result = s+s;\n```\n\n\n4.JS 基本数据类型\n\n\n```JS\n USONB  you are so niubility\n      u  undefined\n      s string symbol\n      o  object\n      n number null\n      b boolean\n```\n\n### 11.Symbol创建对象属性\n1.创建方式一\n\n```JS\n// 向对象中添加方法  up  down\n      let game = {\n        up() {\n          console.log(\"原up方法\");\n        },\n        down() {\n          console.log(\"原down方法\");\n        },\n        name: \"光锥\",\n      };\n\n    //   声明一个对象\n    let methods= {\n        up:Symbol(),\n        down:Symbol()\n    }\n    game[methods.up]=function(){\n        console.log('Symbol的up方法');\n    }\n    game[methods.down]=function(){\n        console.log('Symbol的down方法');\n    }\n    console.log(game);\n\n```\n2.创建方式二\n\n```JS\nlet youxi={\n        name:'奇葩',\n        [Symbol('say')]: function(){\n            console.log('Say');\n        },\n        [Symbol('see')]: function(){\n            console.log('see');\n        }\n    }\n    console.log(youxi);\n\n```\n### 12.Symbol内置属性\n1.hasInstance 和 isConcatSpreadable 的认识\n\n```JS\nclass Person{\n        static [Symbol.hasInstance](param){\n          console.log(param)\n          console.log('类型检测');\n          return false;\n        }\n      }\n      let o={};\n      console.log(o instanceof Person);\n\n      const arr=[1,2,3];\n      const arr2=[4,5,6];\n      arr2[Symbol.isConcatSpreadable]=false;//可用于数组内的数组是否展开\n      console.log(arr.concat(arr2));\n```\n2.更多Symbol参数认识\n[Symbol - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\n\nhexo init \"鱼有个梦想的个人博客\" # 目录名称不含空格的时候双引号可以省略\nhexo : 无法加载文件 C:\\Users\\26524\\AppData\\Roaming\\npm\\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https\n:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。\n所在位置 行:1 字符: 1\n+ hexo init \"鱼有个梦想的个人博客\" # 目录名称不含空格的时候双引号可以省略\n![[Pasted image 20230618162528.png]]","source":"src/ES6-ES11/ES6-ES11笔记.md","raw":"---\n\ntitle: ES6-ES11笔记\ndate: 2023-07-04 17:25\nupdated: 2023-07-04 17:25\ntags: JS ES6\ncategories: JS \nkeywords: ES6\ndescription: ES6 学习笔记\ncover: \n\n---\n\n### 1.let\n1、变量不能重<font color=\"#2DC26B\">复声明  </font>\n\n2、块级<font color=\"#2DC26B\">作用域  </font>\n\n3、<font color=\"#2DC26B\">不存在变量提升</font>  \n\n4、不影响作用域链\n\n![[1_let_学习.html]]\n### 2.const\n1、一定要赋初始值\n2、一般常量使用大写\n3、常量的值不能修改\n4、块级作用域\n5、对于数组和对象的元素修改，不算做对常量的修改\n\n![[2_const_学习.html]]\n### 3.变量的解构赋值\n1、数组的解构赋值\n\n```js\n const cA=['a','b','c'];\n      let [d,f,z]=A;\n      console.log(d);\n      console.log(f);\n      console.log(z);\n```\n\n2、对象的解构赋值\n```js\n   const a = {\n          name: \"zhangsan\",\n          age: 66,\n          xxx: function () {\n            console.log(\"55656\");\n          },\n        };\n        let {name,age,xxx}=a;\n        console.log(name);\n        console.log(age);\n        console.log(xxx);\n        xxx();\n```\n\n![[3_变量的解构赋值.html]]\n### 4.模板字符串\n1、声明\n```JS\nlet str = `我是模版字符串`;\nconsole.log(str,typeof str);\n```\n2、内容中可以直接出现换行符\n```JS\nlet str = `\n        <ul>\n            <li>111<li>\n            <li>222<li>\n            <li>333<li>    \n        <ul>\n        `;\n```\n3、变量的拼接\n```JS\nlet lovt = \"aaa\";\nlet out = `${lovt} 666666666666666`;\nconsole.log(out);\n```\n\n![[4_模版字符串.html]]\n### 5.简化对象写法\n```JS\nlet name ='光锥';\n        let chang = function() {\n            console.log('光锥之内皆是命运');\n        }\n\n        const school ={\n            name,\n            chang,\n            impove(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n```\n\n![[5_简化对象写法.html]]\n### 6.箭头函数\n1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值\n2.不能作为构造实例化对象\n3.不能使用 arguments 变量\n4.箭头函数的简写\n1) 省略小括号，当形参有且只有一个的时候\n2) 省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值\n![[6_箭头函数.html]]\n5.练习\n![[7_箭头函数的案例.html]]\n\n### 7.参数默认值\n1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)\n\n\n``` JS\n      function add(a, b, c = 123) {\n        return a + b + c;\n      }\n      console.log(add(1, 2));\n\n```\n  2.与解构赋值结合\n\n```JS\nfunction connrct({host='127.0.0.1',username,password,port}){\n        console.log(host);\n        console.log(username);\n        console.log(password);\n        console.log(port);\n    }\n    connrct({\n        // host:\"百度.com\",\n        username:\"root\",\n        password:\"root\",\n        port:8080\n    });\n```\n\n### 8.rest参数\n1.ES5 获取实参的方式    对象形式\n\n```JS\n function date(){\n            console.log(arguments);\n        }\n        date('a','b','c','d');\n```\n![[Pasted image 20230611231727.png]]\n\n2.rest 参数必须要放到参数最后\n\n```JS\nfunction fn(a,b,...args){\n            console.log(a);\n            console.log(b);\n            console.log(args);\n        }\n        fn(1,2,3,45,6,69,6,88);\n```\n![[Pasted image 20230611231830.png]]\n\n### 9.扩展运算符的认识和应用\n1.认识 扩展运算符     ES6 【...】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】\n\n```JS\n// 声明一个数组\n      const arr = [\"A\", \"C\", \"B\"]; //【数组】\n      // => 'A','C','B'   【参数序列】\n\n      // 声明一个函数\n      function chang() {\n        console.log(arguments);\n      }\n      chang(...arr); //chang('A','C','B')   【参数序列】\n      chang(arr);\n```\n2.扩展运算符的应用\n 1).数组的合并\n \n```JS\n const AArr = [\"A\", \"C\", \"B\"];\n      const BArr = [\"D\", \"E\", \"F\"];\n      const CArr = AArr.concat(AArr);\n      console.log(CArr);\n      const DArr = [...AArr, ...BArr];\n      console.log(DArr);\n```\n2).数组的克隆   浅克隆\n\n```JS\nconst KArr = [\"H\", \"Y\", \"Z\"];\n      const YArr = [...KArr];\n      console.log(YArr);\n```\n\n3).将伪类数组转换为真正的数组\n\n```JS\n    <div></div>\n    <div></div>\n    <div></div>\n\nconst divs=document.querySelectorAll('div');\n      console.log(divs);\n      const divArr = [...divs];\n      console.log(divArr);\n```\n\n\n\n### 10.Symbol的认识与创建\n1.创建Symobl\n\n```JS\n      let s = Symbol();\n      console.log(s);\n      let s1 = Symbol(\"光锥\");\n      let s2 = Symbol(\"光锥\");\n      console.log(s1, s2, s1 == s4);\n```\n\n2  Symbol.for 创建\n\n```JS\nlet s3 = Symbol(\"光锥\");\n      let s4 = Symbol(\"光锥\");\n      console.log(s3, s4, s3 == s4);\n```\n\n3.不能与其他数据进行运算\n\n\n```JS\nlet result = s+1100l;\n      let result = s>1100l;\n      let result = s+s;\n```\n\n\n4.JS 基本数据类型\n\n\n```JS\n USONB  you are so niubility\n      u  undefined\n      s string symbol\n      o  object\n      n number null\n      b boolean\n```\n\n### 11.Symbol创建对象属性\n1.创建方式一\n\n```JS\n// 向对象中添加方法  up  down\n      let game = {\n        up() {\n          console.log(\"原up方法\");\n        },\n        down() {\n          console.log(\"原down方法\");\n        },\n        name: \"光锥\",\n      };\n\n    //   声明一个对象\n    let methods= {\n        up:Symbol(),\n        down:Symbol()\n    }\n    game[methods.up]=function(){\n        console.log('Symbol的up方法');\n    }\n    game[methods.down]=function(){\n        console.log('Symbol的down方法');\n    }\n    console.log(game);\n\n```\n2.创建方式二\n\n```JS\nlet youxi={\n        name:'奇葩',\n        [Symbol('say')]: function(){\n            console.log('Say');\n        },\n        [Symbol('see')]: function(){\n            console.log('see');\n        }\n    }\n    console.log(youxi);\n\n```\n### 12.Symbol内置属性\n1.hasInstance 和 isConcatSpreadable 的认识\n\n```JS\nclass Person{\n        static [Symbol.hasInstance](param){\n          console.log(param)\n          console.log('类型检测');\n          return false;\n        }\n      }\n      let o={};\n      console.log(o instanceof Person);\n\n      const arr=[1,2,3];\n      const arr2=[4,5,6];\n      arr2[Symbol.isConcatSpreadable]=false;//可用于数组内的数组是否展开\n      console.log(arr.concat(arr2));\n```\n2.更多Symbol参数认识\n[Symbol - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\n\nhexo init \"鱼有个梦想的个人博客\" # 目录名称不含空格的时候双引号可以省略\nhexo : 无法加载文件 C:\\Users\\26524\\AppData\\Roaming\\npm\\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https\n:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。\n所在位置 行:1 字符: 1\n+ hexo init \"鱼有个梦想的个人博客\" # 目录名称不含空格的时候双引号可以省略\n![[Pasted image 20230618162528.png]]","path":"src/ES6-ES11/ES6-ES11笔记.html","comments":1,"layout":"page","_id":"cljvd8bam000jp4i0ep0r9juf","content":"<h3 id=\"1-let\"><a href=\"#1-let\" class=\"headerlink\" title=\"1.let\"></a>1.let</h3><p>1、变量不能重<font color=\"#2DC26B\">复声明  </font></p>\n<p>2、块级<font color=\"#2DC26B\">作用域  </font></p>\n<p>3、<font color=\"#2DC26B\">不存在变量提升</font>  </p>\n<p>4、不影响作用域链</p>\n<p>![[1_let_学习.html]]</p>\n<h3 id=\"2-const\"><a href=\"#2-const\" class=\"headerlink\" title=\"2.const\"></a>2.const</h3><p>1、一定要赋初始值<br>2、一般常量使用大写<br>3、常量的值不能修改<br>4、块级作用域<br>5、对于数组和对象的元素修改，不算做对常量的修改</p>\n<p>![[2_const_学习.html]]</p>\n<h3 id=\"3-变量的解构赋值\"><a href=\"#3-变量的解构赋值\" class=\"headerlink\" title=\"3.变量的解构赋值\"></a>3.变量的解构赋值</h3><p>1、数组的解构赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cA=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">let</span> [d,f,z]=A;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(z);</span><br></pre></td></tr></table></figure>\n\n<p>2、对象的解构赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&quot;zhangsan&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">age</span>: <span class=\"number\">66</span>,</span><br><span class=\"line\">          <span class=\"attr\">xxx</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;55656&quot;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;name,age,xxx&#125;=a;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xxx);</span><br><span class=\"line\">        <span class=\"title function_\">xxx</span>();</span><br></pre></td></tr></table></figure>\n\n<p>![[3_变量的解构赋值.html]]</p>\n<h3 id=\"4-模板字符串\"><a href=\"#4-模板字符串\" class=\"headerlink\" title=\"4.模板字符串\"></a>4.模板字符串</h3><p>1、声明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`我是模版字符串`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str,<span class=\"keyword\">typeof</span> str);</span><br></pre></td></tr></table></figure>\n<p>2、内容中可以直接出现换行符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;111&lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;222&lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;333&lt;li&gt;    </span></span><br><span class=\"line\"><span class=\"string\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>;</span><br></pre></td></tr></table></figure>\n<p>3、变量的拼接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lovt = <span class=\"string\">&quot;aaa&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> out = <span class=\"string\">`<span class=\"subst\">$&#123;lovt&#125;</span> 666666666666666`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(out);</span><br></pre></td></tr></table></figure>\n\n<p>![[4_模版字符串.html]]</p>\n<h3 id=\"5-简化对象写法\"><a href=\"#5-简化对象写法\" class=\"headerlink\" title=\"5.简化对象写法\"></a>5.简化对象写法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name =<span class=\"string\">&#x27;光锥&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> chang = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;光锥之内皆是命运&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> school =&#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            chang,</span><br><span class=\"line\">            <span class=\"title function_\">impove</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;超越光锥才能超越命运&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>![[5_简化对象写法.html]]</p>\n<h3 id=\"6-箭头函数\"><a href=\"#6-箭头函数\" class=\"headerlink\" title=\"6.箭头函数\"></a>6.箭头函数</h3><p>1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值<br>2.不能作为构造实例化对象<br>3.不能使用 arguments 变量<br>4.箭头函数的简写</p>\n<ol>\n<li>省略小括号，当形参有且只有一个的时候</li>\n<li>省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值<br>![[6_箭头函数.html]]<br>5.练习<br>![[7_箭头函数的案例.html]]</li>\n</ol>\n<h3 id=\"7-参数默认值\"><a href=\"#7-参数默认值\" class=\"headerlink\" title=\"7.参数默认值\"></a>7.参数默认值</h3><p>1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b, c = <span class=\"number\">123</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  2.与解构赋值结合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">connrct</span>(<span class=\"params\">&#123;host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,username,password,port&#125;</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(host);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(username);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(password);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">connrct</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// host:&quot;百度.com&quot;,</span></span><br><span class=\"line\">        <span class=\"attr\">username</span>:<span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>:<span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>:<span class=\"number\">8080</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-rest参数\"><a href=\"#8-rest参数\" class=\"headerlink\" title=\"8.rest参数\"></a>8.rest参数</h3><p>1.ES5 获取实参的方式    对象形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">date</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">           <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"title function_\">date</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>![[Pasted image 20230611231727.png]]</p>\n<p>2.rest 参数必须要放到参数最后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a,b,...args</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">45</span>,<span class=\"number\">6</span>,<span class=\"number\">69</span>,<span class=\"number\">6</span>,<span class=\"number\">88</span>);</span><br></pre></td></tr></table></figure>\n<p>![[Pasted image 20230611231830.png]]</p>\n<h3 id=\"9-扩展运算符的认识和应用\"><a href=\"#9-扩展运算符的认识和应用\" class=\"headerlink\" title=\"9.扩展运算符的认识和应用\"></a>9.扩展运算符的认识和应用</h3><p>1.认识 扩展运算符     ES6 【…】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个数组</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;B&quot;</span>]; <span class=\"comment\">//【数组】</span></span><br><span class=\"line\">      <span class=\"comment\">// =&gt; &#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;   【参数序列】</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 声明一个函数</span></span><br><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">chang</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">chang</span>(...arr); <span class=\"comment\">//chang(&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;)   【参数序列】</span></span><br><span class=\"line\">      <span class=\"title function_\">chang</span>(arr);</span><br></pre></td></tr></table></figure>\n<p>2.扩展运算符的应用<br> 1).数组的合并\n </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AArr</span> = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;B&quot;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">BArr</span> = [<span class=\"string\">&quot;D&quot;</span>, <span class=\"string\">&quot;E&quot;</span>, <span class=\"string\">&quot;F&quot;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">CArr</span> = <span class=\"title class_\">AArr</span>.<span class=\"title function_\">concat</span>(<span class=\"title class_\">AArr</span>);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">CArr</span>);</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">DArr</span> = [...<span class=\"title class_\">AArr</span>, ...<span class=\"title class_\">BArr</span>];</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">DArr</span>);</span><br></pre></td></tr></table></figure>\n<p>2).数组的克隆   浅克隆</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">KArr</span> = [<span class=\"string\">&quot;H&quot;</span>, <span class=\"string\">&quot;Y&quot;</span>, <span class=\"string\">&quot;Z&quot;</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title class_\">YArr</span> = [...<span class=\"title class_\">KArr</span>];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">YArr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>3).将伪类数组转换为真正的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> divs=<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divs);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> divArr = [...divs];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divArr);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-Symbol的认识与创建\"><a href=\"#10-Symbol的认识与创建\" class=\"headerlink\" title=\"10.Symbol的认识与创建\"></a>10.Symbol的认识与创建</h3><p>1.创建Symobl</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s);</span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1, s2, s1 == s4);</span><br></pre></td></tr></table></figure>\n\n<p>2  Symbol.for 创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s3 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> s4 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s3, s4, s3 == s4);</span><br></pre></td></tr></table></figure>\n\n<p>3.不能与其他数据进行运算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = s+1100l;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = s&gt;1100l;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = s+s;</span><br></pre></td></tr></table></figure>\n\n\n<p>4.JS 基本数据类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">USONB</span>  you are so niubility</span><br><span class=\"line\">     u  <span class=\"literal\">undefined</span></span><br><span class=\"line\">     s string symbol</span><br><span class=\"line\">     o  object</span><br><span class=\"line\">     n number <span class=\"literal\">null</span></span><br><span class=\"line\">     b boolean</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-Symbol创建对象属性\"><a href=\"#11-Symbol创建对象属性\" class=\"headerlink\" title=\"11.Symbol创建对象属性\"></a>11.Symbol创建对象属性</h3><p>1.创建方式一</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向对象中添加方法  up  down</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> game = &#123;</span><br><span class=\"line\">        <span class=\"title function_\">up</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;原up方法&quot;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">down</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;原down方法&quot;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;光锥&quot;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//   声明一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> methods= &#123;</span><br><span class=\"line\">        <span class=\"attr\">up</span>:<span class=\"title class_\">Symbol</span>(),</span><br><span class=\"line\">        <span class=\"attr\">down</span>:<span class=\"title class_\">Symbol</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    game[methods.<span class=\"property\">up</span>]=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Symbol的up方法&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    game[methods.<span class=\"property\">down</span>]=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Symbol的down方法&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(game);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.创建方式二</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> youxi=&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;奇葩&#x27;</span>,</span><br><span class=\"line\">        [<span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;say&#x27;</span>)]: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Say&#x27;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [<span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;see&#x27;</span>)]: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;see&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(youxi);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"12-Symbol内置属性\"><a href=\"#12-Symbol内置属性\" class=\"headerlink\" title=\"12.Symbol内置属性\"></a>12.Symbol内置属性</h3><p>1.hasInstance 和 isConcatSpreadable 的认识</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> [<span class=\"title class_\">Symbol</span>.<span class=\"property\">hasInstance</span>](param)&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(param)</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;类型检测&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> o=&#123;&#125;;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">      arr2[<span class=\"title class_\">Symbol</span>.<span class=\"property\">isConcatSpreadable</span>]=<span class=\"literal\">false</span>;<span class=\"comment\">//可用于数组内的数组是否展开</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">concat</span>(arr2));</span><br></pre></td></tr></table></figure>\n<p>2.更多Symbol参数认识<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol - JavaScript | MDN</a></p>\n<p>hexo init “鱼有个梦想的个人博客” # 目录名称不含空格的时候双引号可以省略<br>hexo : 无法加载文件 C:\\Users\\26524\\AppData\\Roaming\\npm\\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https<br>:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的 about_Execution_Policies。<br>所在位置 行:1 字符: 1</p>\n<ul>\n<li>hexo init “鱼有个梦想的个人博客” # 目录名称不含空格的时候双引号可以省略<br>![[Pasted image 20230618162528.png]]</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"excerpt":"","more":"<h3 id=\"1-let\"><a href=\"#1-let\" class=\"headerlink\" title=\"1.let\"></a>1.let</h3><p>1、变量不能重<font color=\"#2DC26B\">复声明  </font></p>\n<p>2、块级<font color=\"#2DC26B\">作用域  </font></p>\n<p>3、<font color=\"#2DC26B\">不存在变量提升</font>  </p>\n<p>4、不影响作用域链</p>\n<p>![[1_let_学习.html]]</p>\n<h3 id=\"2-const\"><a href=\"#2-const\" class=\"headerlink\" title=\"2.const\"></a>2.const</h3><p>1、一定要赋初始值<br>2、一般常量使用大写<br>3、常量的值不能修改<br>4、块级作用域<br>5、对于数组和对象的元素修改，不算做对常量的修改</p>\n<p>![[2_const_学习.html]]</p>\n<h3 id=\"3-变量的解构赋值\"><a href=\"#3-变量的解构赋值\" class=\"headerlink\" title=\"3.变量的解构赋值\"></a>3.变量的解构赋值</h3><p>1、数组的解构赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cA=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">let</span> [d,f,z]=A;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(z);</span><br></pre></td></tr></table></figure>\n\n<p>2、对象的解构赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&quot;zhangsan&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">age</span>: <span class=\"number\">66</span>,</span><br><span class=\"line\">          <span class=\"attr\">xxx</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;55656&quot;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;name,age,xxx&#125;=a;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xxx);</span><br><span class=\"line\">        <span class=\"title function_\">xxx</span>();</span><br></pre></td></tr></table></figure>\n\n<p>![[3_变量的解构赋值.html]]</p>\n<h3 id=\"4-模板字符串\"><a href=\"#4-模板字符串\" class=\"headerlink\" title=\"4.模板字符串\"></a>4.模板字符串</h3><p>1、声明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`我是模版字符串`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str,<span class=\"keyword\">typeof</span> str);</span><br></pre></td></tr></table></figure>\n<p>2、内容中可以直接出现换行符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;111&lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;222&lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;333&lt;li&gt;    </span></span><br><span class=\"line\"><span class=\"string\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>;</span><br></pre></td></tr></table></figure>\n<p>3、变量的拼接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lovt = <span class=\"string\">&quot;aaa&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> out = <span class=\"string\">`<span class=\"subst\">$&#123;lovt&#125;</span> 666666666666666`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(out);</span><br></pre></td></tr></table></figure>\n\n<p>![[4_模版字符串.html]]</p>\n<h3 id=\"5-简化对象写法\"><a href=\"#5-简化对象写法\" class=\"headerlink\" title=\"5.简化对象写法\"></a>5.简化对象写法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name =<span class=\"string\">&#x27;光锥&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> chang = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;光锥之内皆是命运&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> school =&#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            chang,</span><br><span class=\"line\">            <span class=\"title function_\">impove</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;超越光锥才能超越命运&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>![[5_简化对象写法.html]]</p>\n<h3 id=\"6-箭头函数\"><a href=\"#6-箭头函数\" class=\"headerlink\" title=\"6.箭头函数\"></a>6.箭头函数</h3><p>1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值<br>2.不能作为构造实例化对象<br>3.不能使用 arguments 变量<br>4.箭头函数的简写</p>\n<ol>\n<li>省略小括号，当形参有且只有一个的时候</li>\n<li>省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值<br>![[6_箭头函数.html]]<br>5.练习<br>![[7_箭头函数的案例.html]]</li>\n</ol>\n<h3 id=\"7-参数默认值\"><a href=\"#7-参数默认值\" class=\"headerlink\" title=\"7.参数默认值\"></a>7.参数默认值</h3><p>1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b, c = <span class=\"number\">123</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  2.与解构赋值结合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">connrct</span>(<span class=\"params\">&#123;host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,username,password,port&#125;</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(host);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(username);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(password);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">connrct</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// host:&quot;百度.com&quot;,</span></span><br><span class=\"line\">        <span class=\"attr\">username</span>:<span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>:<span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>:<span class=\"number\">8080</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-rest参数\"><a href=\"#8-rest参数\" class=\"headerlink\" title=\"8.rest参数\"></a>8.rest参数</h3><p>1.ES5 获取实参的方式    对象形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">date</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">           <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"title function_\">date</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>![[Pasted image 20230611231727.png]]</p>\n<p>2.rest 参数必须要放到参数最后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a,b,...args</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">45</span>,<span class=\"number\">6</span>,<span class=\"number\">69</span>,<span class=\"number\">6</span>,<span class=\"number\">88</span>);</span><br></pre></td></tr></table></figure>\n<p>![[Pasted image 20230611231830.png]]</p>\n<h3 id=\"9-扩展运算符的认识和应用\"><a href=\"#9-扩展运算符的认识和应用\" class=\"headerlink\" title=\"9.扩展运算符的认识和应用\"></a>9.扩展运算符的认识和应用</h3><p>1.认识 扩展运算符     ES6 【…】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个数组</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;B&quot;</span>]; <span class=\"comment\">//【数组】</span></span><br><span class=\"line\">      <span class=\"comment\">// =&gt; &#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;   【参数序列】</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 声明一个函数</span></span><br><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">chang</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">chang</span>(...arr); <span class=\"comment\">//chang(&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;)   【参数序列】</span></span><br><span class=\"line\">      <span class=\"title function_\">chang</span>(arr);</span><br></pre></td></tr></table></figure>\n<p>2.扩展运算符的应用<br> 1).数组的合并\n </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AArr</span> = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;B&quot;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">BArr</span> = [<span class=\"string\">&quot;D&quot;</span>, <span class=\"string\">&quot;E&quot;</span>, <span class=\"string\">&quot;F&quot;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">CArr</span> = <span class=\"title class_\">AArr</span>.<span class=\"title function_\">concat</span>(<span class=\"title class_\">AArr</span>);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">CArr</span>);</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">DArr</span> = [...<span class=\"title class_\">AArr</span>, ...<span class=\"title class_\">BArr</span>];</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">DArr</span>);</span><br></pre></td></tr></table></figure>\n<p>2).数组的克隆   浅克隆</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">KArr</span> = [<span class=\"string\">&quot;H&quot;</span>, <span class=\"string\">&quot;Y&quot;</span>, <span class=\"string\">&quot;Z&quot;</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title class_\">YArr</span> = [...<span class=\"title class_\">KArr</span>];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">YArr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>3).将伪类数组转换为真正的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> divs=<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divs);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> divArr = [...divs];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divArr);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-Symbol的认识与创建\"><a href=\"#10-Symbol的认识与创建\" class=\"headerlink\" title=\"10.Symbol的认识与创建\"></a>10.Symbol的认识与创建</h3><p>1.创建Symobl</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s);</span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1, s2, s1 == s4);</span><br></pre></td></tr></table></figure>\n\n<p>2  Symbol.for 创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s3 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> s4 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s3, s4, s3 == s4);</span><br></pre></td></tr></table></figure>\n\n<p>3.不能与其他数据进行运算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = s+1100l;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = s&gt;1100l;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = s+s;</span><br></pre></td></tr></table></figure>\n\n\n<p>4.JS 基本数据类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">USONB</span>  you are so niubility</span><br><span class=\"line\">     u  <span class=\"literal\">undefined</span></span><br><span class=\"line\">     s string symbol</span><br><span class=\"line\">     o  object</span><br><span class=\"line\">     n number <span class=\"literal\">null</span></span><br><span class=\"line\">     b boolean</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-Symbol创建对象属性\"><a href=\"#11-Symbol创建对象属性\" class=\"headerlink\" title=\"11.Symbol创建对象属性\"></a>11.Symbol创建对象属性</h3><p>1.创建方式一</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向对象中添加方法  up  down</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> game = &#123;</span><br><span class=\"line\">        <span class=\"title function_\">up</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;原up方法&quot;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">down</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;原down方法&quot;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;光锥&quot;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//   声明一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> methods= &#123;</span><br><span class=\"line\">        <span class=\"attr\">up</span>:<span class=\"title class_\">Symbol</span>(),</span><br><span class=\"line\">        <span class=\"attr\">down</span>:<span class=\"title class_\">Symbol</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    game[methods.<span class=\"property\">up</span>]=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Symbol的up方法&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    game[methods.<span class=\"property\">down</span>]=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Symbol的down方法&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(game);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.创建方式二</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> youxi=&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;奇葩&#x27;</span>,</span><br><span class=\"line\">        [<span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;say&#x27;</span>)]: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Say&#x27;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [<span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;see&#x27;</span>)]: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;see&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(youxi);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"12-Symbol内置属性\"><a href=\"#12-Symbol内置属性\" class=\"headerlink\" title=\"12.Symbol内置属性\"></a>12.Symbol内置属性</h3><p>1.hasInstance 和 isConcatSpreadable 的认识</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> [<span class=\"title class_\">Symbol</span>.<span class=\"property\">hasInstance</span>](param)&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(param)</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;类型检测&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> o=&#123;&#125;;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">      arr2[<span class=\"title class_\">Symbol</span>.<span class=\"property\">isConcatSpreadable</span>]=<span class=\"literal\">false</span>;<span class=\"comment\">//可用于数组内的数组是否展开</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">concat</span>(arr2));</span><br></pre></td></tr></table></figure>\n<p>2.更多Symbol参数认识<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol - JavaScript | MDN</a></p>\n<p>hexo init “鱼有个梦想的个人博客” # 目录名称不含空格的时候双引号可以省略<br>hexo : 无法加载文件 C:\\Users\\26524\\AppData\\Roaming\\npm\\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https<br>:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的 about_Execution_Policies。<br>所在位置 行:1 字符: 1</p>\n<ul>\n<li>hexo init “鱼有个梦想的个人博客” # 目录名称不含空格的时候双引号可以省略<br>![[Pasted image 20230618162528.png]]</li>\n</ul>\n"},{"title":"【必需】文章标题","date":"2023-07-04T09:18:35.512Z","updated":"2023-07-04T09:18:35.512Z","tags":"【可选】文章标签","categories":"【可选】文章分类","keywords":"【可选】文章关键字","description":"【可选】文章描述","cover":"【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false / 图片地址 / 留空)","_content":"","source":"模版/模版.md","raw":"---\n\ntitle: 【必需】文章标题\ndate: 【必需】文章创建日期\nupdated: 【可选】文章更新日期\ntags: 【可选】文章标签\ncategories: 【可选】文章分类\nkeywords: 【可选】文章关键字\ndescription: 【可选】文章描述\ncover: 【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false / 图片地址 / 留空)\n\n---\n","path":"模版/模版.html","comments":1,"layout":"page","_id":"cljvj5ed500005wi01v8z1ro6","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"excerpt":"","more":""},{"_content":"### Page Front-matter\n---\ntitle: 【必填】页面标题\ndate: 【必填】页面创建日期\ntype: 【必填】标签、分类和友情链接三个页面必须填写\nupdated: 【可选】页面更新日期\ncomments: 【可选】页面评论模块(默认为true)\ndescription: 【可选】页面描述\nkeywords: 【可选】页面关键字\ntop_img: 【可选】页面顶部图片\nmathjax: 【可选】展示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)\nkatex: 【可选】展示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)\naside: 【可选】展示侧边栏 (默认 true)\naplayer： 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐配置\nhighlight_shrink： 【可选】配置代码框是否展开 (true/false)(默认设置为 highlight_shrink 的配置)\n\n---\n### Post Front-matter\n\n---\ntitle: 【必需】文章标题\ndate: 【必需】文章创建日期\nupdated: 【可选】文章更新日期\ntags: 【可选】文章标签\ncategories: 【可选】文章分类\nkeywords: 【可选】文章关键字\ndescription: 【可选】文章描述\ntop_img: 【可选】文章顶部图片\ncomments： 【可选】显示文章评论模块 (默认 true)\ncover: 【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false / 图片地址 / 留空)\ntoc: 【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)\ntoc_number: 【可选】显示 toc_number (默认为设置中 toc 的 number 配置)\nauto_open: 【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置)\ncopyright: 【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)\ncopyright_author: 【可选】文章版权模块的文章作者\ncopyright_author_href: 【可选】文章版权模块的文章作者链接\ncopyright_url: 【可选】文章版权模块的文章连结链接\ncopyright_info: 【可选】文章版权模块的版权声明文字\nmathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)\nkatex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)\naplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置\nhighlight_shrink：【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)\n\n---\n","source":"模版/模版 全套样式解析.md","raw":"### Page Front-matter\n---\ntitle: 【必填】页面标题\ndate: 【必填】页面创建日期\ntype: 【必填】标签、分类和友情链接三个页面必须填写\nupdated: 【可选】页面更新日期\ncomments: 【可选】页面评论模块(默认为true)\ndescription: 【可选】页面描述\nkeywords: 【可选】页面关键字\ntop_img: 【可选】页面顶部图片\nmathjax: 【可选】展示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)\nkatex: 【可选】展示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)\naside: 【可选】展示侧边栏 (默认 true)\naplayer： 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐配置\nhighlight_shrink： 【可选】配置代码框是否展开 (true/false)(默认设置为 highlight_shrink 的配置)\n\n---\n### Post Front-matter\n\n---\ntitle: 【必需】文章标题\ndate: 【必需】文章创建日期\nupdated: 【可选】文章更新日期\ntags: 【可选】文章标签\ncategories: 【可选】文章分类\nkeywords: 【可选】文章关键字\ndescription: 【可选】文章描述\ntop_img: 【可选】文章顶部图片\ncomments： 【可选】显示文章评论模块 (默认 true)\ncover: 【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false / 图片地址 / 留空)\ntoc: 【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)\ntoc_number: 【可选】显示 toc_number (默认为设置中 toc 的 number 配置)\nauto_open: 【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置)\ncopyright: 【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)\ncopyright_author: 【可选】文章版权模块的文章作者\ncopyright_author_href: 【可选】文章版权模块的文章作者链接\ncopyright_url: 【可选】文章版权模块的文章连结链接\ncopyright_info: 【可选】文章版权模块的版权声明文字\nmathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)\nkatex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)\naplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置\nhighlight_shrink：【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)\n\n---\n","date":"2023-07-04T08:04:49.620Z","updated":"2023-07-04T07:50:39.893Z","path":"模版/模版 全套样式解析.html","title":"","comments":1,"layout":"page","_id":"cljvj5ed900015wi0biuogxqa","content":"<h3 id=\"Page-Front-matter\"><a href=\"#Page-Front-matter\" class=\"headerlink\" title=\"Page Front-matter\"></a>Page Front-matter</h3><hr>\n<p>title: 【必填】页面标题<br>date: 【必填】页面创建日期<br>type: 【必填】标签、分类和友情链接三个页面必须填写<br>updated: 【可选】页面更新日期<br>comments: 【可选】页面评论模块(默认为true)<br>description: 【可选】页面描述<br>keywords: 【可选】页面关键字<br>top_img: 【可选】页面顶部图片<br>mathjax: 【可选】展示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)<br>katex: 【可选】展示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)<br>aside: 【可选】展示侧边栏 (默认 true)<br>aplayer： 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐配置<br>highlight_shrink： 【可选】配置代码框是否展开 (true&#x2F;false)(默认设置为 highlight_shrink 的配置)</p>\n<hr>\n<h3 id=\"Post-Front-matter\"><a href=\"#Post-Front-matter\" class=\"headerlink\" title=\"Post Front-matter\"></a>Post Front-matter</h3><hr>\n<p>title: 【必需】文章标题<br>date: 【必需】文章创建日期<br>updated: 【可选】文章更新日期<br>tags: 【可选】文章标签<br>categories: 【可选】文章分类<br>keywords: 【可选】文章关键字<br>description: 【可选】文章描述<br>top_img: 【可选】文章顶部图片<br>comments： 【可选】显示文章评论模块 (默认 true)<br>cover: 【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false &#x2F; 图片地址 &#x2F; 留空)<br>toc: 【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)<br>toc_number: 【可选】显示 toc_number (默认为设置中 toc 的 number 配置)<br>auto_open: 【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置)<br>copyright: 【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)<br>copyright_author: 【可选】文章版权模块的文章作者<br>copyright_author_href: 【可选】文章版权模块的文章作者链接<br>copyright_url: 【可选】文章版权模块的文章连结链接<br>copyright_info: 【可选】文章版权模块的版权声明文字<br>mathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)<br>katex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)<br>aplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置<br>highlight_shrink：【可选】配置代码框是否展开 (true&#x2F;false)(默认为设置中 highlight_shrink 的配置)</p>\n<hr>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<h3 id=\"Page-Front-matter\"><a href=\"#Page-Front-matter\" class=\"headerlink\" title=\"Page Front-matter\"></a>Page Front-matter</h3><hr>\n<p>title: 【必填】页面标题<br>date: 【必填】页面创建日期<br>type: 【必填】标签、分类和友情链接三个页面必须填写<br>updated: 【可选】页面更新日期<br>comments: 【可选】页面评论模块(默认为true)<br>description: 【可选】页面描述<br>keywords: 【可选】页面关键字<br>top_img: 【可选】页面顶部图片<br>mathjax: 【可选】展示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)<br>katex: 【可选】展示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)<br>aside: 【可选】展示侧边栏 (默认 true)<br>aplayer： 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐配置<br>highlight_shrink： 【可选】配置代码框是否展开 (true&#x2F;false)(默认设置为 highlight_shrink 的配置)</p>\n<hr>\n<h3 id=\"Post-Front-matter\"><a href=\"#Post-Front-matter\" class=\"headerlink\" title=\"Post Front-matter\"></a>Post Front-matter</h3><hr>\n<p>title: 【必需】文章标题<br>date: 【必需】文章创建日期<br>updated: 【可选】文章更新日期<br>tags: 【可选】文章标签<br>categories: 【可选】文章分类<br>keywords: 【可选】文章关键字<br>description: 【可选】文章描述<br>top_img: 【可选】文章顶部图片<br>comments： 【可选】显示文章评论模块 (默认 true)<br>cover: 【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false &#x2F; 图片地址 &#x2F; 留空)<br>toc: 【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)<br>toc_number: 【可选】显示 toc_number (默认为设置中 toc 的 number 配置)<br>auto_open: 【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置)<br>copyright: 【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)<br>copyright_author: 【可选】文章版权模块的文章作者<br>copyright_author_href: 【可选】文章版权模块的文章作者链接<br>copyright_url: 【可选】文章版权模块的文章连结链接<br>copyright_info: 【可选】文章版权模块的版权声明文字<br>mathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)<br>katex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)<br>aplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置<br>highlight_shrink：【可选】配置代码框是否展开 (true&#x2F;false)(默认为设置中 highlight_shrink 的配置)</p>\n<hr>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器函数参数</title>\n  </head>\n  <body>\n    <script>\n      function* gen(arg) {\n        console.log(arg);\n        let one = yield 111;\n        console.log(one);\n        let two = yield 222;\n        console.log(two);\n        let three = yield 333;\n        console.log(three);\n      }\n\n      //   执行获取迭代器对象\n      let iterator = gen(\"aaa\");\n      console.log(iterator.next());\n\n      //   next 方法可以传入实参   *从第二个起 作为上一个整体的返回值\n      console.log(iterator.next(\"BBB\"));\n      console.log(iterator.next(\"CCC\"));\n      console.log(iterator.next(\"DDD\"));\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/17_生成器函数参数传递.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器函数参数</title>\n  </head>\n  <body>\n    <script>\n      function* gen(arg) {\n        console.log(arg);\n        let one = yield 111;\n        console.log(one);\n        let two = yield 222;\n        console.log(two);\n        let three = yield 333;\n        console.log(three);\n      }\n\n      //   执行获取迭代器对象\n      let iterator = gen(\"aaa\");\n      console.log(iterator.next());\n\n      //   next 方法可以传入实参   *从第二个起 作为上一个整体的返回值\n      console.log(iterator.next(\"BBB\"));\n      console.log(iterator.next(\"CCC\"));\n      console.log(iterator.next(\"DDD\"));\n    </script>\n  </body>\n</html>\n","date":"2023-07-10T14:17:11.003Z","updated":"2023-07-06T14:28:48.978Z","path":"src/ES6-ES11/17_生成器函数参数传递.html","title":"","comments":1,"layout":"page","_id":"cljzumpsr0001dgi04gxmcjy2","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器函数参数</title>\n  </head>\n  <body>\n    <script>\n      function* gen(arg) {\n        console.log(arg);\n        let one = yield 111;\n        console.log(one);\n        let two = yield 222;\n        console.log(two);\n        let three = yield 333;\n        console.log(three);\n      }\n\n      //   执行获取迭代器对象\n      let iterator = gen(\"aaa\");\n      console.log(iterator.next());\n\n      //   next 方法可以传入实参   *从第二个起 作为上一个整体的返回值\n      console.log(iterator.next(\"BBB\"));\n      console.log(iterator.next(\"CCC\"));\n      console.log(iterator.next(\"DDD\"));\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器函数参数</title>\n  </head>\n  <body>\n    <script>\n      function* gen(arg) {\n        console.log(arg);\n        let one = yield 111;\n        console.log(one);\n        let two = yield 222;\n        console.log(two);\n        let three = yield 333;\n        console.log(three);\n      }\n\n      //   执行获取迭代器对象\n      let iterator = gen(\"aaa\");\n      console.log(iterator.next());\n\n      //   next 方法可以传入实参   *从第二个起 作为上一个整体的返回值\n      console.log(iterator.next(\"BBB\"));\n      console.log(iterator.next(\"CCC\"));\n      console.log(iterator.next(\"DDD\"));\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器实例2</title>\n  </head>\n  <body>\n    <script>\n      // 模拟获取用户数据 订单数据 商品数据\n      function getUsers() {\n        setTimeout(() => {\n          let date = \"用户数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n      function getOrders() {\n        setTimeout(() => {\n          let date = \"订单数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n      function getShion() {\n        setTimeout(() => {\n          let date = \"商品数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n\n      function* gen(params) {\n        let a = yield getUsers();\n        console.log(a);\n        let b = yield getOrders();\n        console.log(b);\n        let c = yield getShion();\n        console.log(c);\n      }\n      // 调用生成器函数\n      let iterator = gen();\n      iterator.next();\n    </script>\n  </body>\n</html>\n","source":"src/ES6-ES11/19_生成器实例2.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器实例2</title>\n  </head>\n  <body>\n    <script>\n      // 模拟获取用户数据 订单数据 商品数据\n      function getUsers() {\n        setTimeout(() => {\n          let date = \"用户数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n      function getOrders() {\n        setTimeout(() => {\n          let date = \"订单数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n      function getShion() {\n        setTimeout(() => {\n          let date = \"商品数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n\n      function* gen(params) {\n        let a = yield getUsers();\n        console.log(a);\n        let b = yield getOrders();\n        console.log(b);\n        let c = yield getShion();\n        console.log(c);\n      }\n      // 调用生成器函数\n      let iterator = gen();\n      iterator.next();\n    </script>\n  </body>\n</html>\n","date":"2023-07-10T15:38:19.553Z","updated":"2023-07-10T15:38:19.553Z","path":"src/ES6-ES11/19_生成器实例2.html","title":"","comments":1,"layout":"page","_id":"cljzumpss0002dgi07q24eii3","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器实例2</title>\n  </head>\n  <body>\n    <script>\n      // 模拟获取用户数据 订单数据 商品数据\n      function getUsers() {\n        setTimeout(() => {\n          let date = \"用户数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n      function getOrders() {\n        setTimeout(() => {\n          let date = \"订单数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n      function getShion() {\n        setTimeout(() => {\n          let date = \"商品数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n\n      function* gen(params) {\n        let a = yield getUsers();\n        console.log(a);\n        let b = yield getOrders();\n        console.log(b);\n        let c = yield getShion();\n        console.log(c);\n      }\n      // 调用生成器函数\n      let iterator = gen();\n      iterator.next();\n    </script>\n  </body>\n</html>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>生成器实例2</title>\n  </head>\n  <body>\n    <script>\n      // 模拟获取用户数据 订单数据 商品数据\n      function getUsers() {\n        setTimeout(() => {\n          let date = \"用户数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n      function getOrders() {\n        setTimeout(() => {\n          let date = \"订单数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n      function getShion() {\n        setTimeout(() => {\n          let date = \"商品数据\";\n          // console.log(date);\n          iterator.next(date);\n        }, 1000);\n      }\n\n      function* gen(params) {\n        let a = yield getUsers();\n        console.log(a);\n        let b = yield getOrders();\n        console.log(b);\n        let c = yield getShion();\n        console.log(c);\n      }\n      // 调用生成器函数\n      let iterator = gen();\n      iterator.next();\n    </script>\n  </body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>生成器函数的实例</title>\n</head>\n<body>\n    <script>\n        // 异步编程  文件操作  网络操作（ajax ，request） 数据库操作\n        // 1s 控制台输出  111   2s 后输出 222  3s 后输出333\n        // 回调地狱\n        // setTimeout(() => {\n        //     console.log(\"111\");\n        //     setTimeout(()=>{\n        //         console.log(\"222\");\n        //         setTimeout(() => {\n        //             console.log(\"333\");\n        //         }, 3000);\n        //     },2000);\n        // }, 1000);\n\n\n        function one() {\n            setTimeout(() => {\n               console.log(\"111\");\n               iterator.next(); \n            }, 1000);\n        }\n        function two() {\n            setTimeout(() => {\n               console.log(\"222\"); \n               iterator.next();\n            }, 2000);\n        }\n        function three() {\n            setTimeout(() => {\n               console.log(\"333\"); \n               iterator.next();\n            }, 3000);\n        }\n        function * gen() {\n            yield one();\n            yield two();\n            yield three();\n        }\n\n        let iterator = gen();\n        iterator.next();\n    </script>\n</body>\n</html>","source":"src/ES6-ES11/18_生成器函数实例.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>生成器函数的实例</title>\n</head>\n<body>\n    <script>\n        // 异步编程  文件操作  网络操作（ajax ，request） 数据库操作\n        // 1s 控制台输出  111   2s 后输出 222  3s 后输出333\n        // 回调地狱\n        // setTimeout(() => {\n        //     console.log(\"111\");\n        //     setTimeout(()=>{\n        //         console.log(\"222\");\n        //         setTimeout(() => {\n        //             console.log(\"333\");\n        //         }, 3000);\n        //     },2000);\n        // }, 1000);\n\n\n        function one() {\n            setTimeout(() => {\n               console.log(\"111\");\n               iterator.next(); \n            }, 1000);\n        }\n        function two() {\n            setTimeout(() => {\n               console.log(\"222\"); \n               iterator.next();\n            }, 2000);\n        }\n        function three() {\n            setTimeout(() => {\n               console.log(\"333\"); \n               iterator.next();\n            }, 3000);\n        }\n        function * gen() {\n            yield one();\n            yield two();\n            yield three();\n        }\n\n        let iterator = gen();\n        iterator.next();\n    </script>\n</body>\n</html>","date":"2023-07-10T14:30:55.282Z","updated":"2023-07-10T14:30:55.282Z","path":"src/ES6-ES11/18_生成器函数实例.html","title":"","comments":1,"layout":"page","_id":"cljzumpsv0003dgi0cec7gtw0","content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>生成器函数的实例</title>\n</head>\n<body>\n    <script>\n        // 异步编程  文件操作  网络操作（ajax ，request） 数据库操作\n        // 1s 控制台输出  111   2s 后输出 222  3s 后输出333\n        // 回调地狱\n        // setTimeout(() => {\n        //     console.log(\"111\");\n        //     setTimeout(()=>{\n        //         console.log(\"222\");\n        //         setTimeout(() => {\n        //             console.log(\"333\");\n        //         }, 3000);\n        //     },2000);\n        // }, 1000);\n\n\n        function one() {\n            setTimeout(() => {\n               console.log(\"111\");\n               iterator.next(); \n            }, 1000);\n        }\n        function two() {\n            setTimeout(() => {\n               console.log(\"222\"); \n               iterator.next();\n            }, 2000);\n        }\n        function three() {\n            setTimeout(() => {\n               console.log(\"333\"); \n               iterator.next();\n            }, 3000);\n        }\n        function * gen() {\n            yield one();\n            yield two();\n            yield three();\n        }\n\n        let iterator = gen();\n        iterator.next();\n    </script>\n</body>\n</html>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>生成器函数的实例</title>\n</head>\n<body>\n    <script>\n        // 异步编程  文件操作  网络操作（ajax ，request） 数据库操作\n        // 1s 控制台输出  111   2s 后输出 222  3s 后输出333\n        // 回调地狱\n        // setTimeout(() => {\n        //     console.log(\"111\");\n        //     setTimeout(()=>{\n        //         console.log(\"222\");\n        //         setTimeout(() => {\n        //             console.log(\"333\");\n        //         }, 3000);\n        //     },2000);\n        // }, 1000);\n\n\n        function one() {\n            setTimeout(() => {\n               console.log(\"111\");\n               iterator.next(); \n            }, 1000);\n        }\n        function two() {\n            setTimeout(() => {\n               console.log(\"222\"); \n               iterator.next();\n            }, 2000);\n        }\n        function three() {\n            setTimeout(() => {\n               console.log(\"333\"); \n               iterator.next();\n            }, 3000);\n        }\n        function * gen() {\n            yield one();\n            yield two();\n            yield three();\n        }\n\n        let iterator = gen();\n        iterator.next();\n    </script>\n</body>\n</html>"}],"Post":[{"title":"ES6-ES11笔记","date":"2023-07-04T09:25:00.000Z","updated":"2023-07-04T09:25:00.000Z","keywords":"ES6","description":"ES6 学习笔记","cover":false,"_content":"\n### 1.let\n1、变量不能重<font color=\"#2DC26B\">复声明  </font>\n\n2、块级<font color=\"#2DC26B\">作用域  </font>\n\n3、<font color=\"#2DC26B\">不存在变量提升</font>  \n\n4、不影响作用域链\n\n![[1_let_学习.html]]\n### 2.const\n1、一定要赋初始值\n2、一般常量使用大写\n3、常量的值不能修改\n4、块级作用域\n5、对于数组和对象的元素修改，不算做对常量的修改\n\n![[2_const_学习.html]]\n### 3.变量的解构赋值\n1、数组的解构赋值\n\n```js\n const cA=['a','b','c'];\n      let [d,f,z]=A;\n      console.log(d);\n      console.log(f);\n      console.log(z);\n```\n\n2、对象的解构赋值\n```js\n   const a = {\n          name: \"zhangsan\",\n          age: 66,\n          xxx: function () {\n            console.log(\"55656\");\n          },\n        };\n        let {name,age,xxx}=a;\n        console.log(name);\n        console.log(age);\n        console.log(xxx);\n        xxx();\n```\n\n![[3_变量的解构赋值.html]]\n### 4.模板字符串\n1、声明\n```JS\nlet str = `我是模版字符串`;\nconsole.log(str,typeof str);\n```\n2、内容中可以直接出现换行符\n```JS\nlet str = `\n        <ul>\n            <li>111<li>\n            <li>222<li>\n            <li>333<li>    \n        <ul>\n        `;\n```\n3、变量的拼接\n```JS\nlet lovt = \"aaa\";\nlet out = `${lovt} 666666666666666`;\nconsole.log(out);\n```\n\n![[4_模版字符串.html]]\n### 5.简化对象写法\n```JS\nlet name ='光锥';\n        let chang = function() {\n            console.log('光锥之内皆是命运');\n        }\n\n        const school ={\n            name,\n            chang,\n            impove(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n```\n\n![[5_简化对象写法.html]]\n### 6.箭头函数\n1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值\n2.不能作为构造实例化对象\n3.不能使用 arguments 变量\n4.箭头函数的简写\n1) 省略小括号，当形参有且只有一个的时候\n2) 省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值\n![[6_箭头函数.html]]\n5.练习\n![[7_箭头函数的案例.html]]\n\n### 7.参数默认值\n1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)\n\n\n``` JS\n      function add(a, b, c = 123) {\n        return a + b + c;\n      }\n      console.log(add(1, 2));\n\n```\n  2.与解构赋值结合\n\n```JS\nfunction connrct({host='127.0.0.1',username,password,port}){\n        console.log(host);\n        console.log(username);\n        console.log(password);\n        console.log(port);\n    }\n    connrct({\n        // host:\"百度.com\",\n        username:\"root\",\n        password:\"root\",\n        port:8080\n    });\n```\n\n### 8.rest参数\n1.ES5 获取实参的方式    对象形式\n\n```JS\n function date(){\n            console.log(arguments);\n        }\n        date('a','b','c','d');\n```\n![[Pasted image 20230611231727.png]]\n\n2.rest 参数必须要放到参数最后\n\n```JS\nfunction fn(a,b,...args){\n            console.log(a);\n            console.log(b);\n            console.log(args);\n        }\n        fn(1,2,3,45,6,69,6,88);\n```\n![[Pasted image 20230611231830.png]]\n\n### 9.扩展运算符的认识和应用\n1.认识 扩展运算符     ES6 【...】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】\n\n```JS\n// 声明一个数组\n      const arr = [\"A\", \"C\", \"B\"]; //【数组】\n      // => 'A','C','B'   【参数序列】\n\n      // 声明一个函数\n      function chang() {\n        console.log(arguments);\n      }\n      chang(...arr); //chang('A','C','B')   【参数序列】\n      chang(arr);\n```\n2.扩展运算符的应用\n 1).数组的合并\n \n```JS\n const AArr = [\"A\", \"C\", \"B\"];\n      const BArr = [\"D\", \"E\", \"F\"];\n      const CArr = AArr.concat(AArr);\n      console.log(CArr);\n      const DArr = [...AArr, ...BArr];\n      console.log(DArr);\n```\n2).数组的克隆   浅克隆\n\n```JS\nconst KArr = [\"H\", \"Y\", \"Z\"];\n      const YArr = [...KArr];\n      console.log(YArr);\n```\n\n3).将伪类数组转换为真正的数组\n\n```JS\n    <div></div>\n    <div></div>\n    <div></div>\n\nconst divs=document.querySelectorAll('div');\n      console.log(divs);\n      const divArr = [...divs];\n      console.log(divArr);\n```\n\n\n\n### 10.Symbol的认识与创建\n1.创建Symobl\n\n```JS\n      let s = Symbol();\n      console.log(s);\n      let s1 = Symbol(\"光锥\");\n      let s2 = Symbol(\"光锥\");\n      console.log(s1, s2, s1 == s4);\n```\n\n2  Symbol.for 创建\n\n```JS\nlet s3 = Symbol(\"光锥\");\n      let s4 = Symbol(\"光锥\");\n      console.log(s3, s4, s3 == s4);\n```\n\n3.不能与其他数据进行运算\n\n\n```JS\nlet result = s+1100l;\n      let result = s>1100l;\n      let result = s+s;\n```\n\n\n4.JS 基本数据类型\n\n\n```JS\n USONB  you are so niubility\n      u  undefined\n      s string symbol\n      o  object\n      n number null\n      b boolean\n```\n\n### 11.Symbol创建对象属性\n1.创建方式一\n\n```JS\n// 向对象中添加方法  up  down\n      let game = {\n        up() {\n          console.log(\"原up方法\");\n        },\n        down() {\n          console.log(\"原down方法\");\n        },\n        name: \"光锥\",\n      };\n\n    //   声明一个对象\n    let methods= {\n        up:Symbol(),\n        down:Symbol()\n    }\n    game[methods.up]=function(){\n        console.log('Symbol的up方法');\n    }\n    game[methods.down]=function(){\n        console.log('Symbol的down方法');\n    }\n    console.log(game);\n\n```\n2.创建方式二\n\n```JS\nlet youxi={\n        name:'奇葩',\n        [Symbol('say')]: function(){\n            console.log('Say');\n        },\n        [Symbol('see')]: function(){\n            console.log('see');\n        }\n    }\n    console.log(youxi);\n\n```\n### 12.Symbol内置属性\n1.hasInstance 和 isConcatSpreadable 的认识\n\n```JS\nclass Person{\n        static [Symbol.hasInstance](param){\n          console.log(param)\n          console.log('类型检测');\n          return false;\n        }\n      }\n      let o={};\n      console.log(o instanceof Person);\n\n      const arr=[1,2,3];\n      const arr2=[4,5,6];\n      arr2[Symbol.isConcatSpreadable]=false;//可用于数组内的数组是否展开\n      console.log(arr.concat(arr2));\n```\n2.更多Symbol参数认识\n[Symbol - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\n","source":"_posts/ES6-ES11笔记.md","raw":"---\n\ntitle: ES6-ES11笔记\ndate: 2023-07-04 17:25\nupdated: 2023-07-04 17:25\ntags: JS ES6\ncategories: JS \nkeywords: ES6\ndescription: ES6 学习笔记\ncover: \n\n---\n\n### 1.let\n1、变量不能重<font color=\"#2DC26B\">复声明  </font>\n\n2、块级<font color=\"#2DC26B\">作用域  </font>\n\n3、<font color=\"#2DC26B\">不存在变量提升</font>  \n\n4、不影响作用域链\n\n![[1_let_学习.html]]\n### 2.const\n1、一定要赋初始值\n2、一般常量使用大写\n3、常量的值不能修改\n4、块级作用域\n5、对于数组和对象的元素修改，不算做对常量的修改\n\n![[2_const_学习.html]]\n### 3.变量的解构赋值\n1、数组的解构赋值\n\n```js\n const cA=['a','b','c'];\n      let [d,f,z]=A;\n      console.log(d);\n      console.log(f);\n      console.log(z);\n```\n\n2、对象的解构赋值\n```js\n   const a = {\n          name: \"zhangsan\",\n          age: 66,\n          xxx: function () {\n            console.log(\"55656\");\n          },\n        };\n        let {name,age,xxx}=a;\n        console.log(name);\n        console.log(age);\n        console.log(xxx);\n        xxx();\n```\n\n![[3_变量的解构赋值.html]]\n### 4.模板字符串\n1、声明\n```JS\nlet str = `我是模版字符串`;\nconsole.log(str,typeof str);\n```\n2、内容中可以直接出现换行符\n```JS\nlet str = `\n        <ul>\n            <li>111<li>\n            <li>222<li>\n            <li>333<li>    \n        <ul>\n        `;\n```\n3、变量的拼接\n```JS\nlet lovt = \"aaa\";\nlet out = `${lovt} 666666666666666`;\nconsole.log(out);\n```\n\n![[4_模版字符串.html]]\n### 5.简化对象写法\n```JS\nlet name ='光锥';\n        let chang = function() {\n            console.log('光锥之内皆是命运');\n        }\n\n        const school ={\n            name,\n            chang,\n            impove(){\n                console.log('超越光锥才能超越命运');\n            }\n        }\n```\n\n![[5_简化对象写法.html]]\n### 6.箭头函数\n1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值\n2.不能作为构造实例化对象\n3.不能使用 arguments 变量\n4.箭头函数的简写\n1) 省略小括号，当形参有且只有一个的时候\n2) 省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值\n![[6_箭头函数.html]]\n5.练习\n![[7_箭头函数的案例.html]]\n\n### 7.参数默认值\n1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)\n\n\n``` JS\n      function add(a, b, c = 123) {\n        return a + b + c;\n      }\n      console.log(add(1, 2));\n\n```\n  2.与解构赋值结合\n\n```JS\nfunction connrct({host='127.0.0.1',username,password,port}){\n        console.log(host);\n        console.log(username);\n        console.log(password);\n        console.log(port);\n    }\n    connrct({\n        // host:\"百度.com\",\n        username:\"root\",\n        password:\"root\",\n        port:8080\n    });\n```\n\n### 8.rest参数\n1.ES5 获取实参的方式    对象形式\n\n```JS\n function date(){\n            console.log(arguments);\n        }\n        date('a','b','c','d');\n```\n![[Pasted image 20230611231727.png]]\n\n2.rest 参数必须要放到参数最后\n\n```JS\nfunction fn(a,b,...args){\n            console.log(a);\n            console.log(b);\n            console.log(args);\n        }\n        fn(1,2,3,45,6,69,6,88);\n```\n![[Pasted image 20230611231830.png]]\n\n### 9.扩展运算符的认识和应用\n1.认识 扩展运算符     ES6 【...】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】\n\n```JS\n// 声明一个数组\n      const arr = [\"A\", \"C\", \"B\"]; //【数组】\n      // => 'A','C','B'   【参数序列】\n\n      // 声明一个函数\n      function chang() {\n        console.log(arguments);\n      }\n      chang(...arr); //chang('A','C','B')   【参数序列】\n      chang(arr);\n```\n2.扩展运算符的应用\n 1).数组的合并\n \n```JS\n const AArr = [\"A\", \"C\", \"B\"];\n      const BArr = [\"D\", \"E\", \"F\"];\n      const CArr = AArr.concat(AArr);\n      console.log(CArr);\n      const DArr = [...AArr, ...BArr];\n      console.log(DArr);\n```\n2).数组的克隆   浅克隆\n\n```JS\nconst KArr = [\"H\", \"Y\", \"Z\"];\n      const YArr = [...KArr];\n      console.log(YArr);\n```\n\n3).将伪类数组转换为真正的数组\n\n```JS\n    <div></div>\n    <div></div>\n    <div></div>\n\nconst divs=document.querySelectorAll('div');\n      console.log(divs);\n      const divArr = [...divs];\n      console.log(divArr);\n```\n\n\n\n### 10.Symbol的认识与创建\n1.创建Symobl\n\n```JS\n      let s = Symbol();\n      console.log(s);\n      let s1 = Symbol(\"光锥\");\n      let s2 = Symbol(\"光锥\");\n      console.log(s1, s2, s1 == s4);\n```\n\n2  Symbol.for 创建\n\n```JS\nlet s3 = Symbol(\"光锥\");\n      let s4 = Symbol(\"光锥\");\n      console.log(s3, s4, s3 == s4);\n```\n\n3.不能与其他数据进行运算\n\n\n```JS\nlet result = s+1100l;\n      let result = s>1100l;\n      let result = s+s;\n```\n\n\n4.JS 基本数据类型\n\n\n```JS\n USONB  you are so niubility\n      u  undefined\n      s string symbol\n      o  object\n      n number null\n      b boolean\n```\n\n### 11.Symbol创建对象属性\n1.创建方式一\n\n```JS\n// 向对象中添加方法  up  down\n      let game = {\n        up() {\n          console.log(\"原up方法\");\n        },\n        down() {\n          console.log(\"原down方法\");\n        },\n        name: \"光锥\",\n      };\n\n    //   声明一个对象\n    let methods= {\n        up:Symbol(),\n        down:Symbol()\n    }\n    game[methods.up]=function(){\n        console.log('Symbol的up方法');\n    }\n    game[methods.down]=function(){\n        console.log('Symbol的down方法');\n    }\n    console.log(game);\n\n```\n2.创建方式二\n\n```JS\nlet youxi={\n        name:'奇葩',\n        [Symbol('say')]: function(){\n            console.log('Say');\n        },\n        [Symbol('see')]: function(){\n            console.log('see');\n        }\n    }\n    console.log(youxi);\n\n```\n### 12.Symbol内置属性\n1.hasInstance 和 isConcatSpreadable 的认识\n\n```JS\nclass Person{\n        static [Symbol.hasInstance](param){\n          console.log(param)\n          console.log('类型检测');\n          return false;\n        }\n      }\n      let o={};\n      console.log(o instanceof Person);\n\n      const arr=[1,2,3];\n      const arr2=[4,5,6];\n      arr2[Symbol.isConcatSpreadable]=false;//可用于数组内的数组是否展开\n      console.log(arr.concat(arr2));\n```\n2.更多Symbol参数认识\n[Symbol - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\n","slug":"ES6-ES11笔记","published":1,"_id":"cljv8uxm000017ci025mb0fux","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-let\"><a href=\"#1-let\" class=\"headerlink\" title=\"1.let\"></a>1.let</h3><p>1、变量不能重<font color=\"#2DC26B\">复声明  </font></p>\n<p>2、块级<font color=\"#2DC26B\">作用域  </font></p>\n<p>3、<font color=\"#2DC26B\">不存在变量提升</font>  </p>\n<p>4、不影响作用域链</p>\n<p>![[1_let_学习.html]]</p>\n<h3 id=\"2-const\"><a href=\"#2-const\" class=\"headerlink\" title=\"2.const\"></a>2.const</h3><p>1、一定要赋初始值<br>2、一般常量使用大写<br>3、常量的值不能修改<br>4、块级作用域<br>5、对于数组和对象的元素修改，不算做对常量的修改</p>\n<p>![[2_const_学习.html]]</p>\n<h3 id=\"3-变量的解构赋值\"><a href=\"#3-变量的解构赋值\" class=\"headerlink\" title=\"3.变量的解构赋值\"></a>3.变量的解构赋值</h3><p>1、数组的解构赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cA=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">let</span> [d,f,z]=A;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(z);</span><br></pre></td></tr></table></figure>\n\n<p>2、对象的解构赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&quot;zhangsan&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">age</span>: <span class=\"number\">66</span>,</span><br><span class=\"line\">          <span class=\"attr\">xxx</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;55656&quot;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;name,age,xxx&#125;=a;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xxx);</span><br><span class=\"line\">        <span class=\"title function_\">xxx</span>();</span><br></pre></td></tr></table></figure>\n\n<p>![[3_变量的解构赋值.html]]</p>\n<h3 id=\"4-模板字符串\"><a href=\"#4-模板字符串\" class=\"headerlink\" title=\"4.模板字符串\"></a>4.模板字符串</h3><p>1、声明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`我是模版字符串`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str,<span class=\"keyword\">typeof</span> str);</span><br></pre></td></tr></table></figure>\n<p>2、内容中可以直接出现换行符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;111&lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;222&lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;333&lt;li&gt;    </span></span><br><span class=\"line\"><span class=\"string\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>;</span><br></pre></td></tr></table></figure>\n<p>3、变量的拼接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lovt = <span class=\"string\">&quot;aaa&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> out = <span class=\"string\">`<span class=\"subst\">$&#123;lovt&#125;</span> 666666666666666`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(out);</span><br></pre></td></tr></table></figure>\n\n<p>![[4_模版字符串.html]]</p>\n<h3 id=\"5-简化对象写法\"><a href=\"#5-简化对象写法\" class=\"headerlink\" title=\"5.简化对象写法\"></a>5.简化对象写法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name =<span class=\"string\">&#x27;光锥&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> chang = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;光锥之内皆是命运&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> school =&#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            chang,</span><br><span class=\"line\">            <span class=\"title function_\">impove</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;超越光锥才能超越命运&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>![[5_简化对象写法.html]]</p>\n<h3 id=\"6-箭头函数\"><a href=\"#6-箭头函数\" class=\"headerlink\" title=\"6.箭头函数\"></a>6.箭头函数</h3><p>1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值<br>2.不能作为构造实例化对象<br>3.不能使用 arguments 变量<br>4.箭头函数的简写</p>\n<ol>\n<li>省略小括号，当形参有且只有一个的时候</li>\n<li>省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值<br>![[6_箭头函数.html]]<br>5.练习<br>![[7_箭头函数的案例.html]]</li>\n</ol>\n<h3 id=\"7-参数默认值\"><a href=\"#7-参数默认值\" class=\"headerlink\" title=\"7.参数默认值\"></a>7.参数默认值</h3><p>1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b, c = <span class=\"number\">123</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  2.与解构赋值结合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">connrct</span>(<span class=\"params\">&#123;host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,username,password,port&#125;</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(host);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(username);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(password);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">connrct</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// host:&quot;百度.com&quot;,</span></span><br><span class=\"line\">        <span class=\"attr\">username</span>:<span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>:<span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>:<span class=\"number\">8080</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-rest参数\"><a href=\"#8-rest参数\" class=\"headerlink\" title=\"8.rest参数\"></a>8.rest参数</h3><p>1.ES5 获取实参的方式    对象形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">date</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">           <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"title function_\">date</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>![[Pasted image 20230611231727.png]]</p>\n<p>2.rest 参数必须要放到参数最后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a,b,...args</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">45</span>,<span class=\"number\">6</span>,<span class=\"number\">69</span>,<span class=\"number\">6</span>,<span class=\"number\">88</span>);</span><br></pre></td></tr></table></figure>\n<p>![[Pasted image 20230611231830.png]]</p>\n<h3 id=\"9-扩展运算符的认识和应用\"><a href=\"#9-扩展运算符的认识和应用\" class=\"headerlink\" title=\"9.扩展运算符的认识和应用\"></a>9.扩展运算符的认识和应用</h3><p>1.认识 扩展运算符     ES6 【…】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个数组</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;B&quot;</span>]; <span class=\"comment\">//【数组】</span></span><br><span class=\"line\">      <span class=\"comment\">// =&gt; &#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;   【参数序列】</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 声明一个函数</span></span><br><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">chang</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">chang</span>(...arr); <span class=\"comment\">//chang(&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;)   【参数序列】</span></span><br><span class=\"line\">      <span class=\"title function_\">chang</span>(arr);</span><br></pre></td></tr></table></figure>\n<p>2.扩展运算符的应用<br> 1).数组的合并\n </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AArr</span> = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;B&quot;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">BArr</span> = [<span class=\"string\">&quot;D&quot;</span>, <span class=\"string\">&quot;E&quot;</span>, <span class=\"string\">&quot;F&quot;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">CArr</span> = <span class=\"title class_\">AArr</span>.<span class=\"title function_\">concat</span>(<span class=\"title class_\">AArr</span>);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">CArr</span>);</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">DArr</span> = [...<span class=\"title class_\">AArr</span>, ...<span class=\"title class_\">BArr</span>];</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">DArr</span>);</span><br></pre></td></tr></table></figure>\n<p>2).数组的克隆   浅克隆</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">KArr</span> = [<span class=\"string\">&quot;H&quot;</span>, <span class=\"string\">&quot;Y&quot;</span>, <span class=\"string\">&quot;Z&quot;</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title class_\">YArr</span> = [...<span class=\"title class_\">KArr</span>];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">YArr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>3).将伪类数组转换为真正的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> divs=<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divs);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> divArr = [...divs];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divArr);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-Symbol的认识与创建\"><a href=\"#10-Symbol的认识与创建\" class=\"headerlink\" title=\"10.Symbol的认识与创建\"></a>10.Symbol的认识与创建</h3><p>1.创建Symobl</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s);</span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1, s2, s1 == s4);</span><br></pre></td></tr></table></figure>\n\n<p>2  Symbol.for 创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s3 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> s4 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s3, s4, s3 == s4);</span><br></pre></td></tr></table></figure>\n\n<p>3.不能与其他数据进行运算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = s+1100l;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = s&gt;1100l;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = s+s;</span><br></pre></td></tr></table></figure>\n\n\n<p>4.JS 基本数据类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">USONB</span>  you are so niubility</span><br><span class=\"line\">     u  <span class=\"literal\">undefined</span></span><br><span class=\"line\">     s string symbol</span><br><span class=\"line\">     o  object</span><br><span class=\"line\">     n number <span class=\"literal\">null</span></span><br><span class=\"line\">     b boolean</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-Symbol创建对象属性\"><a href=\"#11-Symbol创建对象属性\" class=\"headerlink\" title=\"11.Symbol创建对象属性\"></a>11.Symbol创建对象属性</h3><p>1.创建方式一</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向对象中添加方法  up  down</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> game = &#123;</span><br><span class=\"line\">        <span class=\"title function_\">up</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;原up方法&quot;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">down</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;原down方法&quot;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;光锥&quot;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//   声明一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> methods= &#123;</span><br><span class=\"line\">        <span class=\"attr\">up</span>:<span class=\"title class_\">Symbol</span>(),</span><br><span class=\"line\">        <span class=\"attr\">down</span>:<span class=\"title class_\">Symbol</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    game[methods.<span class=\"property\">up</span>]=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Symbol的up方法&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    game[methods.<span class=\"property\">down</span>]=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Symbol的down方法&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(game);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.创建方式二</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> youxi=&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;奇葩&#x27;</span>,</span><br><span class=\"line\">        [<span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;say&#x27;</span>)]: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Say&#x27;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [<span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;see&#x27;</span>)]: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;see&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(youxi);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"12-Symbol内置属性\"><a href=\"#12-Symbol内置属性\" class=\"headerlink\" title=\"12.Symbol内置属性\"></a>12.Symbol内置属性</h3><p>1.hasInstance 和 isConcatSpreadable 的认识</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> [<span class=\"title class_\">Symbol</span>.<span class=\"property\">hasInstance</span>](param)&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(param)</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;类型检测&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> o=&#123;&#125;;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">      arr2[<span class=\"title class_\">Symbol</span>.<span class=\"property\">isConcatSpreadable</span>]=<span class=\"literal\">false</span>;<span class=\"comment\">//可用于数组内的数组是否展开</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">concat</span>(arr2));</span><br></pre></td></tr></table></figure>\n<p>2.更多Symbol参数认识<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol - JavaScript | MDN</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"excerpt":"","more":"<h3 id=\"1-let\"><a href=\"#1-let\" class=\"headerlink\" title=\"1.let\"></a>1.let</h3><p>1、变量不能重<font color=\"#2DC26B\">复声明  </font></p>\n<p>2、块级<font color=\"#2DC26B\">作用域  </font></p>\n<p>3、<font color=\"#2DC26B\">不存在变量提升</font>  </p>\n<p>4、不影响作用域链</p>\n<p>![[1_let_学习.html]]</p>\n<h3 id=\"2-const\"><a href=\"#2-const\" class=\"headerlink\" title=\"2.const\"></a>2.const</h3><p>1、一定要赋初始值<br>2、一般常量使用大写<br>3、常量的值不能修改<br>4、块级作用域<br>5、对于数组和对象的元素修改，不算做对常量的修改</p>\n<p>![[2_const_学习.html]]</p>\n<h3 id=\"3-变量的解构赋值\"><a href=\"#3-变量的解构赋值\" class=\"headerlink\" title=\"3.变量的解构赋值\"></a>3.变量的解构赋值</h3><p>1、数组的解构赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cA=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">let</span> [d,f,z]=A;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(z);</span><br></pre></td></tr></table></figure>\n\n<p>2、对象的解构赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&quot;zhangsan&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">age</span>: <span class=\"number\">66</span>,</span><br><span class=\"line\">          <span class=\"attr\">xxx</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;55656&quot;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;name,age,xxx&#125;=a;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xxx);</span><br><span class=\"line\">        <span class=\"title function_\">xxx</span>();</span><br></pre></td></tr></table></figure>\n\n<p>![[3_变量的解构赋值.html]]</p>\n<h3 id=\"4-模板字符串\"><a href=\"#4-模板字符串\" class=\"headerlink\" title=\"4.模板字符串\"></a>4.模板字符串</h3><p>1、声明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`我是模版字符串`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str,<span class=\"keyword\">typeof</span> str);</span><br></pre></td></tr></table></figure>\n<p>2、内容中可以直接出现换行符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;111&lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;222&lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;li&gt;333&lt;li&gt;    </span></span><br><span class=\"line\"><span class=\"string\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>;</span><br></pre></td></tr></table></figure>\n<p>3、变量的拼接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lovt = <span class=\"string\">&quot;aaa&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> out = <span class=\"string\">`<span class=\"subst\">$&#123;lovt&#125;</span> 666666666666666`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(out);</span><br></pre></td></tr></table></figure>\n\n<p>![[4_模版字符串.html]]</p>\n<h3 id=\"5-简化对象写法\"><a href=\"#5-简化对象写法\" class=\"headerlink\" title=\"5.简化对象写法\"></a>5.简化对象写法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name =<span class=\"string\">&#x27;光锥&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> chang = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;光锥之内皆是命运&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> school =&#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            chang,</span><br><span class=\"line\">            <span class=\"title function_\">impove</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;超越光锥才能超越命运&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>![[5_简化对象写法.html]]</p>\n<h3 id=\"6-箭头函数\"><a href=\"#6-箭头函数\" class=\"headerlink\" title=\"6.箭头函数\"></a>6.箭头函数</h3><p>1.this 是静态的  this 始终指向函数声明是所在的作用域下的this的值<br>2.不能作为构造实例化对象<br>3.不能使用 arguments 变量<br>4.箭头函数的简写</p>\n<ol>\n<li>省略小括号，当形参有且只有一个的时候</li>\n<li>省略花括号，当代码体只有一条语句的时候，此时 return 必须省略 而且语句执行结果就是函数的返回值<br>![[6_箭头函数.html]]<br>5.练习<br>![[7_箭头函数的案例.html]]</li>\n</ol>\n<h3 id=\"7-参数默认值\"><a href=\"#7-参数默认值\" class=\"headerlink\" title=\"7.参数默认值\"></a>7.参数默认值</h3><p>1.形参初始值 具有默认值的参数，一般位置要靠后(潜规则)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b, c = <span class=\"number\">123</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  2.与解构赋值结合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">connrct</span>(<span class=\"params\">&#123;host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,username,password,port&#125;</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(host);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(username);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(password);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">connrct</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// host:&quot;百度.com&quot;,</span></span><br><span class=\"line\">        <span class=\"attr\">username</span>:<span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>:<span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>:<span class=\"number\">8080</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-rest参数\"><a href=\"#8-rest参数\" class=\"headerlink\" title=\"8.rest参数\"></a>8.rest参数</h3><p>1.ES5 获取实参的方式    对象形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">date</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">           <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"title function_\">date</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>![[Pasted image 20230611231727.png]]</p>\n<p>2.rest 参数必须要放到参数最后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a,b,...args</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">45</span>,<span class=\"number\">6</span>,<span class=\"number\">69</span>,<span class=\"number\">6</span>,<span class=\"number\">88</span>);</span><br></pre></td></tr></table></figure>\n<p>![[Pasted image 20230611231830.png]]</p>\n<h3 id=\"9-扩展运算符的认识和应用\"><a href=\"#9-扩展运算符的认识和应用\" class=\"headerlink\" title=\"9.扩展运算符的认识和应用\"></a>9.扩展运算符的认识和应用</h3><p>1.认识 扩展运算符     ES6 【…】 扩展运算符 能将【数组】转换为逗号分隔的【参数序列】</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个数组</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;B&quot;</span>]; <span class=\"comment\">//【数组】</span></span><br><span class=\"line\">      <span class=\"comment\">// =&gt; &#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;   【参数序列】</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 声明一个函数</span></span><br><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">chang</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">chang</span>(...arr); <span class=\"comment\">//chang(&#x27;A&#x27;,&#x27;C&#x27;,&#x27;B&#x27;)   【参数序列】</span></span><br><span class=\"line\">      <span class=\"title function_\">chang</span>(arr);</span><br></pre></td></tr></table></figure>\n<p>2.扩展运算符的应用<br> 1).数组的合并\n </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AArr</span> = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;B&quot;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">BArr</span> = [<span class=\"string\">&quot;D&quot;</span>, <span class=\"string\">&quot;E&quot;</span>, <span class=\"string\">&quot;F&quot;</span>];</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">CArr</span> = <span class=\"title class_\">AArr</span>.<span class=\"title function_\">concat</span>(<span class=\"title class_\">AArr</span>);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">CArr</span>);</span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"title class_\">DArr</span> = [...<span class=\"title class_\">AArr</span>, ...<span class=\"title class_\">BArr</span>];</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">DArr</span>);</span><br></pre></td></tr></table></figure>\n<p>2).数组的克隆   浅克隆</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">KArr</span> = [<span class=\"string\">&quot;H&quot;</span>, <span class=\"string\">&quot;Y&quot;</span>, <span class=\"string\">&quot;Z&quot;</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title class_\">YArr</span> = [...<span class=\"title class_\">KArr</span>];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">YArr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>3).将伪类数组转换为真正的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> divs=<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divs);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> divArr = [...divs];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divArr);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-Symbol的认识与创建\"><a href=\"#10-Symbol的认识与创建\" class=\"headerlink\" title=\"10.Symbol的认识与创建\"></a>10.Symbol的认识与创建</h3><p>1.创建Symobl</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s);</span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1, s2, s1 == s4);</span><br></pre></td></tr></table></figure>\n\n<p>2  Symbol.for 创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s3 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> s4 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;光锥&quot;</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s3, s4, s3 == s4);</span><br></pre></td></tr></table></figure>\n\n<p>3.不能与其他数据进行运算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = s+1100l;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = s&gt;1100l;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = s+s;</span><br></pre></td></tr></table></figure>\n\n\n<p>4.JS 基本数据类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">USONB</span>  you are so niubility</span><br><span class=\"line\">     u  <span class=\"literal\">undefined</span></span><br><span class=\"line\">     s string symbol</span><br><span class=\"line\">     o  object</span><br><span class=\"line\">     n number <span class=\"literal\">null</span></span><br><span class=\"line\">     b boolean</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-Symbol创建对象属性\"><a href=\"#11-Symbol创建对象属性\" class=\"headerlink\" title=\"11.Symbol创建对象属性\"></a>11.Symbol创建对象属性</h3><p>1.创建方式一</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向对象中添加方法  up  down</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> game = &#123;</span><br><span class=\"line\">        <span class=\"title function_\">up</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;原up方法&quot;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">down</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;原down方法&quot;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;光锥&quot;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//   声明一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> methods= &#123;</span><br><span class=\"line\">        <span class=\"attr\">up</span>:<span class=\"title class_\">Symbol</span>(),</span><br><span class=\"line\">        <span class=\"attr\">down</span>:<span class=\"title class_\">Symbol</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    game[methods.<span class=\"property\">up</span>]=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Symbol的up方法&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    game[methods.<span class=\"property\">down</span>]=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Symbol的down方法&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(game);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.创建方式二</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> youxi=&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;奇葩&#x27;</span>,</span><br><span class=\"line\">        [<span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;say&#x27;</span>)]: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Say&#x27;</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [<span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;see&#x27;</span>)]: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;see&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(youxi);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"12-Symbol内置属性\"><a href=\"#12-Symbol内置属性\" class=\"headerlink\" title=\"12.Symbol内置属性\"></a>12.Symbol内置属性</h3><p>1.hasInstance 和 isConcatSpreadable 的认识</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> [<span class=\"title class_\">Symbol</span>.<span class=\"property\">hasInstance</span>](param)&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(param)</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;类型检测&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> o=&#123;&#125;;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> arr2=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">      arr2[<span class=\"title class_\">Symbol</span>.<span class=\"property\">isConcatSpreadable</span>]=<span class=\"literal\">false</span>;<span class=\"comment\">//可用于数组内的数组是否展开</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">concat</span>(arr2));</span><br></pre></td></tr></table></figure>\n<p>2.更多Symbol参数认识<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol - JavaScript | MDN</a></p>\n"},{"title":"图床","date":"2023-07-04T14:07:00.000Z","updated":"2023-07-04T14:07:00.000Z","keywords":"GitHub","description":"GitHub 图床的搭建","cover":"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/%E4%B8%8B%E8%BD%BD.jpg","_content":"\n### 1.下载PicGo PicGo\n下载地址: https://github.com/Molunerfinn/picgo/releases\n\n### 2.创建GitHub仓库\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOEIH.png)\n点自己头像，点Setting\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOx0S.png)\n\n再点Developer settings\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOzTg.jpg)\n\n再点Personal access tokens\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXpkQ.png)\n\n填写内容，记得勾选repo\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXCfs.png)\n \n复制生成的token,（再关闭网页这个token就没法复制了）\n\n### 配置PicGo\n\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230704220025.png)\n\n### 加速访问\n\n大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？\n\n这时候我们就可以用 [jsDelivr](https://link.zhihu.com/?target=https%3A//www.jsdelivr.com/) 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；\n\n> `https://cdn.jsdelivr.net/gh/用户名/仓库名`","source":"_posts/图床.md","raw":"---\n\ntitle: 图床\ndate: 2023-07-04 22:07\nupdated: 2023-07-04 22:07\ntags:  GitHub\ncategories:  GitHub\nkeywords: GitHub\ndescription:  GitHub 图床的搭建\ncover:  https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/%E4%B8%8B%E8%BD%BD.jpg\n\n---\n\n### 1.下载PicGo PicGo\n下载地址: https://github.com/Molunerfinn/picgo/releases\n\n### 2.创建GitHub仓库\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOEIH.png)\n点自己头像，点Setting\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOx0S.png)\n\n再点Developer settings\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOzTg.jpg)\n\n再点Personal access tokens\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXpkQ.png)\n\n填写内容，记得勾选repo\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXCfs.png)\n \n复制生成的token,（再关闭网页这个token就没法复制了）\n\n### 配置PicGo\n\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230704220025.png)\n\n### 加速访问\n\n大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？\n\n这时候我们就可以用 [jsDelivr](https://link.zhihu.com/?target=https%3A//www.jsdelivr.com/) 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；\n\n> `https://cdn.jsdelivr.net/gh/用户名/仓库名`","slug":"图床","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cljv8uxm400037ci07dpz32la","content":"<h3 id=\"1-下载PicGo-PicGo\"><a href=\"#1-下载PicGo-PicGo\" class=\"headerlink\" title=\"1.下载PicGo PicGo\"></a>1.下载PicGo PicGo</h3><p>下载地址: <a href=\"https://github.com/Molunerfinn/picgo/releases\">https://github.com/Molunerfinn/picgo/releases</a></p>\n<h3 id=\"2-创建GitHub仓库\"><a href=\"#2-创建GitHub仓库\" class=\"headerlink\" title=\"2.创建GitHub仓库\"></a>2.创建GitHub仓库</h3><p><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOEIH.png\"><br>点自己头像，点Setting<br><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOx0S.png\"></p>\n<p>再点Developer settings<br><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOzTg.jpg\"></p>\n<p>再点Personal access tokens<br><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXpkQ.png\"></p>\n<p>填写内容，记得勾选repo<br><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXCfs.png\"></p>\n<p>复制生成的token,（再关闭网页这个token就没法复制了）</p>\n<h3 id=\"配置PicGo\"><a href=\"#配置PicGo\" class=\"headerlink\" title=\"配置PicGo\"></a>配置PicGo</h3><p><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230704220025.png\"></p>\n<h3 id=\"加速访问\"><a href=\"#加速访问\" class=\"headerlink\" title=\"加速访问\"></a>加速访问</h3><p>大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？</p>\n<p>这时候我们就可以用 <a href=\"https://link.zhihu.com/?target=https://www.jsdelivr.com/\">jsDelivr</a> 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；</p>\n<blockquote>\n<p><code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code></p>\n</blockquote>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h3 id=\"1-下载PicGo-PicGo\"><a href=\"#1-下载PicGo-PicGo\" class=\"headerlink\" title=\"1.下载PicGo PicGo\"></a>1.下载PicGo PicGo</h3><p>下载地址: <a href=\"https://github.com/Molunerfinn/picgo/releases\">https://github.com/Molunerfinn/picgo/releases</a></p>\n<h3 id=\"2-创建GitHub仓库\"><a href=\"#2-创建GitHub仓库\" class=\"headerlink\" title=\"2.创建GitHub仓库\"></a>2.创建GitHub仓库</h3><p><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOEIH.png\"><br>点自己头像，点Setting<br><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOx0S.png\"></p>\n<p>再点Developer settings<br><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nOzTg.jpg\"></p>\n<p>再点Personal access tokens<br><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXpkQ.png\"></p>\n<p>填写内容，记得勾选repo<br><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/8nXCfs.png\"></p>\n<p>复制生成的token,（再关闭网页这个token就没法复制了）</p>\n<h3 id=\"配置PicGo\"><a href=\"#配置PicGo\" class=\"headerlink\" title=\"配置PicGo\"></a>配置PicGo</h3><p><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230704220025.png\"></p>\n<h3 id=\"加速访问\"><a href=\"#加速访问\" class=\"headerlink\" title=\"加速访问\"></a>加速访问</h3><p>大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？</p>\n<p>这时候我们就可以用 <a href=\"https://link.zhihu.com/?target=https://www.jsdelivr.com/\">jsDelivr</a> 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；</p>\n<blockquote>\n<p><code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code></p>\n</blockquote>\n"},{"title":"常用","date":"2023-07-04T14:07:00.000Z","updated":"2023-07-04T14:07:00.000Z","keywords":"GitHub","description":"比较常用的知识点","_content":"\n### 1.git\n1.添加子模块\ngit submodule add https://github.com/YuLong-cmd/hexo-theme-butterfly.git   butterfly\n1. 新增子模块\n向一个项目中添加子模块\n\n```git\ngit submodule add https://github.com/yyy/xxx.git\n```\n\n之后会 clone 该子模块对应的远程项目文件到本地父项目目录下的同名文件夹中（./xxx/），父项目下也会多一个叫 .gitmodules 的文件，内容大致为：\n```git\n[submodule \"xxx\"]\n\tpath = xxx\n\turl = git@github.com:yyy/xxx.git\n```\n如果存在多个子模块，则会继续向该文件中追加与上面相同格式的内容；\n\n同时父项目下的 .git 目录中也会新增 /modules/xxx/ 目录，里面的内容对应子模块仓库中原有的 .git 目录中的文件，此时虽然子模块目录下的 .git 依然存在，但是已经由一个文件夹变成了文件，内容为：\n```git\ngitdir: ../.git/modules/xxx\n```\n即指向了父项目的 .git/modules/xxx 目录；如果运行 git config --list 查看项目的配置，也会发现多了类似下面两行的内容：\n```git\nsubmodule.xxx.url=git@github.com:yyy/xxx.git\nsubmodule.xxx.active=true\n```\n如果修改 submodule.xxx.url 的值，则会覆盖 .gitmodules 文件中对应的 url 值；","source":"_posts/常用.md","raw":"---\n\ntitle: 常用\ndate: 2023-07-04 22:07\nupdated: 2023-07-04 22:07\ntags:  GitHub\ncategories:  GitHub\nkeywords: GitHub\ndescription:  比较常用的知识点\n\n---\n\n### 1.git\n1.添加子模块\ngit submodule add https://github.com/YuLong-cmd/hexo-theme-butterfly.git   butterfly\n1. 新增子模块\n向一个项目中添加子模块\n\n```git\ngit submodule add https://github.com/yyy/xxx.git\n```\n\n之后会 clone 该子模块对应的远程项目文件到本地父项目目录下的同名文件夹中（./xxx/），父项目下也会多一个叫 .gitmodules 的文件，内容大致为：\n```git\n[submodule \"xxx\"]\n\tpath = xxx\n\turl = git@github.com:yyy/xxx.git\n```\n如果存在多个子模块，则会继续向该文件中追加与上面相同格式的内容；\n\n同时父项目下的 .git 目录中也会新增 /modules/xxx/ 目录，里面的内容对应子模块仓库中原有的 .git 目录中的文件，此时虽然子模块目录下的 .git 依然存在，但是已经由一个文件夹变成了文件，内容为：\n```git\ngitdir: ../.git/modules/xxx\n```\n即指向了父项目的 .git/modules/xxx 目录；如果运行 git config --list 查看项目的配置，也会发现多了类似下面两行的内容：\n```git\nsubmodule.xxx.url=git@github.com:yyy/xxx.git\nsubmodule.xxx.active=true\n```\n如果修改 submodule.xxx.url 的值，则会覆盖 .gitmodules 文件中对应的 url 值；","slug":"常用","published":1,"_id":"cljv8uxm700077ci0427edlph","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-git\"><a href=\"#1-git\" class=\"headerlink\" title=\"1.git\"></a>1.git</h3><p>1.添加子模块<br>git submodule add <a href=\"https://github.com/YuLong-cmd/hexo-theme-butterfly.git\">https://github.com/YuLong-cmd/hexo-theme-butterfly.git</a>   butterfly</p>\n<ol>\n<li>新增子模块<br>向一个项目中添加子模块</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https://github.com/yyy/xxx.git</span><br></pre></td></tr></table></figure>\n\n<p>之后会 clone 该子模块对应的远程项目文件到本地父项目目录下的同名文件夹中（.&#x2F;xxx&#x2F;），父项目下也会多一个叫 .gitmodules 的文件，内容大致为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;xxx&quot;]</span><br><span class=\"line\">\tpath = xxx</span><br><span class=\"line\">\turl = git@github.com:yyy/xxx.git</span><br></pre></td></tr></table></figure>\n<p>如果存在多个子模块，则会继续向该文件中追加与上面相同格式的内容；</p>\n<p>同时父项目下的 .git 目录中也会新增 &#x2F;modules&#x2F;xxx&#x2F; 目录，里面的内容对应子模块仓库中原有的 .git 目录中的文件，此时虽然子模块目录下的 .git 依然存在，但是已经由一个文件夹变成了文件，内容为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitdir: ../.git/modules/xxx</span><br></pre></td></tr></table></figure>\n<p>即指向了父项目的 .git&#x2F;modules&#x2F;xxx 目录；如果运行 git config –list 查看项目的配置，也会发现多了类似下面两行的内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">submodule.xxx.url=git@github.com:yyy/xxx.git</span><br><span class=\"line\">submodule.xxx.active=true</span><br></pre></td></tr></table></figure>\n<p>如果修改 submodule.xxx.url 的值，则会覆盖 .gitmodules 文件中对应的 url 值；</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<h3 id=\"1-git\"><a href=\"#1-git\" class=\"headerlink\" title=\"1.git\"></a>1.git</h3><p>1.添加子模块<br>git submodule add <a href=\"https://github.com/YuLong-cmd/hexo-theme-butterfly.git\">https://github.com/YuLong-cmd/hexo-theme-butterfly.git</a>   butterfly</p>\n<ol>\n<li>新增子模块<br>向一个项目中添加子模块</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https://github.com/yyy/xxx.git</span><br></pre></td></tr></table></figure>\n\n<p>之后会 clone 该子模块对应的远程项目文件到本地父项目目录下的同名文件夹中（.&#x2F;xxx&#x2F;），父项目下也会多一个叫 .gitmodules 的文件，内容大致为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;xxx&quot;]</span><br><span class=\"line\">\tpath = xxx</span><br><span class=\"line\">\turl = git@github.com:yyy/xxx.git</span><br></pre></td></tr></table></figure>\n<p>如果存在多个子模块，则会继续向该文件中追加与上面相同格式的内容；</p>\n<p>同时父项目下的 .git 目录中也会新增 &#x2F;modules&#x2F;xxx&#x2F; 目录，里面的内容对应子模块仓库中原有的 .git 目录中的文件，此时虽然子模块目录下的 .git 依然存在，但是已经由一个文件夹变成了文件，内容为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitdir: ../.git/modules/xxx</span><br></pre></td></tr></table></figure>\n<p>即指向了父项目的 .git&#x2F;modules&#x2F;xxx 目录；如果运行 git config –list 查看项目的配置，也会发现多了类似下面两行的内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">submodule.xxx.url=git@github.com:yyy/xxx.git</span><br><span class=\"line\">submodule.xxx.active=true</span><br></pre></td></tr></table></figure>\n<p>如果修改 submodule.xxx.url 的值，则会覆盖 .gitmodules 文件中对应的 url 值；</p>\n"},{"title":"SpringBoot基础入门","date":"2023-07-11T14:37:00.000Z","updated":"2023-07-11T14:37:00.000Z","keywords":"SpringBoot","description":"SpringBoot 基础入门  学习","_content":"\n## SpringBoot笔记\n\n### 缺失 ：\n\nmeven------本地meven{\n\n使用阿里云下载，及默认JDK\n\n}\n\n## 重要注解\n\n#### 1.@RestController{\n\n```\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Controller\n@ResponseBody   //声明返回的为字符串 而不是要跳转的路径\n```\n\n}\n\n#### 2.@ResponseBody的作用其实是将java对象转为json格式的数据。\n\n@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。\n注意：在使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中，他的效果等同于通过response对象输出指定格式的数据。\n\n@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用【也就是AJAX】。\n注意：在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。 比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。\n\n### 1.基础案例 Holle Word\n\n#### 01基本流程\n\n1.创建maven工程\n\n2.引入依赖\n\n```java\n<!--    使用springboot开发-->\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.5.RELEASE</version>\n    </parent>\n\n    <dependencies>\n<!--        web场景依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n\n```\n\n\n\n3.创建主程序\n\n```java\n/**\n * 主程序类\n * @SpringBootApplication 声明这是一个springboot应用\n * */\n@SpringBootApplication\npublic class HMin {\n    public static void main(String[] args) {\n        SpringApplication.run(HMin.class,args);\n    }\n}\n```\n\n\n\n4.编写业务\n\n```java\n@RestController\npublic class HelloController {\n\n    @RequestMapping(\"hello\")\n    public String handle01(){\n        return \"hello Springboot 2\";\n    }\n}\n```\n\n\n\n5.测试\n\n直接运行main方法\n\n6.简化配置\n\n配置都在application.properties文件之中进行\n\n```\nserver.port=8889\n```\n\n7.简化部署\n\n```xml\n <build>\n<!--        用于将项目进行打包 打包的类型在上边设置     <packaging>jar</packaging>-->\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n把项目打成jar包，直接在目标服务器执行即可。\n\n\n\n### 2.了解自动配置\n\n#### 2.1依赖管理\n\n#####  2.1.1父项目做依赖管理\n\n ```xml\n 依赖管理    \n <parent>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-parent</artifactId>\n         <version>2.3.4.RELEASE</version>\n </parent>\n \n 他的父项目\n  <parent>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-dependencies</artifactId>\n     <version>2.3.4.RELEASE</version>\n   </parent>\n \n 几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制\n ```\n\n#####  2.1.2开发导入starter场景启动器\n\n~~~xml\n1、见到很多 spring-boot-starter-* ： *就某种场景\n2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入\n3、SpringBoot所有支持的场景\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\n4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。\n5、所有场景启动器最底层的依赖\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter</artifactId>\n  <version>2.3.4.RELEASE</version>\n  <scope>compile</scope>\n</dependency>\n~~~\n\n#####  2.1.3无需关注版本号，自动版本仲裁\n\n```\n1、引入依赖默认都可以不写版本\n2、引入非版本仲裁的jar，要写版本号。\n```\n\n##### 2.1.4 可以修改默认版本号\n\n```xml\n1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。\n2、在当前项目里面重写配置\n    <properties>\n        <mysql.version>5.1.43</mysql.version>\n    </properties>\n```\n\n#### 2.2自动配置\n\n##### 2.2.1自动配好Tomcat\n\n- - 引入Tomcat依赖。\n\n  - 配置Tomcat\n\n    ~~~xml\n    <dependency>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter-tomcat</artifactId>\n          <version>2.3.4.RELEASE</version>\n          <scope>compile</scope>\n        </dependency>\n    ~~~\n\n    ##### 2.2.2自动配好SpringMVC\n\n    - - 引入SpringMVC全套组件\n      - 自动配好SpringMVC常用组件（功能）\n\n    ##### 2.2.3自动配好Web常见功能，如：字符编码问题\n\n    - - SpringBoot帮我们配置好了所有web开发的常见场景\n\n    ##### 2.2.4默认的包结构\n\n    - - 主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来\n      - 无需以前的包扫描配置\n      - 想要改变扫描路径，**@SpringBootApplication(scanBasePackages=\"com.atguigu\")**\n\n    - - - 或者@ComponentScan 指定扫描路径\n\n```java\n@SpringBootApplication\n等同于\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\"com.atguigu.boot\")\n```\n\n\n\n##### 2.2.5各种配置拥有默认值\n\n- - 默认配置最终都是映射到某个类上，如：MultipartProperties\n  - 配置文件的值最终会绑定每个类上，这个类会在容器中创建对象\n\n##### 2.2.6按需加载所有自动配置项\n\n- - 非常多的starter\n  - 引入了哪些场景这个场景的自动配置才会开启\n  - SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面\n\n### 3.容器功能\n\n#### 3.1组件添加\n\n##### 1.Configuration详解\n\n- 基本使用\n- **Full模式与Lite模式**\n\n- - 示例\n  - 最佳实战\n\n- - - 配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断\n    - 配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式\n\n```java\n#############################基础类示例######################################################\n/**\n * 宠物类\n * */\npublic class Pet {\n    private String name;\n\n    public Pet() {\n    }\n\n    public Pet(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"Pet{\" +\n                \"name='\" + name + '\\'' +\n                '}';\n    }\n}\n\n\n/**\n * 用户类\n * */\npublic class User {\n    private String name;\n    private Integer age;\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", pet=\" + pet +\n                '}';\n    }\n\n    private Pet pet;\n\n\n    public User(String name,Integer age) {\n        this.name = name;\n        this.age = age;\n    }\n    public User() {\n\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public Pet getPet() {\n        return pet;\n    }\n\n    public void setPet(Pet pet) {\n        this.pet = pet;\n    }\n}\n\n\n#############################Configuration使用示例######################################################\n\n/***\n * 配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\n *2.配置类本身也是组件\n * 3.proxyBeanMethods：代理bean的方法\n * 为true则不管创建多少都会调用容器里的它们本身是相同的\n * 为false则相反并且不走代理\n *\n * full（proxyBeanMethods = true）、lite（proxyBeanMethods = false）\n * 组件依赖\n */\n@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件\npublic class bean {\n\n    /**\n     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象\n     */\n    @Bean\n    //给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例\n    public User user00(){\n        User zhangsan =new User(\"张三\",18);\n        //user组件依赖了pet组件\n        zhangsan.setPet(tomPet());\n        return zhangsan ;\n    }\n\n    @Bean(\"tomm\")\n    public Pet tomPet(){\n        return  new Pet(\"tom\");\n    }\n\n}\n\n################################@Configuration测试代码如下########################################\n\n/**\n * 主程序类\n * @SpringBootApplication 声明这是一个springboot应用\n * */\n//@SpringBootApplication(scanBasePackages = \"com.yu\")\n\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\"com.yu\")\npublic class HMin {\n    public static void main(String[] args) {\n//        1.返回我们IOC容器\n        ConfigurableApplicationContext run = SpringApplication.run(HMin.class, args);\n\n//        2.查看容器里面的组件\n        String[] names=run.getBeanDefinitionNames();\n        for (String name:names) {\n            System.out.println(name);\n        }\n\n//        3.从容器之中获取组件\n        Pet tom01 =run.getBean(\"tomm\", Pet.class);\n        Pet tom02 =run.getBean(\"tomm\", Pet.class);\n        System.out.println(\"组件\"+(tom01==tom02));\n\n//        4.com.yu.config.bean$$EnhancerBySpringCGLIB$$b06a1497@88a8218\n        bean bean=run.getBean(bean.class);\n        System.out.println(bean);\n\n        //如果@Configuration(proxyBeanMethods = true) 代理对象调用方法。springboot总会检查这个组件是否在容器里\n//        保持组件单实例\n        User user =bean.user00();\n        User user1=bean.user00();\n        System.out.println(user == user1);\n\n        User user2=run.getBean(\"user00\",User.class);\n        Pet tomm =run.getBean(\"tomm\",Pet.class);\n\n        System.out.println(\"用户的宠物：\"+(user2.getPet()==tomm));\n\n    }\n}\n```\n\n##### 2.@Bean、@Component、@Controller、@Service、@Repository\n\n@Component   \t表示这是一个组件\n\n@Controller\t\t\t表示这是一个控制器\n\n@Service  \t\t\t\t表示这是一个业务逻辑组件\n\n@Repository\t\t\t表示这是数据库层组件\n\n##### 3.@ComponentScan、@Import\n\n@ComponentScan\t\t\t表示包扫描能够指定包扫描规则\n\n@Import{\n\n```\n4.@Import({User.class, DBHelper.class})\n *      给容器中自动创建出这两个类型的组件，(User.class)默认组组件的名字是全类名\n @Import({User.class, DBHelper.class})\n@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件\npublic class bean {\n}\n```\n\n}\n\n@Import 高级用法： https://www.bilibili.com/video/BV1gW411W7wy?p=8\n\n##### 4.@Conditional  条件注解\n\n条件装配：满足Conditional指定的条件，则进行组件注入或其他操作\n\n![image-20220507135500299](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220507135500299.png)\n\n```java\n=====================测试条件装配==========================\n@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件\n//@ConditionalOnBean(name = \"tomm\")   //若容器之中有tomm组件则运行整个bean类\n@ConditionalOnMissingBean(name = \"tomm\")   //若容器之中没有tomm组件则运行整个bean类\npublic class bean {\n\n    /**\n     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象\n     */\n    @Bean\n    //给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例\n    public User user00(){\n        User zhangsan =new User(\"张三\",18);\n        //user组件依赖了pet组件\n        zhangsan.setPet(tomPet());\n        return zhangsan ;\n    }\n\n    @Bean(\"tomm\")\n    public Pet tomPet(){\n        return  new Pet(\"tom\");\n    }\n\n}\n=====================主程序测试==========================\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\"com.yu\")\npublic class HMin {\n    public static void main(String[] args) {\n//        1.返回我们IOC容器\n        ConfigurableApplicationContext run = SpringApplication.run(HMin.class, args);\n\n//        2.查看容器里面的组件\n        String[] names=run.getBeanDefinitionNames();\n        for (String name:names) {\n            System.out.println(name);\n        }\n  //        测试条件 ConditionalOnMissingBean  ConditionalOnBean  注解所需\n        boolean tom = run.containsBean(\"tomm\");//判断容器之中有无某个组件\n        System.out.println(\"容器之中Tom组件：\"+tom);\n\n        boolean user00 = run.containsBean(\"user00\");\n        System.out.println(\"容器之中user01组件\"+user00);\n    }\n}\n=====================输出结果==========================\n容器之中Tom组件：true\n容器之中user01组件true\n```\n\n#### 3.2 原生配置文件引入\n\n##### 1、@ImportResource     主要是为了兼容第三方  注入IOC\n\n```xml\n======================bean.xml=========================\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n<!--    原生spring给容器添加组件-->\n    <bean id=\"aaa\" class=\"com.yu.bean.User\">\n        <property name=\"name\" value=\"zhangsan\"></property>\n        <property name=\"age\" value=\"18\"></property>\n    </bean>\n    <bean id=\"ccc\" class=\"com.yu.bean.Pet\">\n        <property name=\"name\" value=\"tomm\"></property>\n    </bean>\n</beans>\n```\n\n```java\n======================配置类=================\n@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件\n@ImportResource(\"classpath:bean.xml\")   //只用写一次，随便一个配置类中就好\npublic class bean {\n    \n}\n======================主程序类中  测试  =================\n        boolean aaa = run.containsBean(\"aaa\");\n        boolean ccc = run.containsBean(\"ccc\");\n        System.out.println(\"haha：\"+aaa);//true\n        System.out.println(\"hehe：\"+ccc);//true\n```\n\n#### 3.3 配置绑定\n\n​\t不使用springboot框架：\t\t\t如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；\n\n```JAVA\npublic class getProperties {\n     public static void main(String[] args) throws FileNotFoundException, IOException {\n         Properties pps = new Properties();\n         pps.load(new FileInputStream(\"a.properties\"));\n         Enumeration enum1 = pps.propertyNames();//得到配置文件的名字\n         while(enum1.hasMoreElements()) {\n             String strKey = (String) enum1.nextElement();\n             String strValue = pps.getProperty(strKey);\n             System.out.println(strKey + \"=\" + strValue);\n             //封装到JavaBean。\n         }\n     }\n }\n```\n\n##### 1、@ConfigurationProperties     \n\n​\t\t\t\t\t\t**@ConfigurationProperties(prefix = \"mycar\") //与配置文件中的  mycar 前缀相互绑定**\n\n##### 2.  @EnableConfigurationProperties        @ConfigurationProperties\n\n~~~java\n############################# Car类 示例######################################################\n/**\n * 只有在容器中的组件，才会拥有springboot提供的强大功能\n */\n@ConfigurationProperties(prefix = \"mycar\") //与配置文件中的  mycar 前缀相互绑定\npublic class Car {\n    private String brand;  //品牌\n    private Integer price;  //价格\n    @Override\n    public String toString() {\n        return \"Car{\" +\n                \"brand='\" + brand + '\\'' +\n                \", price=\" + price +\n                '}';\n    }\n    public String getBrand() {\n        return brand;\n    }\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n    public Integer getPrice() {\n        return price;\n    }\n    public void setPrice(Integer price) {\n        this.price = price;\n    }\n}\n#############################@ConfigurationProperties示例######################################################\n@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件  \n@EnableConfigurationProperties(Car.class)//1.开启Car配置绑定功能。2.把这个Car这个组件自动注册到容器中\npublic class bean {\n    /**\n     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象\n     */\n    @Bean\n    //给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例\n    public User user00(){\n        User zhangsan =new User(\"张三\",18);\n        //user组件依赖了pet组件\n        zhangsan.setPet(tomPet());\n        return zhangsan ;\n    }\n    @Bean(\"tomm\")\n    public Pet tomPet(){\n        return  new Pet(\"tom\");\n    }\n}\n#############################   application.properties   配置文件示例######################################################\nserver.port=9999\nmycar.brand=yu\nmycar.price=10000\n############################# 配置对外API 控制层 示例######################################################\n@RestController\npublic class HelloController {\n    @Autowired\n    Car car;\n    @RequestMapping(\"/car\")\n    public Car car(){\n        return car;\n    }\n}\n~~~\n\n##### 3. @Component         @ConfigurationProperties\n\n~~~java\n#############################@ConfigurationProperties示例######################################################\n\n/**\n * 只有在容器中的组件，才会拥有springboot提供的强大功能\n */\n@Component //将其加入到容器之中\n@ConfigurationProperties(prefix = \"mycar\") //与配置文件中的  mycar 前缀相互绑定\npublic class Car {\n    private String brand;  //品牌\n    private Integer price;  //价格\n    @Override\n    public String toString() {\n        return \"Car{\" +\n                \"brand='\" + brand + '\\'' +\n                \", price=\" + price +\n                '}';\n    }\n    public String getBrand() {\n        return brand;\n    }\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n    public Integer getPrice() {\n        return price;\n    }\n    public void setPrice(Integer price) {\n        this.price = price;\n    }\n}\n#############################   application.properties   配置文件示例######################################################\nserver.port=9999\nmycar.brand=yu\nmycar.price=10000\n############################# 配置对外API 控制层 示例######################################################\n@RestController\npublic class HelloController {\n    @Autowired\n    Car car;\n    @RequestMapping(\"/car\")\n    public Car car(){\n        return car;\n    }\n}\n~~~\n\n运行结果截图：\n\n​\t![image-20220507160301194](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220507160301194.png)\n\n### 4.自动配置原理入门\n\n#### 4.1引导加载自动配置类\n\n~~~java\n===================SpringBootApplication注解内的内容==========================\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n\t\t@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\npublic @interface SpringBootApplication{}\n\n\n======================\n    \n~~~\n\n\n\n##### 1.@SpringBootConfiguration\n\n@Configuration。代表当前是一个配置类\n\n##### 2.ComponentScan\n\n指定扫描哪些包，Spring注解；\n\n例：@ComponentScan(\"com.yu\")\n\n##### 3、@EnableAutoConfiguration\n\n~~~java\n@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {}\n~~~\n\n###### 1、@AutoConfigurationPackage\n\n自动配置包？指定了默认的包规则\n\n~~~java\n@Import(AutoConfigurationPackages.Registrar.class)  //给容器中导入一个组件\npublic @interface AutoConfigurationPackage {}\n\n//利用Registrar给容器中导入一系列组件\n//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。\n\n~~~\n\n###### 2、@Import(AutoConfigurationImportSelector.class)\n\n~~~java\n1、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件\n2、调用List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类\n3、利用工厂加载 Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件\n4、从META-INF/spring.factories位置来加载一个文件。\n\t默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件\n    spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories\n    \n~~~\n\n![image-20220508211138147](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508211138147.png)\n\n~~~xml\n文件里面写死了spring-boot一启动就要给容器中加载的所有配置类\nspring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\\norg.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration\n\n~~~\n\n#### 4.2按需开启自动配置项\n\n~~~java\n虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration\n按照条件装配规则（@Conditional），最终会按需配置。\n~~~\n\n#### 4.3、修改默认配置\n\n~~~java\n        @Bean\n\t\t@ConditionalOnBean(MultipartResolver.class)  //容器中有这个类型组件\n\t\t@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) //容器中没有这个名字 multipartResolver 的组件\n\t\tpublic MultipartResolver multipartResolver(MultipartResolver resolver) {\n            //给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。\n            //SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范\n\t\t\t// Detect if the user has created a MultipartResolver but named it incorrectly\n\t\t\treturn resolver;\n\t\t}\n给容器中加入了文件上传解析器；\n\n~~~\n\nSpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先\n\n~~~java\n@Bean\n\t@ConditionalOnMissingBean\n\tpublic CharacterEncodingFilter characterEncodingFilter() {\n    }\n~~~\n\n总结：\n\n- SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration\n- 每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定\n- 生效的配置类就会给容器中装配很多组件\n- 只要容器中有这些组件，相当于这些功能就有了\n- 定制化配置\n\n- - 用户直接自己@Bean替换底层的组件   必须在有@Configuration(proxyBeanMethods = true)   的类里才能配置\n  - 用户去看这个组件是获取的配置文件什么值就去修改。\n\n**xxxxxAutoConfiguration ---> 组件  --->** **xxxxProperties里面拿值  ----> application.properties**\n\n#### 4.4 最佳实践\n\n- 引入场景依赖\n\n- - https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\n\n- 查看自动配置了哪些（选做）\n\n- - 自己分析，引入场景对应的自动配置一般都生效了\n  - 配置文件中debug=true开启自动配置报告。Negative（不生效）\\Positive（生效）\n\n- 是否需要修改\n\n- - 参照文档修改配置项\n\n- - - https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties\n    - 自己分析。xxxxProperties绑定了配置文件的哪些。\n\n- - 自定义加入或者替换组件\n\n- - - @Bean、@Component。。。\n\n- - 自定义器  **XXXXXCustomizer**；\n  - ......\n\n#### 4.5 开发小技巧\n\n##### 1  Lombok\n\n简化JavaBean开发\n\n~~~xml\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n\n\nidea中搜索安装lombok插件\n~~~\n\n~~~java\n===============================简化JavaBean开发===================================\n@NoArgsConstructor\n//@AllArgsConstructor\n@Data\n@ToString\n@EqualsAndHashCode\npublic class User {\n\n    private String name;\n    private Integer age;\n\n    private Pet pet;\n\n    public User(String name,Integer age){\n        this.name = name;\n        this.age = age;\n    }\n\n\n}\n\n\n\n================================简化日志开发===================================\n@Slf4j\n@RestController\npublic class HelloController {\n    @RequestMapping(\"/hello\")\n    public String handle01(@RequestParam(\"name\") String name){\n        \n        log.info(\"请求进来了....\");\n        \n        return \"Hello, Spring Boot 2!\"+\"你好：\"+name;\n    }\n}\n~~~\n\n##### 2  dev-tools\n\n~~~xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <optional>true</optional>\n        </dependency>\n~~~\n\n##### 3  Spring Initailizr（项目初始化向导）\n\n###### 0、选择我们需要的开发场景\n\n![image-20220508225801210](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225801210.png)\n\n###### 1.自动依赖引入\n\n![image-20220508225827517](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225827517.png)\n\n\n\n###### 2.自动创建项目结构\n\n![image-20220508225857016](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225857016.png)\n\n###### 3.自动编写好主配置类\n\n![image-20220508225921631](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225921631.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/SpringBoot基础入门.md","raw":"---\n\ntitle: SpringBoot基础入门\ndate: 2023-07-11 22:37\nupdated: 2023-07-11 22:37\ntags: SpringBoot\ncategories: SpringBoot\nkeywords: SpringBoot\ndescription: SpringBoot 基础入门  学习\n\n---\n\n## SpringBoot笔记\n\n### 缺失 ：\n\nmeven------本地meven{\n\n使用阿里云下载，及默认JDK\n\n}\n\n## 重要注解\n\n#### 1.@RestController{\n\n```\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Controller\n@ResponseBody   //声明返回的为字符串 而不是要跳转的路径\n```\n\n}\n\n#### 2.@ResponseBody的作用其实是将java对象转为json格式的数据。\n\n@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。\n注意：在使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中，他的效果等同于通过response对象输出指定格式的数据。\n\n@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用【也就是AJAX】。\n注意：在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。 比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。\n\n### 1.基础案例 Holle Word\n\n#### 01基本流程\n\n1.创建maven工程\n\n2.引入依赖\n\n```java\n<!--    使用springboot开发-->\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.5.RELEASE</version>\n    </parent>\n\n    <dependencies>\n<!--        web场景依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n\n```\n\n\n\n3.创建主程序\n\n```java\n/**\n * 主程序类\n * @SpringBootApplication 声明这是一个springboot应用\n * */\n@SpringBootApplication\npublic class HMin {\n    public static void main(String[] args) {\n        SpringApplication.run(HMin.class,args);\n    }\n}\n```\n\n\n\n4.编写业务\n\n```java\n@RestController\npublic class HelloController {\n\n    @RequestMapping(\"hello\")\n    public String handle01(){\n        return \"hello Springboot 2\";\n    }\n}\n```\n\n\n\n5.测试\n\n直接运行main方法\n\n6.简化配置\n\n配置都在application.properties文件之中进行\n\n```\nserver.port=8889\n```\n\n7.简化部署\n\n```xml\n <build>\n<!--        用于将项目进行打包 打包的类型在上边设置     <packaging>jar</packaging>-->\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n把项目打成jar包，直接在目标服务器执行即可。\n\n\n\n### 2.了解自动配置\n\n#### 2.1依赖管理\n\n#####  2.1.1父项目做依赖管理\n\n ```xml\n 依赖管理    \n <parent>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-parent</artifactId>\n         <version>2.3.4.RELEASE</version>\n </parent>\n \n 他的父项目\n  <parent>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-dependencies</artifactId>\n     <version>2.3.4.RELEASE</version>\n   </parent>\n \n 几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制\n ```\n\n#####  2.1.2开发导入starter场景启动器\n\n~~~xml\n1、见到很多 spring-boot-starter-* ： *就某种场景\n2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入\n3、SpringBoot所有支持的场景\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\n4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。\n5、所有场景启动器最底层的依赖\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter</artifactId>\n  <version>2.3.4.RELEASE</version>\n  <scope>compile</scope>\n</dependency>\n~~~\n\n#####  2.1.3无需关注版本号，自动版本仲裁\n\n```\n1、引入依赖默认都可以不写版本\n2、引入非版本仲裁的jar，要写版本号。\n```\n\n##### 2.1.4 可以修改默认版本号\n\n```xml\n1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。\n2、在当前项目里面重写配置\n    <properties>\n        <mysql.version>5.1.43</mysql.version>\n    </properties>\n```\n\n#### 2.2自动配置\n\n##### 2.2.1自动配好Tomcat\n\n- - 引入Tomcat依赖。\n\n  - 配置Tomcat\n\n    ~~~xml\n    <dependency>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter-tomcat</artifactId>\n          <version>2.3.4.RELEASE</version>\n          <scope>compile</scope>\n        </dependency>\n    ~~~\n\n    ##### 2.2.2自动配好SpringMVC\n\n    - - 引入SpringMVC全套组件\n      - 自动配好SpringMVC常用组件（功能）\n\n    ##### 2.2.3自动配好Web常见功能，如：字符编码问题\n\n    - - SpringBoot帮我们配置好了所有web开发的常见场景\n\n    ##### 2.2.4默认的包结构\n\n    - - 主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来\n      - 无需以前的包扫描配置\n      - 想要改变扫描路径，**@SpringBootApplication(scanBasePackages=\"com.atguigu\")**\n\n    - - - 或者@ComponentScan 指定扫描路径\n\n```java\n@SpringBootApplication\n等同于\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\"com.atguigu.boot\")\n```\n\n\n\n##### 2.2.5各种配置拥有默认值\n\n- - 默认配置最终都是映射到某个类上，如：MultipartProperties\n  - 配置文件的值最终会绑定每个类上，这个类会在容器中创建对象\n\n##### 2.2.6按需加载所有自动配置项\n\n- - 非常多的starter\n  - 引入了哪些场景这个场景的自动配置才会开启\n  - SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面\n\n### 3.容器功能\n\n#### 3.1组件添加\n\n##### 1.Configuration详解\n\n- 基本使用\n- **Full模式与Lite模式**\n\n- - 示例\n  - 最佳实战\n\n- - - 配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断\n    - 配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式\n\n```java\n#############################基础类示例######################################################\n/**\n * 宠物类\n * */\npublic class Pet {\n    private String name;\n\n    public Pet() {\n    }\n\n    public Pet(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"Pet{\" +\n                \"name='\" + name + '\\'' +\n                '}';\n    }\n}\n\n\n/**\n * 用户类\n * */\npublic class User {\n    private String name;\n    private Integer age;\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", pet=\" + pet +\n                '}';\n    }\n\n    private Pet pet;\n\n\n    public User(String name,Integer age) {\n        this.name = name;\n        this.age = age;\n    }\n    public User() {\n\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public Pet getPet() {\n        return pet;\n    }\n\n    public void setPet(Pet pet) {\n        this.pet = pet;\n    }\n}\n\n\n#############################Configuration使用示例######################################################\n\n/***\n * 配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\n *2.配置类本身也是组件\n * 3.proxyBeanMethods：代理bean的方法\n * 为true则不管创建多少都会调用容器里的它们本身是相同的\n * 为false则相反并且不走代理\n *\n * full（proxyBeanMethods = true）、lite（proxyBeanMethods = false）\n * 组件依赖\n */\n@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件\npublic class bean {\n\n    /**\n     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象\n     */\n    @Bean\n    //给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例\n    public User user00(){\n        User zhangsan =new User(\"张三\",18);\n        //user组件依赖了pet组件\n        zhangsan.setPet(tomPet());\n        return zhangsan ;\n    }\n\n    @Bean(\"tomm\")\n    public Pet tomPet(){\n        return  new Pet(\"tom\");\n    }\n\n}\n\n################################@Configuration测试代码如下########################################\n\n/**\n * 主程序类\n * @SpringBootApplication 声明这是一个springboot应用\n * */\n//@SpringBootApplication(scanBasePackages = \"com.yu\")\n\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\"com.yu\")\npublic class HMin {\n    public static void main(String[] args) {\n//        1.返回我们IOC容器\n        ConfigurableApplicationContext run = SpringApplication.run(HMin.class, args);\n\n//        2.查看容器里面的组件\n        String[] names=run.getBeanDefinitionNames();\n        for (String name:names) {\n            System.out.println(name);\n        }\n\n//        3.从容器之中获取组件\n        Pet tom01 =run.getBean(\"tomm\", Pet.class);\n        Pet tom02 =run.getBean(\"tomm\", Pet.class);\n        System.out.println(\"组件\"+(tom01==tom02));\n\n//        4.com.yu.config.bean$$EnhancerBySpringCGLIB$$b06a1497@88a8218\n        bean bean=run.getBean(bean.class);\n        System.out.println(bean);\n\n        //如果@Configuration(proxyBeanMethods = true) 代理对象调用方法。springboot总会检查这个组件是否在容器里\n//        保持组件单实例\n        User user =bean.user00();\n        User user1=bean.user00();\n        System.out.println(user == user1);\n\n        User user2=run.getBean(\"user00\",User.class);\n        Pet tomm =run.getBean(\"tomm\",Pet.class);\n\n        System.out.println(\"用户的宠物：\"+(user2.getPet()==tomm));\n\n    }\n}\n```\n\n##### 2.@Bean、@Component、@Controller、@Service、@Repository\n\n@Component   \t表示这是一个组件\n\n@Controller\t\t\t表示这是一个控制器\n\n@Service  \t\t\t\t表示这是一个业务逻辑组件\n\n@Repository\t\t\t表示这是数据库层组件\n\n##### 3.@ComponentScan、@Import\n\n@ComponentScan\t\t\t表示包扫描能够指定包扫描规则\n\n@Import{\n\n```\n4.@Import({User.class, DBHelper.class})\n *      给容器中自动创建出这两个类型的组件，(User.class)默认组组件的名字是全类名\n @Import({User.class, DBHelper.class})\n@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件\npublic class bean {\n}\n```\n\n}\n\n@Import 高级用法： https://www.bilibili.com/video/BV1gW411W7wy?p=8\n\n##### 4.@Conditional  条件注解\n\n条件装配：满足Conditional指定的条件，则进行组件注入或其他操作\n\n![image-20220507135500299](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220507135500299.png)\n\n```java\n=====================测试条件装配==========================\n@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件\n//@ConditionalOnBean(name = \"tomm\")   //若容器之中有tomm组件则运行整个bean类\n@ConditionalOnMissingBean(name = \"tomm\")   //若容器之中没有tomm组件则运行整个bean类\npublic class bean {\n\n    /**\n     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象\n     */\n    @Bean\n    //给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例\n    public User user00(){\n        User zhangsan =new User(\"张三\",18);\n        //user组件依赖了pet组件\n        zhangsan.setPet(tomPet());\n        return zhangsan ;\n    }\n\n    @Bean(\"tomm\")\n    public Pet tomPet(){\n        return  new Pet(\"tom\");\n    }\n\n}\n=====================主程序测试==========================\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\"com.yu\")\npublic class HMin {\n    public static void main(String[] args) {\n//        1.返回我们IOC容器\n        ConfigurableApplicationContext run = SpringApplication.run(HMin.class, args);\n\n//        2.查看容器里面的组件\n        String[] names=run.getBeanDefinitionNames();\n        for (String name:names) {\n            System.out.println(name);\n        }\n  //        测试条件 ConditionalOnMissingBean  ConditionalOnBean  注解所需\n        boolean tom = run.containsBean(\"tomm\");//判断容器之中有无某个组件\n        System.out.println(\"容器之中Tom组件：\"+tom);\n\n        boolean user00 = run.containsBean(\"user00\");\n        System.out.println(\"容器之中user01组件\"+user00);\n    }\n}\n=====================输出结果==========================\n容器之中Tom组件：true\n容器之中user01组件true\n```\n\n#### 3.2 原生配置文件引入\n\n##### 1、@ImportResource     主要是为了兼容第三方  注入IOC\n\n```xml\n======================bean.xml=========================\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n<!--    原生spring给容器添加组件-->\n    <bean id=\"aaa\" class=\"com.yu.bean.User\">\n        <property name=\"name\" value=\"zhangsan\"></property>\n        <property name=\"age\" value=\"18\"></property>\n    </bean>\n    <bean id=\"ccc\" class=\"com.yu.bean.Pet\">\n        <property name=\"name\" value=\"tomm\"></property>\n    </bean>\n</beans>\n```\n\n```java\n======================配置类=================\n@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件\n@ImportResource(\"classpath:bean.xml\")   //只用写一次，随便一个配置类中就好\npublic class bean {\n    \n}\n======================主程序类中  测试  =================\n        boolean aaa = run.containsBean(\"aaa\");\n        boolean ccc = run.containsBean(\"ccc\");\n        System.out.println(\"haha：\"+aaa);//true\n        System.out.println(\"hehe：\"+ccc);//true\n```\n\n#### 3.3 配置绑定\n\n​\t不使用springboot框架：\t\t\t如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；\n\n```JAVA\npublic class getProperties {\n     public static void main(String[] args) throws FileNotFoundException, IOException {\n         Properties pps = new Properties();\n         pps.load(new FileInputStream(\"a.properties\"));\n         Enumeration enum1 = pps.propertyNames();//得到配置文件的名字\n         while(enum1.hasMoreElements()) {\n             String strKey = (String) enum1.nextElement();\n             String strValue = pps.getProperty(strKey);\n             System.out.println(strKey + \"=\" + strValue);\n             //封装到JavaBean。\n         }\n     }\n }\n```\n\n##### 1、@ConfigurationProperties     \n\n​\t\t\t\t\t\t**@ConfigurationProperties(prefix = \"mycar\") //与配置文件中的  mycar 前缀相互绑定**\n\n##### 2.  @EnableConfigurationProperties        @ConfigurationProperties\n\n~~~java\n############################# Car类 示例######################################################\n/**\n * 只有在容器中的组件，才会拥有springboot提供的强大功能\n */\n@ConfigurationProperties(prefix = \"mycar\") //与配置文件中的  mycar 前缀相互绑定\npublic class Car {\n    private String brand;  //品牌\n    private Integer price;  //价格\n    @Override\n    public String toString() {\n        return \"Car{\" +\n                \"brand='\" + brand + '\\'' +\n                \", price=\" + price +\n                '}';\n    }\n    public String getBrand() {\n        return brand;\n    }\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n    public Integer getPrice() {\n        return price;\n    }\n    public void setPrice(Integer price) {\n        this.price = price;\n    }\n}\n#############################@ConfigurationProperties示例######################################################\n@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件  \n@EnableConfigurationProperties(Car.class)//1.开启Car配置绑定功能。2.把这个Car这个组件自动注册到容器中\npublic class bean {\n    /**\n     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象\n     */\n    @Bean\n    //给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例\n    public User user00(){\n        User zhangsan =new User(\"张三\",18);\n        //user组件依赖了pet组件\n        zhangsan.setPet(tomPet());\n        return zhangsan ;\n    }\n    @Bean(\"tomm\")\n    public Pet tomPet(){\n        return  new Pet(\"tom\");\n    }\n}\n#############################   application.properties   配置文件示例######################################################\nserver.port=9999\nmycar.brand=yu\nmycar.price=10000\n############################# 配置对外API 控制层 示例######################################################\n@RestController\npublic class HelloController {\n    @Autowired\n    Car car;\n    @RequestMapping(\"/car\")\n    public Car car(){\n        return car;\n    }\n}\n~~~\n\n##### 3. @Component         @ConfigurationProperties\n\n~~~java\n#############################@ConfigurationProperties示例######################################################\n\n/**\n * 只有在容器中的组件，才会拥有springboot提供的强大功能\n */\n@Component //将其加入到容器之中\n@ConfigurationProperties(prefix = \"mycar\") //与配置文件中的  mycar 前缀相互绑定\npublic class Car {\n    private String brand;  //品牌\n    private Integer price;  //价格\n    @Override\n    public String toString() {\n        return \"Car{\" +\n                \"brand='\" + brand + '\\'' +\n                \", price=\" + price +\n                '}';\n    }\n    public String getBrand() {\n        return brand;\n    }\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n    public Integer getPrice() {\n        return price;\n    }\n    public void setPrice(Integer price) {\n        this.price = price;\n    }\n}\n#############################   application.properties   配置文件示例######################################################\nserver.port=9999\nmycar.brand=yu\nmycar.price=10000\n############################# 配置对外API 控制层 示例######################################################\n@RestController\npublic class HelloController {\n    @Autowired\n    Car car;\n    @RequestMapping(\"/car\")\n    public Car car(){\n        return car;\n    }\n}\n~~~\n\n运行结果截图：\n\n​\t![image-20220507160301194](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220507160301194.png)\n\n### 4.自动配置原理入门\n\n#### 4.1引导加载自动配置类\n\n~~~java\n===================SpringBootApplication注解内的内容==========================\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n\t\t@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\npublic @interface SpringBootApplication{}\n\n\n======================\n    \n~~~\n\n\n\n##### 1.@SpringBootConfiguration\n\n@Configuration。代表当前是一个配置类\n\n##### 2.ComponentScan\n\n指定扫描哪些包，Spring注解；\n\n例：@ComponentScan(\"com.yu\")\n\n##### 3、@EnableAutoConfiguration\n\n~~~java\n@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {}\n~~~\n\n###### 1、@AutoConfigurationPackage\n\n自动配置包？指定了默认的包规则\n\n~~~java\n@Import(AutoConfigurationPackages.Registrar.class)  //给容器中导入一个组件\npublic @interface AutoConfigurationPackage {}\n\n//利用Registrar给容器中导入一系列组件\n//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。\n\n~~~\n\n###### 2、@Import(AutoConfigurationImportSelector.class)\n\n~~~java\n1、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件\n2、调用List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类\n3、利用工厂加载 Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件\n4、从META-INF/spring.factories位置来加载一个文件。\n\t默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件\n    spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories\n    \n~~~\n\n![image-20220508211138147](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508211138147.png)\n\n~~~xml\n文件里面写死了spring-boot一启动就要给容器中加载的所有配置类\nspring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\\norg.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration\n\n~~~\n\n#### 4.2按需开启自动配置项\n\n~~~java\n虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration\n按照条件装配规则（@Conditional），最终会按需配置。\n~~~\n\n#### 4.3、修改默认配置\n\n~~~java\n        @Bean\n\t\t@ConditionalOnBean(MultipartResolver.class)  //容器中有这个类型组件\n\t\t@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) //容器中没有这个名字 multipartResolver 的组件\n\t\tpublic MultipartResolver multipartResolver(MultipartResolver resolver) {\n            //给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。\n            //SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范\n\t\t\t// Detect if the user has created a MultipartResolver but named it incorrectly\n\t\t\treturn resolver;\n\t\t}\n给容器中加入了文件上传解析器；\n\n~~~\n\nSpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先\n\n~~~java\n@Bean\n\t@ConditionalOnMissingBean\n\tpublic CharacterEncodingFilter characterEncodingFilter() {\n    }\n~~~\n\n总结：\n\n- SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration\n- 每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定\n- 生效的配置类就会给容器中装配很多组件\n- 只要容器中有这些组件，相当于这些功能就有了\n- 定制化配置\n\n- - 用户直接自己@Bean替换底层的组件   必须在有@Configuration(proxyBeanMethods = true)   的类里才能配置\n  - 用户去看这个组件是获取的配置文件什么值就去修改。\n\n**xxxxxAutoConfiguration ---> 组件  --->** **xxxxProperties里面拿值  ----> application.properties**\n\n#### 4.4 最佳实践\n\n- 引入场景依赖\n\n- - https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\n\n- 查看自动配置了哪些（选做）\n\n- - 自己分析，引入场景对应的自动配置一般都生效了\n  - 配置文件中debug=true开启自动配置报告。Negative（不生效）\\Positive（生效）\n\n- 是否需要修改\n\n- - 参照文档修改配置项\n\n- - - https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties\n    - 自己分析。xxxxProperties绑定了配置文件的哪些。\n\n- - 自定义加入或者替换组件\n\n- - - @Bean、@Component。。。\n\n- - 自定义器  **XXXXXCustomizer**；\n  - ......\n\n#### 4.5 开发小技巧\n\n##### 1  Lombok\n\n简化JavaBean开发\n\n~~~xml\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n\n\nidea中搜索安装lombok插件\n~~~\n\n~~~java\n===============================简化JavaBean开发===================================\n@NoArgsConstructor\n//@AllArgsConstructor\n@Data\n@ToString\n@EqualsAndHashCode\npublic class User {\n\n    private String name;\n    private Integer age;\n\n    private Pet pet;\n\n    public User(String name,Integer age){\n        this.name = name;\n        this.age = age;\n    }\n\n\n}\n\n\n\n================================简化日志开发===================================\n@Slf4j\n@RestController\npublic class HelloController {\n    @RequestMapping(\"/hello\")\n    public String handle01(@RequestParam(\"name\") String name){\n        \n        log.info(\"请求进来了....\");\n        \n        return \"Hello, Spring Boot 2!\"+\"你好：\"+name;\n    }\n}\n~~~\n\n##### 2  dev-tools\n\n~~~xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <optional>true</optional>\n        </dependency>\n~~~\n\n##### 3  Spring Initailizr（项目初始化向导）\n\n###### 0、选择我们需要的开发场景\n\n![image-20220508225801210](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225801210.png)\n\n###### 1.自动依赖引入\n\n![image-20220508225827517](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225827517.png)\n\n\n\n###### 2.自动创建项目结构\n\n![image-20220508225857016](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225857016.png)\n\n###### 3.自动编写好主配置类\n\n![image-20220508225921631](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225921631.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"SpringBoot基础入门","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cljzumpt20004dgi0gcaahm9i","content":"<h2 id=\"SpringBoot笔记\"><a href=\"#SpringBoot笔记\" class=\"headerlink\" title=\"SpringBoot笔记\"></a>SpringBoot笔记</h2><h3 id=\"缺失-：\"><a href=\"#缺失-：\" class=\"headerlink\" title=\"缺失 ：\"></a>缺失 ：</h3><p>meven——本地meven{</p>\n<p>使用阿里云下载，及默认JDK</p>\n<p>}</p>\n<h2 id=\"重要注解\"><a href=\"#重要注解\" class=\"headerlink\" title=\"重要注解\"></a>重要注解</h2><h4 id=\"1-RestController\"><a href=\"#1-RestController\" class=\"headerlink\" title=\"1.@RestController{\"></a>1.@RestController{</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">@ResponseBody   //声明返回的为字符串 而不是要跳转的路径</span><br></pre></td></tr></table></figure>\n\n<p>}</p>\n<h4 id=\"2-ResponseBody的作用其实是将java对象转为json格式的数据。\"><a href=\"#2-ResponseBody的作用其实是将java对象转为json格式的数据。\" class=\"headerlink\" title=\"2.@ResponseBody的作用其实是将java对象转为json格式的数据。\"></a>2.@ResponseBody的作用其实是将java对象转为json格式的数据。</h4><p>@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。<br>注意：在使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中，他的效果等同于通过response对象输出指定格式的数据。</p>\n<p>@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用【也就是AJAX】。<br>注意：在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。 比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。</p>\n<h3 id=\"1-基础案例-Holle-Word\"><a href=\"#1-基础案例-Holle-Word\" class=\"headerlink\" title=\"1.基础案例 Holle Word\"></a>1.基础案例 Holle Word</h3><h4 id=\"01基本流程\"><a href=\"#01基本流程\" class=\"headerlink\" title=\"01基本流程\"></a>01基本流程</h4><p>1.创建maven工程</p>\n<p>2.引入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--    使用springboot开发--&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;<span class=\"number\">2.2</span><span class=\"number\">.5</span>.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">&lt;!--        web场景依赖--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.创建主程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 主程序类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SpringBootApplication</span> 声明这是一个springboot应用</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HMin</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(HMin.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4.编写业务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">handle01</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello Springboot 2&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>5.测试</p>\n<p>直接运行main方法</p>\n<p>6.简化配置</p>\n<p>配置都在application.properties文件之中进行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8889</span><br></pre></td></tr></table></figure>\n\n<p>7.简化部署</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        用于将项目进行打包 打包的类型在上边设置     &lt;packaging&gt;jar&lt;/packaging&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>把项目打成jar包，直接在目标服务器执行即可。</p>\n<h3 id=\"2-了解自动配置\"><a href=\"#2-了解自动配置\" class=\"headerlink\" title=\"2.了解自动配置\"></a>2.了解自动配置</h3><h4 id=\"2-1依赖管理\"><a href=\"#2-1依赖管理\" class=\"headerlink\" title=\"2.1依赖管理\"></a>2.1依赖管理</h4><h5 id=\"2-1-1父项目做依赖管理\"><a href=\"#2-1-1父项目做依赖管理\" class=\"headerlink\" title=\"2.1.1父项目做依赖管理\"></a>2.1.1父项目做依赖管理</h5> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">依赖管理    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">他的父项目</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-2开发导入starter场景启动器\"><a href=\"#2-1-2开发导入starter场景启动器\" class=\"headerlink\" title=\"2.1.2开发导入starter场景启动器\"></a>2.1.2开发导入starter场景启动器</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、见到很多 spring-boot-starter-* ： *就某种场景</span><br><span class=\"line\">2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</span><br><span class=\"line\">3、SpringBoot所有支持的场景</span><br><span class=\"line\">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</span><br><span class=\"line\">4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</span><br><span class=\"line\">5、所有场景启动器最底层的依赖</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-3无需关注版本号，自动版本仲裁\"><a href=\"#2-1-3无需关注版本号，自动版本仲裁\" class=\"headerlink\" title=\"2.1.3无需关注版本号，自动版本仲裁\"></a>2.1.3无需关注版本号，自动版本仲裁</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、引入依赖默认都可以不写版本</span><br><span class=\"line\">2、引入非版本仲裁的jar，要写版本号。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-4-可以修改默认版本号\"><a href=\"#2-1-4-可以修改默认版本号\" class=\"headerlink\" title=\"2.1.4 可以修改默认版本号\"></a>2.1.4 可以修改默认版本号</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</span><br><span class=\"line\">2、在当前项目里面重写配置</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>5.1.43<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2自动配置\"><a href=\"#2-2自动配置\" class=\"headerlink\" title=\"2.2自动配置\"></a>2.2自动配置</h4><h5 id=\"2-2-1自动配好Tomcat\"><a href=\"#2-2-1自动配好Tomcat\" class=\"headerlink\" title=\"2.2.1自动配好Tomcat\"></a>2.2.1自动配好Tomcat</h5><ul>\n<li><ul>\n<li><p>引入Tomcat依赖。</p>\n</li>\n<li><p>配置Tomcat</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-2自动配好SpringMVC\"><a href=\"#2-2-2自动配好SpringMVC\" class=\"headerlink\" title=\"2.2.2自动配好SpringMVC\"></a>2.2.2自动配好SpringMVC</h5><ul>\n<li><ul>\n<li>引入SpringMVC全套组件</li>\n<li>自动配好SpringMVC常用组件（功能）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-2-3自动配好Web常见功能，如：字符编码问题\"><a href=\"#2-2-3自动配好Web常见功能，如：字符编码问题\" class=\"headerlink\" title=\"2.2.3自动配好Web常见功能，如：字符编码问题\"></a>2.2.3自动配好Web常见功能，如：字符编码问题</h5><ul>\n<li><ul>\n<li>SpringBoot帮我们配置好了所有web开发的常见场景</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-2-4默认的包结构\"><a href=\"#2-2-4默认的包结构\" class=\"headerlink\" title=\"2.2.4默认的包结构\"></a>2.2.4默认的包结构</h5><ul>\n<li><ul>\n<li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li>\n<li>无需以前的包扫描配置</li>\n<li>想要改变扫描路径，**@SpringBootApplication(scanBasePackages&#x3D;”com.atguigu”)**</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>或者@ComponentScan 指定扫描路径</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\">等同于</span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2-2-5各种配置拥有默认值\"><a href=\"#2-2-5各种配置拥有默认值\" class=\"headerlink\" title=\"2.2.5各种配置拥有默认值\"></a>2.2.5各种配置拥有默认值</h5><ul>\n<li><ul>\n<li>默认配置最终都是映射到某个类上，如：MultipartProperties</li>\n<li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-2-6按需加载所有自动配置项\"><a href=\"#2-2-6按需加载所有自动配置项\" class=\"headerlink\" title=\"2.2.6按需加载所有自动配置项\"></a>2.2.6按需加载所有自动配置项</h5><ul>\n<li><ul>\n<li>非常多的starter</li>\n<li>引入了哪些场景这个场景的自动配置才会开启</li>\n<li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-容器功能\"><a href=\"#3-容器功能\" class=\"headerlink\" title=\"3.容器功能\"></a>3.容器功能</h3><h4 id=\"3-1组件添加\"><a href=\"#3-1组件添加\" class=\"headerlink\" title=\"3.1组件添加\"></a>3.1组件添加</h4><h5 id=\"1-Configuration详解\"><a href=\"#1-Configuration详解\" class=\"headerlink\" title=\"1.Configuration详解\"></a>1.Configuration详解</h5><ul>\n<li><p>基本使用</p>\n</li>\n<li><p><strong>Full模式与Lite模式</strong></p>\n</li>\n<li><ul>\n<li>示例</li>\n<li>最佳实战</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</li>\n<li>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#############################基础类示例######################################################</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 宠物类</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Pet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Pet</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Pet&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户类</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;User&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, pet=&quot;</span> + pet +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pet pet;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name,Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">getPet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPet</span><span class=\"params\">(Pet pet)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pet = pet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#############################Configuration使用示例######################################################</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置类里面使用<span class=\"doctag\">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class=\"line\"><span class=\"comment\"> *2.配置类本身也是组件</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.proxyBeanMethods：代理bean的方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 为true则不管创建多少都会调用容器里的它们本身是相同的</span></span><br><span class=\"line\"><span class=\"comment\"> * 为false则相反并且不走代理</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * full（proxyBeanMethods = true）、lite（proxyBeanMethods = false）</span></span><br><span class=\"line\"><span class=\"comment\"> * 组件依赖</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = true)</span>   <span class=\"comment\">//告诉springboot这是一个配置类== 配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"comment\">//给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">user00</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">zhangsan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">//user组件依赖了pet组件</span></span><br><span class=\"line\">        zhangsan.setPet(tomPet());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zhangsan ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;tomm&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">tomPet</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>(<span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">################################<span class=\"meta\">@Configuration</span>测试代码如下########################################</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 主程序类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SpringBootApplication</span> 声明这是一个springboot应用</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"comment\">//@SpringBootApplication(scanBasePackages = &quot;com.yu&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.yu&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HMin</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        1.返回我们IOC容器</span></span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(HMin.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        2.查看容器里面的组件</span></span><br><span class=\"line\">        String[] names=run.getBeanDefinitionNames();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name:names) &#123;</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        3.从容器之中获取组件</span></span><br><span class=\"line\">        <span class=\"type\">Pet</span> <span class=\"variable\">tom01</span> <span class=\"operator\">=</span>run.getBean(<span class=\"string\">&quot;tomm&quot;</span>, Pet.class);</span><br><span class=\"line\">        <span class=\"type\">Pet</span> <span class=\"variable\">tom02</span> <span class=\"operator\">=</span>run.getBean(<span class=\"string\">&quot;tomm&quot;</span>, Pet.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;组件&quot;</span>+(tom01==tom02));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        4.com.yu.config.bean$$EnhancerBySpringCGLIB$$b06a1497@88a8218</span></span><br><span class=\"line\">        bean bean=run.getBean(bean.class);</span><br><span class=\"line\">        System.out.println(bean);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果@Configuration(proxyBeanMethods = true) 代理对象调用方法。springboot总会检查这个组件是否在容器里</span></span><br><span class=\"line\"><span class=\"comment\">//        保持组件单实例</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span>bean.user00();</span><br><span class=\"line\">        User user1=bean.user00();</span><br><span class=\"line\">        System.out.println(user == user1);</span><br><span class=\"line\"></span><br><span class=\"line\">        User user2=run.getBean(<span class=\"string\">&quot;user00&quot;</span>,User.class);</span><br><span class=\"line\">        <span class=\"type\">Pet</span> <span class=\"variable\">tomm</span> <span class=\"operator\">=</span>run.getBean(<span class=\"string\">&quot;tomm&quot;</span>,Pet.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;用户的宠物：&quot;</span>+(user2.getPet()==tomm));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-Bean、-Component、-Controller、-Service、-Repository\"><a href=\"#2-Bean、-Component、-Controller、-Service、-Repository\" class=\"headerlink\" title=\"2.@Bean、@Component、@Controller、@Service、@Repository\"></a>2.@Bean、@Component、@Controller、@Service、@Repository</h5><p>@Component   \t表示这是一个组件</p>\n<p>@Controller\t\t\t表示这是一个控制器</p>\n<p>@Service  \t\t\t\t表示这是一个业务逻辑组件</p>\n<p>@Repository\t\t\t表示这是数据库层组件</p>\n<h5 id=\"3-ComponentScan、-Import\"><a href=\"#3-ComponentScan、-Import\" class=\"headerlink\" title=\"3.@ComponentScan、@Import\"></a>3.@ComponentScan、@Import</h5><p>@ComponentScan\t\t\t表示包扫描能够指定包扫描规则</p>\n<p>@Import{</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.@Import(&#123;User.class, DBHelper.class&#125;)</span><br><span class=\"line\"> *      给容器中自动创建出这两个类型的组件，(User.class)默认组组件的名字是全类名</span><br><span class=\"line\"> @Import(&#123;User.class, DBHelper.class&#125;)</span><br><span class=\"line\">@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件</span><br><span class=\"line\">public class bean &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>}</p>\n<p>@Import 高级用法： <a href=\"https://www.bilibili.com/video/BV1gW411W7wy?p=8\">https://www.bilibili.com/video/BV1gW411W7wy?p=8</a></p>\n<h5 id=\"4-Conditional-条件注解\"><a href=\"#4-Conditional-条件注解\" class=\"headerlink\" title=\"4.@Conditional  条件注解\"></a>4.@Conditional  条件注解</h5><p>条件装配：满足Conditional指定的条件，则进行组件注入或其他操作</p>\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220507135500299.png\" alt=\"image-20220507135500299\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=====================测试条件装配==========================</span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = true)</span>   <span class=\"comment\">//告诉springboot这是一个配置类== 配置文件</span></span><br><span class=\"line\"><span class=\"comment\">//@ConditionalOnBean(name = &quot;tomm&quot;)   //若容器之中有tomm组件则运行整个bean类</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = &quot;tomm&quot;)</span>   <span class=\"comment\">//若容器之中没有tomm组件则运行整个bean类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"comment\">//给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">user00</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">zhangsan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">//user组件依赖了pet组件</span></span><br><span class=\"line\">        zhangsan.setPet(tomPet());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zhangsan ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;tomm&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">tomPet</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>(<span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">=====================主程序测试==========================</span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.yu&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HMin</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        1.返回我们IOC容器</span></span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(HMin.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        2.查看容器里面的组件</span></span><br><span class=\"line\">        String[] names=run.getBeanDefinitionNames();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name:names) &#123;</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  <span class=\"comment\">//        测试条件 ConditionalOnMissingBean  ConditionalOnBean  注解所需</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">tom</span> <span class=\"operator\">=</span> run.containsBean(<span class=\"string\">&quot;tomm&quot;</span>);<span class=\"comment\">//判断容器之中有无某个组件</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;容器之中Tom组件：&quot;</span>+tom);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">user00</span> <span class=\"operator\">=</span> run.containsBean(<span class=\"string\">&quot;user00&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;容器之中user01组件&quot;</span>+user00);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">=====================输出结果==========================</span><br><span class=\"line\">容器之中Tom组件：<span class=\"literal\">true</span></span><br><span class=\"line\">容器之中user01组件<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-原生配置文件引入\"><a href=\"#3-2-原生配置文件引入\" class=\"headerlink\" title=\"3.2 原生配置文件引入\"></a>3.2 原生配置文件引入</h4><h5 id=\"1、-ImportResource-主要是为了兼容第三方-注入IOC\"><a href=\"#1、-ImportResource-主要是为了兼容第三方-注入IOC\" class=\"headerlink\" title=\"1、@ImportResource     主要是为了兼容第三方  注入IOC\"></a>1、@ImportResource     主要是为了兼容第三方  注入IOC</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================bean.xml=========================</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    原生spring给容器添加组件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;aaa&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.yu.bean.User&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;zhangsan&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;18&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ccc&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.yu.bean.Pet&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;tomm&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================配置类=================</span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = true)</span>   <span class=\"comment\">//告诉springboot这是一个配置类== 配置文件</span></span><br><span class=\"line\"><span class=\"meta\">@ImportResource(&quot;classpath:bean.xml&quot;)</span>   <span class=\"comment\">//只用写一次，随便一个配置类中就好</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bean</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">======================主程序类中  测试  =================</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">aaa</span> <span class=\"operator\">=</span> run.containsBean(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">ccc</span> <span class=\"operator\">=</span> run.containsBean(<span class=\"string\">&quot;ccc&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;haha：&quot;</span>+aaa);<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hehe：&quot;</span>+ccc);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-配置绑定\"><a href=\"#3-3-配置绑定\" class=\"headerlink\" title=\"3.3 配置绑定\"></a>3.3 配置绑定</h4><p>​\t不使用springboot框架：\t\t\t如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">getProperties</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, IOException &#123;</span><br><span class=\"line\">         <span class=\"type\">Properties</span> <span class=\"variable\">pps</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">         pps.load(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;a.properties&quot;</span>));</span><br><span class=\"line\">         <span class=\"type\">Enumeration</span> <span class=\"variable\">enum1</span> <span class=\"operator\">=</span> pps.propertyNames();<span class=\"comment\">//得到配置文件的名字</span></span><br><span class=\"line\">         <span class=\"keyword\">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class=\"line\">             <span class=\"type\">String</span> <span class=\"variable\">strKey</span> <span class=\"operator\">=</span> (String) enum1.nextElement();</span><br><span class=\"line\">             <span class=\"type\">String</span> <span class=\"variable\">strValue</span> <span class=\"operator\">=</span> pps.getProperty(strKey);</span><br><span class=\"line\">             System.out.println(strKey + <span class=\"string\">&quot;=&quot;</span> + strValue);</span><br><span class=\"line\">             <span class=\"comment\">//封装到JavaBean。</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1、-ConfigurationProperties\"><a href=\"#1、-ConfigurationProperties\" class=\"headerlink\" title=\"1、@ConfigurationProperties\"></a>1、@ConfigurationProperties</h5><p>​\t\t\t\t\t\t<strong>@ConfigurationProperties(prefix &#x3D; “mycar”) &#x2F;&#x2F;与配置文件中的  mycar 前缀相互绑定</strong></p>\n<h5 id=\"2-EnableConfigurationProperties-ConfigurationProperties\"><a href=\"#2-EnableConfigurationProperties-ConfigurationProperties\" class=\"headerlink\" title=\"2.  @EnableConfigurationProperties        @ConfigurationProperties\"></a>2.  @EnableConfigurationProperties        @ConfigurationProperties</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">############################# Car类 示例######################################################</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有在容器中的组件，才会拥有springboot提供的强大功能</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span> <span class=\"comment\">//与配置文件中的  mycar 前缀相互绑定</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String brand;  <span class=\"comment\">//品牌</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer price;  <span class=\"comment\">//价格</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Car&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;brand=&#x27;&quot;</span> + brand + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, price=&quot;</span> + price +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getBrand</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBrand</span><span class=\"params\">(String brand)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getPrice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPrice</span><span class=\"params\">(Integer price)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#############################<span class=\"meta\">@ConfigurationProperties</span>示例######################################################</span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = true)</span>   <span class=\"comment\">//告诉springboot这是一个配置类== 配置文件  </span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(Car.class)</span><span class=\"comment\">//1.开启Car配置绑定功能。2.把这个Car这个组件自动注册到容器中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bean</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"comment\">//给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">user00</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">zhangsan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">//user组件依赖了pet组件</span></span><br><span class=\"line\">        zhangsan.setPet(tomPet());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zhangsan ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;tomm&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">tomPet</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>(<span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#############################   application.properties   配置文件示例######################################################</span><br><span class=\"line\">server.port=<span class=\"number\">9999</span></span><br><span class=\"line\">mycar.brand=yu</span><br><span class=\"line\">mycar.price=<span class=\"number\">10000</span></span><br><span class=\"line\">############################# 配置对外API 控制层 示例######################################################</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    Car car;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/car&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">car</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> car;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-Component-ConfigurationProperties\"><a href=\"#3-Component-ConfigurationProperties\" class=\"headerlink\" title=\"3. @Component         @ConfigurationProperties\"></a>3. @Component         @ConfigurationProperties</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#############################<span class=\"meta\">@ConfigurationProperties</span>示例######################################################</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有在容器中的组件，才会拥有springboot提供的强大功能</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">//将其加入到容器之中</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span> <span class=\"comment\">//与配置文件中的  mycar 前缀相互绑定</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String brand;  <span class=\"comment\">//品牌</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer price;  <span class=\"comment\">//价格</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Car&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;brand=&#x27;&quot;</span> + brand + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, price=&quot;</span> + price +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getBrand</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBrand</span><span class=\"params\">(String brand)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getPrice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPrice</span><span class=\"params\">(Integer price)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#############################   application.properties   配置文件示例######################################################</span><br><span class=\"line\">server.port=<span class=\"number\">9999</span></span><br><span class=\"line\">mycar.brand=yu</span><br><span class=\"line\">mycar.price=<span class=\"number\">10000</span></span><br><span class=\"line\">############################# 配置对外API 控制层 示例######################################################</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    Car car;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/car&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">car</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> car;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果截图：</p>\n<p>​\t<img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220507160301194.png\" alt=\"image-20220507160301194\"></p>\n<h3 id=\"4-自动配置原理入门\"><a href=\"#4-自动配置原理入门\" class=\"headerlink\" title=\"4.自动配置原理入门\"></a>4.自动配置原理入门</h3><h4 id=\"4-1引导加载自动配置类\"><a href=\"#4-1引导加载自动配置类\" class=\"headerlink\" title=\"4.1引导加载自动配置类\"></a>4.1引导加载自动配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===================SpringBootApplication注解内的内容==========================</span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class=\"line\"><span class=\"meta\">\t\t@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">======================</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"1-SpringBootConfiguration\"><a href=\"#1-SpringBootConfiguration\" class=\"headerlink\" title=\"1.@SpringBootConfiguration\"></a>1.@SpringBootConfiguration</h5><p>@Configuration。代表当前是一个配置类</p>\n<h5 id=\"2-ComponentScan\"><a href=\"#2-ComponentScan\" class=\"headerlink\" title=\"2.ComponentScan\"></a>2.ComponentScan</h5><p>指定扫描哪些包，Spring注解；</p>\n<p>例：@ComponentScan(“com.yu”)</p>\n<h5 id=\"3、-EnableAutoConfiguration\"><a href=\"#3、-EnableAutoConfiguration\" class=\"headerlink\" title=\"3、@EnableAutoConfiguration\"></a>3、@EnableAutoConfiguration</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"1、-AutoConfigurationPackage\"><a href=\"#1、-AutoConfigurationPackage\" class=\"headerlink\" title=\"1、@AutoConfigurationPackage\"></a>1、@AutoConfigurationPackage</h6><p>自动配置包？指定了默认的包规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(AutoConfigurationPackages.Registrar.class)</span>  <span class=\"comment\">//给容器中导入一个组件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//利用Registrar给容器中导入一系列组件</span></span><br><span class=\"line\"><span class=\"comment\">//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2、-Import-AutoConfigurationImportSelector-class\"><a href=\"#2、-Import-AutoConfigurationImportSelector-class\" class=\"headerlink\" title=\"2、@Import(AutoConfigurationImportSelector.class)\"></a>2、@Import(AutoConfigurationImportSelector.class)</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件</span><br><span class=\"line\"><span class=\"number\">2</span>、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</span><br><span class=\"line\"><span class=\"number\">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; <span class=\"title function_\">loadSpringFactories</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ClassLoader classLoader)</span>；得到所有的组件</span><br><span class=\"line\"><span class=\"number\">4</span>、从META-INF/spring.factories位置来加载一个文件。</span><br><span class=\"line\">\t默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</span><br><span class=\"line\">    spring-boot-autoconfigure-<span class=\"number\">2.3</span><span class=\"number\">.4</span>.RELEASE.jar包里面也有META-INF/spring.factories</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508211138147.png\" alt=\"image-20220508211138147\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件里面写死了spring-boot一启动就要给容器中加载的所有配置类</span><br><span class=\"line\">spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories</span><br><span class=\"line\"># Auto Configure</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2按需开启自动配置项\"><a href=\"#4-2按需开启自动配置项\" class=\"headerlink\" title=\"4.2按需开启自动配置项\"></a>4.2按需开启自动配置项</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">虽然我们<span class=\"number\">127</span>个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration</span><br><span class=\"line\">按照条件装配规则（<span class=\"meta\">@Conditional</span>），最终会按需配置。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3、修改默认配置\"><a href=\"#4-3、修改默认配置\" class=\"headerlink\" title=\"4.3、修改默认配置\"></a>4.3、修改默认配置</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@ConditionalOnBean(MultipartResolver.class)</span>  <span class=\"comment\">//容器中有这个类型组件</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class=\"comment\">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> MultipartResolver <span class=\"title function_\">multipartResolver</span><span class=\"params\">(MultipartResolver resolver)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class=\"line\">            <span class=\"comment\">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">给容器中加入了文件上传解析器；</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> CharacterEncodingFilter <span class=\"title function_\">characterEncodingFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p>\n</li>\n<li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p>\n</li>\n<li><p>生效的配置类就会给容器中装配很多组件</p>\n</li>\n<li><p>只要容器中有这些组件，相当于这些功能就有了</p>\n</li>\n<li><p>定制化配置</p>\n</li>\n<li><ul>\n<li>用户直接自己@Bean替换底层的组件   必须在有@Configuration(proxyBeanMethods &#x3D; true)   的类里才能配置</li>\n<li>用户去看这个组件是获取的配置文件什么值就去修改。</li>\n</ul>\n</li>\n</ul>\n<p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p>\n<h4 id=\"4-4-最佳实践\"><a href=\"#4-4-最佳实践\" class=\"headerlink\" title=\"4.4 最佳实践\"></a>4.4 最佳实践</h4><ul>\n<li><p>引入场景依赖</p>\n</li>\n<li><ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li>\n</ul>\n</li>\n<li><p>查看自动配置了哪些（选做）</p>\n</li>\n<li><ul>\n<li>自己分析，引入场景对应的自动配置一般都生效了</li>\n<li>配置文件中debug&#x3D;true开启自动配置报告。Negative（不生效）\\Positive（生效）</li>\n</ul>\n</li>\n<li><p>是否需要修改</p>\n</li>\n<li><ul>\n<li>参照文档修改配置项</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties\">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li>\n<li>自己分析。xxxxProperties绑定了配置文件的哪些。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>自定义加入或者替换组件</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>@Bean、@Component。。。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>自定义器  <strong>XXXXXCustomizer</strong>；</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-5-开发小技巧\"><a href=\"#4-5-开发小技巧\" class=\"headerlink\" title=\"4.5 开发小技巧\"></a>4.5 开发小技巧</h4><h5 id=\"1-Lombok\"><a href=\"#1-Lombok\" class=\"headerlink\" title=\"1  Lombok\"></a>1  Lombok</h5><p>简化JavaBean开发</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">idea中搜索安装lombok插件</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===============================简化JavaBean开发===================================</span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"comment\">//@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pet pet;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name,Integer age)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">================================简化日志开发===================================</span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">handle01</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;name&quot;)</span> String name)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;请求进来了....&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, Spring Boot 2!&quot;</span>+<span class=\"string\">&quot;你好：&quot;</span>+name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-dev-tools\"><a href=\"#2-dev-tools\" class=\"headerlink\" title=\"2  dev-tools\"></a>2  dev-tools</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-Spring-Initailizr（项目初始化向导）\"><a href=\"#3-Spring-Initailizr（项目初始化向导）\" class=\"headerlink\" title=\"3  Spring Initailizr（项目初始化向导）\"></a>3  Spring Initailizr（项目初始化向导）</h5><h6 id=\"0、选择我们需要的开发场景\"><a href=\"#0、选择我们需要的开发场景\" class=\"headerlink\" title=\"0、选择我们需要的开发场景\"></a>0、选择我们需要的开发场景</h6><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225801210.png\" alt=\"image-20220508225801210\"></p>\n<h6 id=\"1-自动依赖引入\"><a href=\"#1-自动依赖引入\" class=\"headerlink\" title=\"1.自动依赖引入\"></a>1.自动依赖引入</h6><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225827517.png\" alt=\"image-20220508225827517\"></p>\n<h6 id=\"2-自动创建项目结构\"><a href=\"#2-自动创建项目结构\" class=\"headerlink\" title=\"2.自动创建项目结构\"></a>2.自动创建项目结构</h6><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225857016.png\" alt=\"image-20220508225857016\"></p>\n<h6 id=\"3-自动编写好主配置类\"><a href=\"#3-自动编写好主配置类\" class=\"headerlink\" title=\"3.自动编写好主配置类\"></a>3.自动编写好主配置类</h6><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225921631.png\" alt=\"image-20220508225921631\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<h2 id=\"SpringBoot笔记\"><a href=\"#SpringBoot笔记\" class=\"headerlink\" title=\"SpringBoot笔记\"></a>SpringBoot笔记</h2><h3 id=\"缺失-：\"><a href=\"#缺失-：\" class=\"headerlink\" title=\"缺失 ：\"></a>缺失 ：</h3><p>meven——本地meven{</p>\n<p>使用阿里云下载，及默认JDK</p>\n<p>}</p>\n<h2 id=\"重要注解\"><a href=\"#重要注解\" class=\"headerlink\" title=\"重要注解\"></a>重要注解</h2><h4 id=\"1-RestController\"><a href=\"#1-RestController\" class=\"headerlink\" title=\"1.@RestController{\"></a>1.@RestController{</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">@ResponseBody   //声明返回的为字符串 而不是要跳转的路径</span><br></pre></td></tr></table></figure>\n\n<p>}</p>\n<h4 id=\"2-ResponseBody的作用其实是将java对象转为json格式的数据。\"><a href=\"#2-ResponseBody的作用其实是将java对象转为json格式的数据。\" class=\"headerlink\" title=\"2.@ResponseBody的作用其实是将java对象转为json格式的数据。\"></a>2.@ResponseBody的作用其实是将java对象转为json格式的数据。</h4><p>@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。<br>注意：在使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中，他的效果等同于通过response对象输出指定格式的数据。</p>\n<p>@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用【也就是AJAX】。<br>注意：在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。 比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。</p>\n<h3 id=\"1-基础案例-Holle-Word\"><a href=\"#1-基础案例-Holle-Word\" class=\"headerlink\" title=\"1.基础案例 Holle Word\"></a>1.基础案例 Holle Word</h3><h4 id=\"01基本流程\"><a href=\"#01基本流程\" class=\"headerlink\" title=\"01基本流程\"></a>01基本流程</h4><p>1.创建maven工程</p>\n<p>2.引入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--    使用springboot开发--&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;<span class=\"number\">2.2</span><span class=\"number\">.5</span>.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">&lt;!--        web场景依赖--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.创建主程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 主程序类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SpringBootApplication</span> 声明这是一个springboot应用</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HMin</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(HMin.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4.编写业务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">handle01</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello Springboot 2&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>5.测试</p>\n<p>直接运行main方法</p>\n<p>6.简化配置</p>\n<p>配置都在application.properties文件之中进行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8889</span><br></pre></td></tr></table></figure>\n\n<p>7.简化部署</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        用于将项目进行打包 打包的类型在上边设置     &lt;packaging&gt;jar&lt;/packaging&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>把项目打成jar包，直接在目标服务器执行即可。</p>\n<h3 id=\"2-了解自动配置\"><a href=\"#2-了解自动配置\" class=\"headerlink\" title=\"2.了解自动配置\"></a>2.了解自动配置</h3><h4 id=\"2-1依赖管理\"><a href=\"#2-1依赖管理\" class=\"headerlink\" title=\"2.1依赖管理\"></a>2.1依赖管理</h4><h5 id=\"2-1-1父项目做依赖管理\"><a href=\"#2-1-1父项目做依赖管理\" class=\"headerlink\" title=\"2.1.1父项目做依赖管理\"></a>2.1.1父项目做依赖管理</h5> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">依赖管理    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">他的父项目</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-2开发导入starter场景启动器\"><a href=\"#2-1-2开发导入starter场景启动器\" class=\"headerlink\" title=\"2.1.2开发导入starter场景启动器\"></a>2.1.2开发导入starter场景启动器</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、见到很多 spring-boot-starter-* ： *就某种场景</span><br><span class=\"line\">2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</span><br><span class=\"line\">3、SpringBoot所有支持的场景</span><br><span class=\"line\">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</span><br><span class=\"line\">4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</span><br><span class=\"line\">5、所有场景启动器最底层的依赖</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-3无需关注版本号，自动版本仲裁\"><a href=\"#2-1-3无需关注版本号，自动版本仲裁\" class=\"headerlink\" title=\"2.1.3无需关注版本号，自动版本仲裁\"></a>2.1.3无需关注版本号，自动版本仲裁</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、引入依赖默认都可以不写版本</span><br><span class=\"line\">2、引入非版本仲裁的jar，要写版本号。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-4-可以修改默认版本号\"><a href=\"#2-1-4-可以修改默认版本号\" class=\"headerlink\" title=\"2.1.4 可以修改默认版本号\"></a>2.1.4 可以修改默认版本号</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</span><br><span class=\"line\">2、在当前项目里面重写配置</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>5.1.43<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2自动配置\"><a href=\"#2-2自动配置\" class=\"headerlink\" title=\"2.2自动配置\"></a>2.2自动配置</h4><h5 id=\"2-2-1自动配好Tomcat\"><a href=\"#2-2-1自动配好Tomcat\" class=\"headerlink\" title=\"2.2.1自动配好Tomcat\"></a>2.2.1自动配好Tomcat</h5><ul>\n<li><ul>\n<li><p>引入Tomcat依赖。</p>\n</li>\n<li><p>配置Tomcat</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-2自动配好SpringMVC\"><a href=\"#2-2-2自动配好SpringMVC\" class=\"headerlink\" title=\"2.2.2自动配好SpringMVC\"></a>2.2.2自动配好SpringMVC</h5><ul>\n<li><ul>\n<li>引入SpringMVC全套组件</li>\n<li>自动配好SpringMVC常用组件（功能）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-2-3自动配好Web常见功能，如：字符编码问题\"><a href=\"#2-2-3自动配好Web常见功能，如：字符编码问题\" class=\"headerlink\" title=\"2.2.3自动配好Web常见功能，如：字符编码问题\"></a>2.2.3自动配好Web常见功能，如：字符编码问题</h5><ul>\n<li><ul>\n<li>SpringBoot帮我们配置好了所有web开发的常见场景</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-2-4默认的包结构\"><a href=\"#2-2-4默认的包结构\" class=\"headerlink\" title=\"2.2.4默认的包结构\"></a>2.2.4默认的包结构</h5><ul>\n<li><ul>\n<li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li>\n<li>无需以前的包扫描配置</li>\n<li>想要改变扫描路径，**@SpringBootApplication(scanBasePackages&#x3D;”com.atguigu”)**</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>或者@ComponentScan 指定扫描路径</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\">等同于</span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2-2-5各种配置拥有默认值\"><a href=\"#2-2-5各种配置拥有默认值\" class=\"headerlink\" title=\"2.2.5各种配置拥有默认值\"></a>2.2.5各种配置拥有默认值</h5><ul>\n<li><ul>\n<li>默认配置最终都是映射到某个类上，如：MultipartProperties</li>\n<li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-2-6按需加载所有自动配置项\"><a href=\"#2-2-6按需加载所有自动配置项\" class=\"headerlink\" title=\"2.2.6按需加载所有自动配置项\"></a>2.2.6按需加载所有自动配置项</h5><ul>\n<li><ul>\n<li>非常多的starter</li>\n<li>引入了哪些场景这个场景的自动配置才会开启</li>\n<li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-容器功能\"><a href=\"#3-容器功能\" class=\"headerlink\" title=\"3.容器功能\"></a>3.容器功能</h3><h4 id=\"3-1组件添加\"><a href=\"#3-1组件添加\" class=\"headerlink\" title=\"3.1组件添加\"></a>3.1组件添加</h4><h5 id=\"1-Configuration详解\"><a href=\"#1-Configuration详解\" class=\"headerlink\" title=\"1.Configuration详解\"></a>1.Configuration详解</h5><ul>\n<li><p>基本使用</p>\n</li>\n<li><p><strong>Full模式与Lite模式</strong></p>\n</li>\n<li><ul>\n<li>示例</li>\n<li>最佳实战</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</li>\n<li>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#############################基础类示例######################################################</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 宠物类</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Pet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Pet</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Pet&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户类</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;User&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&quot;, pet=&quot;</span> + pet +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pet pet;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name,Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">getPet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPet</span><span class=\"params\">(Pet pet)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pet = pet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#############################Configuration使用示例######################################################</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置类里面使用<span class=\"doctag\">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class=\"line\"><span class=\"comment\"> *2.配置类本身也是组件</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.proxyBeanMethods：代理bean的方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 为true则不管创建多少都会调用容器里的它们本身是相同的</span></span><br><span class=\"line\"><span class=\"comment\"> * 为false则相反并且不走代理</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * full（proxyBeanMethods = true）、lite（proxyBeanMethods = false）</span></span><br><span class=\"line\"><span class=\"comment\"> * 组件依赖</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = true)</span>   <span class=\"comment\">//告诉springboot这是一个配置类== 配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"comment\">//给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">user00</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">zhangsan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">//user组件依赖了pet组件</span></span><br><span class=\"line\">        zhangsan.setPet(tomPet());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zhangsan ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;tomm&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">tomPet</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>(<span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">################################<span class=\"meta\">@Configuration</span>测试代码如下########################################</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 主程序类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SpringBootApplication</span> 声明这是一个springboot应用</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"comment\">//@SpringBootApplication(scanBasePackages = &quot;com.yu&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.yu&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HMin</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        1.返回我们IOC容器</span></span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(HMin.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        2.查看容器里面的组件</span></span><br><span class=\"line\">        String[] names=run.getBeanDefinitionNames();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name:names) &#123;</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        3.从容器之中获取组件</span></span><br><span class=\"line\">        <span class=\"type\">Pet</span> <span class=\"variable\">tom01</span> <span class=\"operator\">=</span>run.getBean(<span class=\"string\">&quot;tomm&quot;</span>, Pet.class);</span><br><span class=\"line\">        <span class=\"type\">Pet</span> <span class=\"variable\">tom02</span> <span class=\"operator\">=</span>run.getBean(<span class=\"string\">&quot;tomm&quot;</span>, Pet.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;组件&quot;</span>+(tom01==tom02));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        4.com.yu.config.bean$$EnhancerBySpringCGLIB$$b06a1497@88a8218</span></span><br><span class=\"line\">        bean bean=run.getBean(bean.class);</span><br><span class=\"line\">        System.out.println(bean);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果@Configuration(proxyBeanMethods = true) 代理对象调用方法。springboot总会检查这个组件是否在容器里</span></span><br><span class=\"line\"><span class=\"comment\">//        保持组件单实例</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span>bean.user00();</span><br><span class=\"line\">        User user1=bean.user00();</span><br><span class=\"line\">        System.out.println(user == user1);</span><br><span class=\"line\"></span><br><span class=\"line\">        User user2=run.getBean(<span class=\"string\">&quot;user00&quot;</span>,User.class);</span><br><span class=\"line\">        <span class=\"type\">Pet</span> <span class=\"variable\">tomm</span> <span class=\"operator\">=</span>run.getBean(<span class=\"string\">&quot;tomm&quot;</span>,Pet.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;用户的宠物：&quot;</span>+(user2.getPet()==tomm));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-Bean、-Component、-Controller、-Service、-Repository\"><a href=\"#2-Bean、-Component、-Controller、-Service、-Repository\" class=\"headerlink\" title=\"2.@Bean、@Component、@Controller、@Service、@Repository\"></a>2.@Bean、@Component、@Controller、@Service、@Repository</h5><p>@Component   \t表示这是一个组件</p>\n<p>@Controller\t\t\t表示这是一个控制器</p>\n<p>@Service  \t\t\t\t表示这是一个业务逻辑组件</p>\n<p>@Repository\t\t\t表示这是数据库层组件</p>\n<h5 id=\"3-ComponentScan、-Import\"><a href=\"#3-ComponentScan、-Import\" class=\"headerlink\" title=\"3.@ComponentScan、@Import\"></a>3.@ComponentScan、@Import</h5><p>@ComponentScan\t\t\t表示包扫描能够指定包扫描规则</p>\n<p>@Import{</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.@Import(&#123;User.class, DBHelper.class&#125;)</span><br><span class=\"line\"> *      给容器中自动创建出这两个类型的组件，(User.class)默认组组件的名字是全类名</span><br><span class=\"line\"> @Import(&#123;User.class, DBHelper.class&#125;)</span><br><span class=\"line\">@Configuration(proxyBeanMethods = true)   //告诉springboot这是一个配置类== 配置文件</span><br><span class=\"line\">public class bean &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>}</p>\n<p>@Import 高级用法： <a href=\"https://www.bilibili.com/video/BV1gW411W7wy?p=8\">https://www.bilibili.com/video/BV1gW411W7wy?p=8</a></p>\n<h5 id=\"4-Conditional-条件注解\"><a href=\"#4-Conditional-条件注解\" class=\"headerlink\" title=\"4.@Conditional  条件注解\"></a>4.@Conditional  条件注解</h5><p>条件装配：满足Conditional指定的条件，则进行组件注入或其他操作</p>\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220507135500299.png\" alt=\"image-20220507135500299\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=====================测试条件装配==========================</span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = true)</span>   <span class=\"comment\">//告诉springboot这是一个配置类== 配置文件</span></span><br><span class=\"line\"><span class=\"comment\">//@ConditionalOnBean(name = &quot;tomm&quot;)   //若容器之中有tomm组件则运行整个bean类</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = &quot;tomm&quot;)</span>   <span class=\"comment\">//若容器之中没有tomm组件则运行整个bean类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"comment\">//给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">user00</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">zhangsan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">//user组件依赖了pet组件</span></span><br><span class=\"line\">        zhangsan.setPet(tomPet());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zhangsan ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;tomm&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">tomPet</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>(<span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">=====================主程序测试==========================</span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.yu&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HMin</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        1.返回我们IOC容器</span></span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(HMin.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        2.查看容器里面的组件</span></span><br><span class=\"line\">        String[] names=run.getBeanDefinitionNames();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name:names) &#123;</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  <span class=\"comment\">//        测试条件 ConditionalOnMissingBean  ConditionalOnBean  注解所需</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">tom</span> <span class=\"operator\">=</span> run.containsBean(<span class=\"string\">&quot;tomm&quot;</span>);<span class=\"comment\">//判断容器之中有无某个组件</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;容器之中Tom组件：&quot;</span>+tom);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">user00</span> <span class=\"operator\">=</span> run.containsBean(<span class=\"string\">&quot;user00&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;容器之中user01组件&quot;</span>+user00);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">=====================输出结果==========================</span><br><span class=\"line\">容器之中Tom组件：<span class=\"literal\">true</span></span><br><span class=\"line\">容器之中user01组件<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-原生配置文件引入\"><a href=\"#3-2-原生配置文件引入\" class=\"headerlink\" title=\"3.2 原生配置文件引入\"></a>3.2 原生配置文件引入</h4><h5 id=\"1、-ImportResource-主要是为了兼容第三方-注入IOC\"><a href=\"#1、-ImportResource-主要是为了兼容第三方-注入IOC\" class=\"headerlink\" title=\"1、@ImportResource     主要是为了兼容第三方  注入IOC\"></a>1、@ImportResource     主要是为了兼容第三方  注入IOC</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================bean.xml=========================</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    原生spring给容器添加组件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;aaa&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.yu.bean.User&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;zhangsan&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;18&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ccc&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.yu.bean.Pet&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;tomm&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================配置类=================</span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = true)</span>   <span class=\"comment\">//告诉springboot这是一个配置类== 配置文件</span></span><br><span class=\"line\"><span class=\"meta\">@ImportResource(&quot;classpath:bean.xml&quot;)</span>   <span class=\"comment\">//只用写一次，随便一个配置类中就好</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bean</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">======================主程序类中  测试  =================</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">aaa</span> <span class=\"operator\">=</span> run.containsBean(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">ccc</span> <span class=\"operator\">=</span> run.containsBean(<span class=\"string\">&quot;ccc&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;haha：&quot;</span>+aaa);<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hehe：&quot;</span>+ccc);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-配置绑定\"><a href=\"#3-3-配置绑定\" class=\"headerlink\" title=\"3.3 配置绑定\"></a>3.3 配置绑定</h4><p>​\t不使用springboot框架：\t\t\t如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">getProperties</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, IOException &#123;</span><br><span class=\"line\">         <span class=\"type\">Properties</span> <span class=\"variable\">pps</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">         pps.load(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;a.properties&quot;</span>));</span><br><span class=\"line\">         <span class=\"type\">Enumeration</span> <span class=\"variable\">enum1</span> <span class=\"operator\">=</span> pps.propertyNames();<span class=\"comment\">//得到配置文件的名字</span></span><br><span class=\"line\">         <span class=\"keyword\">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class=\"line\">             <span class=\"type\">String</span> <span class=\"variable\">strKey</span> <span class=\"operator\">=</span> (String) enum1.nextElement();</span><br><span class=\"line\">             <span class=\"type\">String</span> <span class=\"variable\">strValue</span> <span class=\"operator\">=</span> pps.getProperty(strKey);</span><br><span class=\"line\">             System.out.println(strKey + <span class=\"string\">&quot;=&quot;</span> + strValue);</span><br><span class=\"line\">             <span class=\"comment\">//封装到JavaBean。</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1、-ConfigurationProperties\"><a href=\"#1、-ConfigurationProperties\" class=\"headerlink\" title=\"1、@ConfigurationProperties\"></a>1、@ConfigurationProperties</h5><p>​\t\t\t\t\t\t<strong>@ConfigurationProperties(prefix &#x3D; “mycar”) &#x2F;&#x2F;与配置文件中的  mycar 前缀相互绑定</strong></p>\n<h5 id=\"2-EnableConfigurationProperties-ConfigurationProperties\"><a href=\"#2-EnableConfigurationProperties-ConfigurationProperties\" class=\"headerlink\" title=\"2.  @EnableConfigurationProperties        @ConfigurationProperties\"></a>2.  @EnableConfigurationProperties        @ConfigurationProperties</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">############################# Car类 示例######################################################</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有在容器中的组件，才会拥有springboot提供的强大功能</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span> <span class=\"comment\">//与配置文件中的  mycar 前缀相互绑定</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String brand;  <span class=\"comment\">//品牌</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer price;  <span class=\"comment\">//价格</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Car&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;brand=&#x27;&quot;</span> + brand + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, price=&quot;</span> + price +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getBrand</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBrand</span><span class=\"params\">(String brand)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getPrice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPrice</span><span class=\"params\">(Integer price)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#############################<span class=\"meta\">@ConfigurationProperties</span>示例######################################################</span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = true)</span>   <span class=\"comment\">//告诉springboot这是一个配置类== 配置文件  </span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(Car.class)</span><span class=\"comment\">//1.开启Car配置绑定功能。2.把这个Car这个组件自动注册到容器中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bean</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *Full外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单例对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"comment\">//给容器添加组件，以方法名作为组件id。 返回类型就是组件类型。返回值就是组件在容器中的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">user00</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">zhangsan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">//user组件依赖了pet组件</span></span><br><span class=\"line\">        zhangsan.setPet(tomPet());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zhangsan ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;tomm&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">tomPet</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>(<span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#############################   application.properties   配置文件示例######################################################</span><br><span class=\"line\">server.port=<span class=\"number\">9999</span></span><br><span class=\"line\">mycar.brand=yu</span><br><span class=\"line\">mycar.price=<span class=\"number\">10000</span></span><br><span class=\"line\">############################# 配置对外API 控制层 示例######################################################</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    Car car;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/car&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">car</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> car;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-Component-ConfigurationProperties\"><a href=\"#3-Component-ConfigurationProperties\" class=\"headerlink\" title=\"3. @Component         @ConfigurationProperties\"></a>3. @Component         @ConfigurationProperties</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#############################<span class=\"meta\">@ConfigurationProperties</span>示例######################################################</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有在容器中的组件，才会拥有springboot提供的强大功能</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">//将其加入到容器之中</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span> <span class=\"comment\">//与配置文件中的  mycar 前缀相互绑定</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String brand;  <span class=\"comment\">//品牌</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer price;  <span class=\"comment\">//价格</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Car&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;brand=&#x27;&quot;</span> + brand + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, price=&quot;</span> + price +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getBrand</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBrand</span><span class=\"params\">(String brand)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getPrice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPrice</span><span class=\"params\">(Integer price)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#############################   application.properties   配置文件示例######################################################</span><br><span class=\"line\">server.port=<span class=\"number\">9999</span></span><br><span class=\"line\">mycar.brand=yu</span><br><span class=\"line\">mycar.price=<span class=\"number\">10000</span></span><br><span class=\"line\">############################# 配置对外API 控制层 示例######################################################</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    Car car;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/car&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">car</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> car;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果截图：</p>\n<p>​\t<img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220507160301194.png\" alt=\"image-20220507160301194\"></p>\n<h3 id=\"4-自动配置原理入门\"><a href=\"#4-自动配置原理入门\" class=\"headerlink\" title=\"4.自动配置原理入门\"></a>4.自动配置原理入门</h3><h4 id=\"4-1引导加载自动配置类\"><a href=\"#4-1引导加载自动配置类\" class=\"headerlink\" title=\"4.1引导加载自动配置类\"></a>4.1引导加载自动配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===================SpringBootApplication注解内的内容==========================</span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class=\"line\"><span class=\"meta\">\t\t@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">======================</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"1-SpringBootConfiguration\"><a href=\"#1-SpringBootConfiguration\" class=\"headerlink\" title=\"1.@SpringBootConfiguration\"></a>1.@SpringBootConfiguration</h5><p>@Configuration。代表当前是一个配置类</p>\n<h5 id=\"2-ComponentScan\"><a href=\"#2-ComponentScan\" class=\"headerlink\" title=\"2.ComponentScan\"></a>2.ComponentScan</h5><p>指定扫描哪些包，Spring注解；</p>\n<p>例：@ComponentScan(“com.yu”)</p>\n<h5 id=\"3、-EnableAutoConfiguration\"><a href=\"#3、-EnableAutoConfiguration\" class=\"headerlink\" title=\"3、@EnableAutoConfiguration\"></a>3、@EnableAutoConfiguration</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"1、-AutoConfigurationPackage\"><a href=\"#1、-AutoConfigurationPackage\" class=\"headerlink\" title=\"1、@AutoConfigurationPackage\"></a>1、@AutoConfigurationPackage</h6><p>自动配置包？指定了默认的包规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(AutoConfigurationPackages.Registrar.class)</span>  <span class=\"comment\">//给容器中导入一个组件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//利用Registrar给容器中导入一系列组件</span></span><br><span class=\"line\"><span class=\"comment\">//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2、-Import-AutoConfigurationImportSelector-class\"><a href=\"#2、-Import-AutoConfigurationImportSelector-class\" class=\"headerlink\" title=\"2、@Import(AutoConfigurationImportSelector.class)\"></a>2、@Import(AutoConfigurationImportSelector.class)</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件</span><br><span class=\"line\"><span class=\"number\">2</span>、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</span><br><span class=\"line\"><span class=\"number\">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; <span class=\"title function_\">loadSpringFactories</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ClassLoader classLoader)</span>；得到所有的组件</span><br><span class=\"line\"><span class=\"number\">4</span>、从META-INF/spring.factories位置来加载一个文件。</span><br><span class=\"line\">\t默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</span><br><span class=\"line\">    spring-boot-autoconfigure-<span class=\"number\">2.3</span><span class=\"number\">.4</span>.RELEASE.jar包里面也有META-INF/spring.factories</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508211138147.png\" alt=\"image-20220508211138147\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件里面写死了spring-boot一启动就要给容器中加载的所有配置类</span><br><span class=\"line\">spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories</span><br><span class=\"line\"># Auto Configure</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2按需开启自动配置项\"><a href=\"#4-2按需开启自动配置项\" class=\"headerlink\" title=\"4.2按需开启自动配置项\"></a>4.2按需开启自动配置项</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">虽然我们<span class=\"number\">127</span>个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration</span><br><span class=\"line\">按照条件装配规则（<span class=\"meta\">@Conditional</span>），最终会按需配置。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3、修改默认配置\"><a href=\"#4-3、修改默认配置\" class=\"headerlink\" title=\"4.3、修改默认配置\"></a>4.3、修改默认配置</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@ConditionalOnBean(MultipartResolver.class)</span>  <span class=\"comment\">//容器中有这个类型组件</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class=\"comment\">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> MultipartResolver <span class=\"title function_\">multipartResolver</span><span class=\"params\">(MultipartResolver resolver)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class=\"line\">            <span class=\"comment\">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">给容器中加入了文件上传解析器；</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> CharacterEncodingFilter <span class=\"title function_\">characterEncodingFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p>\n</li>\n<li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p>\n</li>\n<li><p>生效的配置类就会给容器中装配很多组件</p>\n</li>\n<li><p>只要容器中有这些组件，相当于这些功能就有了</p>\n</li>\n<li><p>定制化配置</p>\n</li>\n<li><ul>\n<li>用户直接自己@Bean替换底层的组件   必须在有@Configuration(proxyBeanMethods &#x3D; true)   的类里才能配置</li>\n<li>用户去看这个组件是获取的配置文件什么值就去修改。</li>\n</ul>\n</li>\n</ul>\n<p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p>\n<h4 id=\"4-4-最佳实践\"><a href=\"#4-4-最佳实践\" class=\"headerlink\" title=\"4.4 最佳实践\"></a>4.4 最佳实践</h4><ul>\n<li><p>引入场景依赖</p>\n</li>\n<li><ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li>\n</ul>\n</li>\n<li><p>查看自动配置了哪些（选做）</p>\n</li>\n<li><ul>\n<li>自己分析，引入场景对应的自动配置一般都生效了</li>\n<li>配置文件中debug&#x3D;true开启自动配置报告。Negative（不生效）\\Positive（生效）</li>\n</ul>\n</li>\n<li><p>是否需要修改</p>\n</li>\n<li><ul>\n<li>参照文档修改配置项</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties\">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li>\n<li>自己分析。xxxxProperties绑定了配置文件的哪些。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>自定义加入或者替换组件</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>@Bean、@Component。。。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>自定义器  <strong>XXXXXCustomizer</strong>；</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-5-开发小技巧\"><a href=\"#4-5-开发小技巧\" class=\"headerlink\" title=\"4.5 开发小技巧\"></a>4.5 开发小技巧</h4><h5 id=\"1-Lombok\"><a href=\"#1-Lombok\" class=\"headerlink\" title=\"1  Lombok\"></a>1  Lombok</h5><p>简化JavaBean开发</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">idea中搜索安装lombok插件</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===============================简化JavaBean开发===================================</span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"comment\">//@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pet pet;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name,Integer age)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">================================简化日志开发===================================</span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">handle01</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;name&quot;)</span> String name)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;请求进来了....&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, Spring Boot 2!&quot;</span>+<span class=\"string\">&quot;你好：&quot;</span>+name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-dev-tools\"><a href=\"#2-dev-tools\" class=\"headerlink\" title=\"2  dev-tools\"></a>2  dev-tools</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-Spring-Initailizr（项目初始化向导）\"><a href=\"#3-Spring-Initailizr（项目初始化向导）\" class=\"headerlink\" title=\"3  Spring Initailizr（项目初始化向导）\"></a>3  Spring Initailizr（项目初始化向导）</h5><h6 id=\"0、选择我们需要的开发场景\"><a href=\"#0、选择我们需要的开发场景\" class=\"headerlink\" title=\"0、选择我们需要的开发场景\"></a>0、选择我们需要的开发场景</h6><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225801210.png\" alt=\"image-20220508225801210\"></p>\n<h6 id=\"1-自动依赖引入\"><a href=\"#1-自动依赖引入\" class=\"headerlink\" title=\"1.自动依赖引入\"></a>1.自动依赖引入</h6><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225827517.png\" alt=\"image-20220508225827517\"></p>\n<h6 id=\"2-自动创建项目结构\"><a href=\"#2-自动创建项目结构\" class=\"headerlink\" title=\"2.自动创建项目结构\"></a>2.自动创建项目结构</h6><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225857016.png\" alt=\"image-20220508225857016\"></p>\n<h6 id=\"3-自动编写好主配置类\"><a href=\"#3-自动编写好主配置类\" class=\"headerlink\" title=\"3.自动编写好主配置类\"></a>3.自动编写好主配置类</h6><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220508225921631.png\" alt=\"image-20220508225921631\"></p>\n"},{"title":"SpringBoot核心功能","date":"2023-07-11T14:37:00.000Z","updated":"2023-07-11T14:37:00.000Z","keywords":"SpringBoot","description":"SpringBoot 核心功能  学习","_content":"\n# SpringBoot核心功能\n\n重点：\n\nspringboot使用的springmvc的底层 所有请求都经过 DispatchServlet.java文件\n\n## 1. 配置文件\n\n### 1.文件类型\n\n**properties文件的优先级高于yaml**\n\n#### 1.1 properties\n\n同以前的properties用法\n\n#### 1.2 yaml\n\n##### 1.2.1 简介\n\nYAML 是 \"YAML Ain't Markup Language\"（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：\"Yet Another Markup Language\"（仍是一种标记语言）。 \n\n非常适合用来做以数据为中心的配置文件\n\n##### 1.2.2 基本语法\n\n- key: value；kv之间有空格\n- 大小写敏感\n- 使用缩进表示层级关系\n- 缩进不允许使用tab，只允许空格\n- 缩进的空格数不重要，只要相同层级的元素左对齐即可\n- '#'表示注释\n- 字符串无需加引号，如果要加，''与\"\"表示字符串内容 会被 转义/不转义\n\n**‘  ’**会被以串字符串输出\n\n##### 1.2.3 数据类型\n\n- 字面量：单个的、不可再分的值。date、boolean、string、number、null\n\n~~~yaml\nk: v\n~~~\n\n- 对象：键值对的集合。map、hash、set、object \n\n~~~yaml\n行内写法：  k: {k1:v1,k2:v2,k3:v3}\n#或\nk: \n  k1: v1\n  k2: v2\n  k3: v3\n~~~\n\n- 数组：一组按次序排列的值。array、list、queue\n\n~~~yaml\n行内写法：  k: [v1,v2,v3]\n#或者\nk:\n - v1\n - v2\n - v3\n~~~\n\n##### 1.2.4 示例\n\n~~~java\n@Data\npublic class Person {\n\t\n\tprivate String userName;\n\tprivate Boolean boss;\n\tprivate Date birth;\n\tprivate Integer age;\n\tprivate Pet pet;\n\tprivate String[] interests;\n\tprivate List<String> animal;\n\tprivate Map<String, Object> score;\n\tprivate Set<Double> salarys;\n\tprivate Map<String, List<Pet>> allPets;\n}\n\n@Data\npublic class Pet {\n\tprivate String name;\n\tprivate Double weight;\n}\n~~~\n\n~~~yaml\n# yaml表示以上对象\nperson:\n  userName: zhangsan\n  boss: false\n  birth: 2019/12/12 20:12:33\n  age: 18\n  pet: \n    name: tomcat\n    weight: 23.4\n  interests: [篮球,游泳]\n  animal: \n    - jerry\n    - mario\n  score:\n    english: \n      first: 30\n      second: 40\n      third: 50\n    math: [131,140,148]\n    chinese: {first: 128,second: 136}\n  salarys: [3999,4999.98,5999.99]\n  allPets:\n    sick:\n      - {name: tom}\n      - {name: jerry,weight: 47}\n    health: [{name: mario,weight: 47}]\n~~~\n\n### 2. 配置提示\n\n自定义的类和配置文件绑定一般没有提示。\n\n如何来使它有提示：\n\n~~~xml\n<!--        用于自定义的类和配置文件绑定后有提示-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n\n<build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n<!--                用于打包后将自定义的类和配置文件绑定提示的相关依赖去除 减少文件占用-->\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.springframework.boot</groupId>\n                            <artifactId>spring-boot-configuration-processor</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n~~~\n\n## 2. Web开发\n\n![image-20220509133335937](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509133335937.png)\n\n\n\n### 1. SpringMVC自动配置概览\n\nSpring Boot provides auto-configuration for Spring MVC that **works well with most applications.(大多场景我们都无需自定义配置)**\n\nThe auto-configuration adds the following features on top of Spring’s defaults:\n\n- Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\n\n- - 内容协商视图解析器和BeanName视图解析器\n\n- Support for serving static resources, including support for WebJars (covered [later in this document](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content))).\n\n- - 静态资源（包括webjars）\n\n- Automatic registration of `Converter`, `GenericConverter`, and `Formatter` beans.\n\n- - 自动注册 `Converter，GenericConverter，Formatter `\n\n- Support for `HttpMessageConverters` (covered [later in this document](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters)).\n\n- - 支持 `HttpMessageConverters` （后来我们配合内容协商理解原理）\n\n- Automatic registration of `MessageCodesResolver` (covered [later in this document](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes)).\n\n- - 自动注册 `MessageCodesResolver` （国际化用）\n\n- Static `index.html` support.\n\n- - 静态index.html 页支持\n\n- Custom `Favicon` support (covered [later in this document](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon)).\n\n- - 自定义 `Favicon`  \n\n- Automatic use of a `ConfigurableWebBindingInitializer` bean (covered [later in this document](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer)).\n\n- - 自动使用 `ConfigurableWebBindingInitializer` ，（DataBinder负责将请求数据绑定到JavaBean上）\n\nIf you want to keep those Spring Boot MVC customizations and make more [MVC customizations](https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc) (interceptors, formatters, view controllers, and other features), you can add your own `@Configuration` class of type `WebMvcConfigurer` but **without** `@EnableWebMvc`.\n\n**不用@EnableWebMvc注解。使用** `**@Configuration**` **+** `**WebMvcConfigurer**` **自定义规则**\n\n\n\nIf you want to provide custom instances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter`, or `ExceptionHandlerExceptionResolver`, and still keep the Spring Boot MVC customizations, you can declare a bean of type `WebMvcRegistrations` and use it to provide custom instances of those components.\n\n**声明** `**WebMvcRegistrations**` **改变默认底层组件**\n\n\n\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration` annotated with `@EnableWebMvc`, or alternatively add your own `@Configuration`-annotated `DelegatingWebMvcConfiguration` as described in the Javadoc of `@EnableWebMvc`.\n\n**使用** `**@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC**`\n\n### 2.简单功能分析\n\n#### 2.1 静态资源访问\n\n##### 1. 静态资源目录\n\n只要静态资源放在类路径下： called `/static` (or `/public` or `/resources` or `/META-INF/resources`\n\n访问 ： 当前项目根路径/ + 静态资源名 \n\n\n\n原理： 静态映射/**。\n\n请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面\n\n\n\n改变默认的静态资源路径\n\n~~~yaml\nspring:\n  mvc:\n    static-path-pattern: /res/**\n\n  resources:\n    static-locations: [classpath:/haha/]\n~~~\n\n##### 2.静态资源访问前缀\n\n~~~yaml\nspring:\n  mvc:\n    static-path-pattern: /res/**\n~~~\n\n当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找\n\n##### 3.webjar\n\n一些静态资源通过地址进行访问或者调用，首先导入相关静态资源的依赖如（jquery)在找到相关包所在的路径通过返回值进行返回\n\n自动映射 /[webjars](http://localhost:8080/webjars/jquery/3.5.1/jquery.js)/**\n\nhttps://www.webjars.org/\n\n~~~xml\n        <dependency>\n            <groupId>org.webjars</groupId>\n            <artifactId>jquery</artifactId>\n            <version>3.5.1</version>\n        </dependency>\n~~~\n\n访问地址：[http://localhost:8080/webjars/**jquery/3.5.1/jquery.js**](http://localhost:8080/webjars/jquery/3.5.1/jquery.js)   后面地址要按照依赖里面的包路径\n\n#### 2.2 欢迎页支持\n\n- 静态资源路径下  index.html\n\n- - 可以配置静态资源路径\n\n  - 但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问\n\n    ~~~yaml\n    spring:\n    #  mvc:\n    #    static-path-pattern: /res/**     #这个会导致welcome page功能失效\n       resources:\n         static-locations: [classpath:/yu/]\n    ~~~\n\n    - controller能处理/index\n\n#### 2.3 、自定义 `Favicon`\n\nfavicon.ico 放在静态资源目录下即可。\n\n~~~yaml\nspring:\n#  mvc:\n#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效\n~~~\n\n#### 2.4 静态资源配置原理\n\n![image-20220509155320298](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509155320298.png)\n\n![image-20220509155414389](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509155414389.png)\n\n- SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）\n- SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效\n\n~~~java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {}\n~~~\n\n- 给容器中配了什么。\n\n~~~java\n\t@Configuration(proxyBeanMethods = false)\n\t@Import(EnableWebMvcConfiguration.class)\n\t@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n\t@Order(0)\n\tpublic static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer {}\n~~~\n\n- 配置文件的相关属性和xxx进行了绑定。WebMvcProperties==**spring.mvc**、ResourceProperties==**spring.resources**\n\n##### 1、配置类只有一个有参构造器\n\n~~~java\n\t//有参构造器所有参数的值都会从容器中确定\n//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象\n//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象\n//ListableBeanFactory beanFactory Spring的beanFactory\n//HttpMessageConverters 找到所有的HttpMessageConverters\n//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========\n//DispatcherServletPath  \n//ServletRegistrationBean   给应用注册Servlet、Filter....\n\tpublic WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,\n\t\t\t\tListableBeanFactory beanFactory, ObjectProvider<HttpMessageConverters> messageConvertersProvider,\n\t\t\t\tObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider,\n\t\t\t\tObjectProvider<DispatcherServletPath> dispatcherServletPath,\n\t\t\t\tObjectProvider<ServletRegistrationBean<?>> servletRegistrations) {\n\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\tthis.mvcProperties = mvcProperties;\n\t\t\tthis.beanFactory = beanFactory;\n\t\t\tthis.messageConvertersProvider = messageConvertersProvider;\n\t\t\tthis.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();\n\t\t\tthis.dispatcherServletPath = dispatcherServletPath;\n\t\t\tthis.servletRegistrations = servletRegistrations;\n\t\t}\n~~~\n\n##### 2、资源处理的默认规则\n\n~~~java\n@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug(\"Default resource handling disabled\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tDuration cachePeriod = this.resourceProperties.getCache().getPeriod();\n\t\t\tCacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();\n\t\t\t//webjars的规则\n            if (!registry.hasMappingForPattern(\"/webjars/**\")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(\"/webjars/**\")\n\t\t\t\t\t\t.addResourceLocations(\"classpath:/META-INF/resources/webjars/\")\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n            \n            //\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n\t\t}\n~~~\n\n~~~yaml\nspring:\n#  mvc:\n#    static-path-pattern: /res/**\n\n  resources:\n    add-mappings: false   禁用所有静态资源规则\n~~~\n\n~~~java\n@ConfigurationProperties(prefix = \"spring.resources\", ignoreUnknownFields = false)\npublic class ResourceProperties {\n\n\tprivate static final String[] CLASSPATH_RESOURCE_LOCATIONS = { \"classpath:/META-INF/resources/\",\n\t\t\t\"classpath:/resources/\", \"classpath:/static/\", \"classpath:/public/\" };\n\n\t/**\n\t * Locations of static resources. Defaults to classpath:[/META-INF/resources/,\n\t * /resources/, /static/, /public/].\n\t */\n\tprivate String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;\n~~~\n\n##### 3.欢迎页的处理规则\n\n~~~java\n\tHandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。\t\n\n\t@Bean\n\t\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,\n\t\t\t\tFormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) {\n\t\t\tWelcomePageHandlerMapping welcomePageHandlerMapping = new WelcomePageHandlerMapping(\n\t\t\t\t\tnew TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),\n\t\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t\t\twelcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));\n\t\t\twelcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());\n\t\t\treturn welcomePageHandlerMapping;\n\t\t}\n\n\tWelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,\n\t\t\tApplicationContext applicationContext, Optional<Resource> welcomePage, String staticPathPattern) {\n\t\tif (welcomePage.isPresent() && \"/**\".equals(staticPathPattern)) {\n            //要用欢迎页功能，必须是/**\n\t\t\tlogger.info(\"Adding welcome page: \" + welcomePage.get());\n\t\t\tsetRootViewName(\"forward:index.html\");\n\t\t}\n\t\telse if (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) {\n            // 调用Controller  /index\n\t\t\tlogger.info(\"Adding welcome page template: index\");\n\t\t\tsetRootViewName(\"index\");\n\t\t}\n\t}\n\n~~~\n\n##### 4.favicon\n\n浏览器会发送/favicon.ico请求获取到图标，整个session期间不在获取\n\n### 3.请求参数处理\n\n#### 0 请求映射\n\n @RequestMapping(value = \"/user\",method = RequestMethod.DELETE)   和\n    @DeleteMapping(\"/user\")    是相同的，能够完成同种功能。\n\n##### 1.rest使用与原理\n\n- @xxxMapping；\n- Rest风格支持（*使用**HTTP**请求方式动词来表示对资源的操作*）\n\n- - *以前：**/getUser*  *获取用户*    */deleteUser* *删除用户*   */editUser*  *修改用户*      */saveUser* *保存用户*\n  - *现在： /user*    *GET-**获取用户*    *DELETE-**删除用户*     *PUT-**修改用户*      *POST-**保存用户*\n  - 核心Filter；HiddenHttpMethodFilter\n\n- - - 用法： 表单method=post，隐藏域 _method=put\n    - SpringBoot中手动开启\n\n- - 扩展：如何把_method 这个名字换成我们自己喜欢的\n\n~~~java\n======================================前端=======================\n    <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>你好</title>\n</head>\n<body>\n<h1>Speingboot 2 你好</h1>\n<form action=\"/user\" method=\"get\">\n    <input value=\"REST-GET 提交 查\" type=\"submit\">\n</form>\n<form action=\"/user\" method=\"post\">\n    <input value=\"REST-POST 提交 增\" type=\"submit\">\n</form>\n<form action=\"/user\" method=\"post\">\n    <input name=\"_method\" type=\"hidden\" value=\"DELETE\">\n    <input value=\"REST-DELETE 提交 删\" type=\"submit\">\n</form>\n<form action=\"/user\" method=\"post\">\n    <input name=\"_method\" type=\"hidden\" value=\"PUT\">\n    <input value=\"REST-PUT 提交 改 一般用于修改\" type=\"submit\">\n</form>\n</body>\n</html>\n    ====================后端========================\n//    @RequestMapping(value = \"/user\",method = RequestMethod.GET)\n    @GetMapping(\"/user\")\n    public String getUser(){\n        return \"GET-张三\";\n    }\n    \n//    @RequestMapping(value = \"/user\",method = RequestMethod.POST)\n    @PostMapping(\"/user\")\n    public String postUser(){\n        return \"POST-张三\";\n    }\n    \n//    @RequestMapping(value = \"/user\",method = RequestMethod.PUT)\n    @PutMapping(\"/user\")\n    public String putUser(){\n        return \"PUT-张三\";\n    }\n    \n//    @RequestMapping(value = \"/user\",method = RequestMethod.DELETE)\n    @DeleteMapping(\"/user\")\n    public String deleteUser(){\n        return \"DELETE-张三\";\n    }\n\n\n//SpringBoot中手动开启HiddenHttpMethodFilter   原理部分\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\t@ConditionalOnProperty(prefix = \"spring.mvc.hiddenmethod.filter\", name = \"enabled\", matchIfMissing = false)\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t}\n\n\n/**\n * 自定义filter   可以在controller也可以在config里面   即 Put DELETE等提交方式 使用from表单时如何_method 替换成自己定义的\n *             <form action=\"/user\" method=\"post\">\n *    <input name=\"_method\" type=\"hidden\" value=\"PUT\">\n *     <input name=\"_m\" type=\"hidden\" value=\"PUT\">\n *     <input value=\"REST-PUT 提交 改 一般用于修改\" type=\"submit\">\n * </form>\n */\n    @Bean\n    public HiddenHttpMethodFilter hiddenHttpMethodFilter(){\n        HiddenHttpMethodFilter methodFilter = new HiddenHttpMethodFilter();\n        methodFilter.setMethodParam(\"_m\");\n        return methodFilter;\n    }\n=======================开启HiddenHttpMethodFilter================================\n    spring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true   #开启页面表单的Rest功能\n~~~\n\nRest原理（表单提交要使用REST的时候）\n\n- 表单提交会带上**_method=PUT**\n- **请求过来被**HiddenHttpMethodFilter拦截\n\n- - 请求是否正常，并且是POST\n\n- - - 获取到**_method**的值。\n    - 兼容以下请求；**PUT**.**DELETE**.**PATCH**\n    - **原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。**\n    - **过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。**\n\n**Rest使用客户端工具，**\n\n- 如PostMan直接发送Put、delete等方式请求，无需Filter。\n\n~~~yaml\nspring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true   #开启页面表单的Rest功能\n~~~\n\n##### 2. 请求映射原理\n\n![image-20220510140832254](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510140832254.png)\n\nSpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）\n\n![image-20220510141536945](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510141536945.png)\n\n~~~java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// 找到当前请求使用哪个Handler（Controller的方法）处理\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n                \n                //HandlerMapping：处理器映射。/xxx->>xxxx\n~~~\n\n![image-20220510140933607](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510140933607.png)\n\n**RequestMappingHandlerMapping**：保存了所有@RequestMapping 和handler的映射规则。\n\n![image-20220510141027345](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510141027345.png)\n\n所有的请求映射都在HandlerMapping中。\n\n- SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html；\n- SpringBoot自动配置了默认 的 RequestMappingHandlerMapping\n- 请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。\n\n- - 如果有就找到这个请求对应的handler\n  - 如果没有就是下一个 HandlerMapping\n\n- 我们需要一些自定义的映射处理，我们也可以自己给容器中放**HandlerMapping**。自定义 **HandlerMapping**\n\n~~~java\n\tprotected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n\t\tif (this.handlerMappings != null) {\n\t\t\tfor (HandlerMapping mapping : this.handlerMappings) {\n\t\t\t\tHandlerExecutionChain handler = mapping.getHandler(request);\n\t\t\t\tif (handler != null) {\n\t\t\t\t\treturn handler;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n~~~\n\n### 4.普通参数与基本注解\n\n#### 4.1 注解\n\n@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody\n\n~~~java\n\n@RestController\npublic class ParameterTestController {\n\n\n/**\n * 前提 ： @GetMapping(\"/car/{id}/owner/{username}\")\n *1.@PathVariable  路径变量\n *  前端访问   <a href=\"/car/3/owner/lisi\">car/{id}/owner/{username}</a>\n * 即能获取到浏览器地址栏中的变量   带有参数就只去参数 不带参数可以通过\n * {@PathVariable Map<String,String> pv} Map<String,String> 来获取全部 map的泛型必须是String\n * 2.@RequestHeader  该注解是 用于获取请求头   集具体用法类似于1\n *3.@RequestParam  获取请求参数   例：\n * 前端部分   <a href=\"/car/3/owner/lisi?age=18&initers=bask&initers=aaa\">car/{id}/owner/{username}</a>\n * @RequestParam(\"age\") Integer age,  获取单个参数\n * @RequestParam(\"initers\") List<String> initers,  获取列表\n * @RequestParam Map<String, String> params    获取全部参数\n *4.@CookieValue  获取cookie  必须要有其名字   以Cookie为 类型不能添加至Map之中进行返回前端，在后端拿到Cookie后能作相应处理\n * @CookieValue(\"Webstorm-f21fb5b0\") String _dd,\n *  @CookieValue(\"Webstorm-f21fb5b0\") Cookie cookie\n *  5.@RequestBody   获取请求体【POST】\n *  前端 ： <form action=\"/save\" method=\"post\">\n *     测试RequestBody获取数据<br/>\n *     用户名：<input name=\"username\"><br/>\n *     邮箱：<input name=\"email\"><br/>\n *     <input type=\"submit\" value=\"提交\">\n * </form>\n * 获取到的数据为 拼接后的数据   \"conter\": \"username=yu&email=2837041086%40qq.com\"\n */\n\n    @GetMapping(\"/car/{id}/owner/{username}\")\n    public Map<String,Object> getCar(\n            @PathVariable(\"id\") Integer id,\n            @PathVariable(\"username\") String name,\n            @PathVariable Map<String,String> pv,\n            @RequestHeader(\"User-Agent\") String userAgent,\n            @RequestHeader Map<String,String> header,\n            @RequestParam(\"age\") Integer age,\n            @RequestParam(\"initers\") List<String> initers,\n            @RequestParam Map<String,String> params,\n            @CookieValue(\"Webstorm-f21fb5b0\") String _dd,\n            @CookieValue(\"Webstorm-f21fb5b0\") Cookie cookie\n            ){\n        Map<String,Object> map = new HashMap<>();\n//        map.put(\"id\",id);\n//        map.put(\"username\",name);\n//        map.put(\"pv\",pv);\n//        map.put(\"userAgent\",userAgent);\n//        map.put(\"header\",header);\n        map.put(\"age\",age);\n        map.put(\"initers\",initers);\n        map.put(\"params\",params);\n        map.put(\"_dd\",_dd);\n//        map.put(\"cookie\",cookie);\n        System.out.println(cookie.getName()+\"===>\"+cookie.getValue());\n        return map;\n    }\n\n    @PostMapping(\"/save\")\n    public Map postMeth(@RequestBody String conter){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"conter\",conter);\n//        System.out.println(conter.toString());\n//        System.out.println(conter.toLowerCase());\n        return map;\n    }\n\n//    矩阵变量\n//   1.语法： /car/sell;low=89;brand=cc,aa,dd\n//    2.springboot默认是禁用了矩阵变量的功能\n//            手动开启：原理。 对路径的处理。 UrlPathHelper进行解析\n//                removeSemicoloContent （移除分好内容）  支持矩阵变量\n//    3.矩阵变量必须有url路径变量（    @GetMapping(\"/car/{path}\")）才能被解析\n    @GetMapping(\"/car/{path}\")\n    public Map carsSell(\n            @MatrixVariable(\"low\") Integer low,\n            @MatrixVariable(\"brand\") List<String> brand,\n            @PathVariable(\"path\") String path\n    ){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"low\",low);\n        map.put(\"brand\",brand);\n        map.put(\"path\",path);\n        return map;\n    }\n    @GetMapping(\"/boss/{bossId}/{empId}\")\n    public Map boss(\n            @MatrixVariable(value = \"age\",pathVar = \"bossId\") Integer bossAge,\n            @MatrixVariable(value = \"age\",pathVar = \"empId\") Integer empAge\n    ){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"bossAge\",bossAge);\n        map.put(\"empAge\",empAge);\n        return map;\n    }\n\n}\n===========================前端==================================\n    测试基本注解：\n<ul>\n<!--    <a href=\"/car/3/owner/lisi\">car/{id}/owner/{username}</a>-->\n    <a href=\"/car/3/owner/lisi?age=18&initers=bask&initers=aaa\">car/{id}/owner/{username}</a>\n    <li>@PathVariable(路径变量)</li>\n    <li>@RequestHeader(获取请求头)</li>\n    <li>@RequestParam(获取请求参数)</li>\n    <li>@CookieValue(获取cookie)</li>\n    <li>@RequestBody(获取请求体【POST】)</li>\n\n    <li>@RequestAttribute(获取request域属性)</li>\n    <li>@MatrixVariable(矩阵变量)</li>\n</ul>\n<br/>\n<h2>request域属性所需</h2>\n<form action=\"/save\" method=\"post\">\n    测试RequestBody获取数据<br/>\n    用户名：<input name=\"username\"><br/>\n    邮箱：<input name=\"email\"><br/>\n    <input type=\"submit\" value=\"提交\">\n</form>\n<br/>\n<h2>矩阵变量所需</h2>\n/cars/{path}?xxx=xxx&aaa=ccc  querySting查询字符串。@RequesParam;<br/>\n/cars/{path;low=89;brand=cc,aa,dd}   矩阵变量<br/>\n页面开发，cookie禁用了，session里面的内容怎么使用；\nsession.set(a,b)---》jsession---》cookie---》每次发送请求携带\nurl重写：/abc；jsessionid=xxx   把cookie的值使用矩阵变量的方式进行传递<br/>\n<a href=\"/car/sell;low=89;brand=cc,aa,dd\">@MatrixVariable(矩阵变量)/car/sell;low=89;brand=cc,aa,dd</a><br/>\n<a href=\"/car/sell;low=89;brand=cc;brand=aa;brand=dd\">@MatrixVariable(矩阵变量)/car/sell;low=89;brand=cc;brand=aa;brand=dd</a><br/>\n<a href=\"/boss/1;age=20/2;age10\">@MatrixVariable(矩阵变量)/boss/{boosId}/{empId}</a><br/>\n<ol>\n    <li>矩阵变量需要在springboot中手动开启</li>\n    <li>根据RFC3896的规范，矩阵变量应当绑定在路径变量中</li>\n    <li>若是有多个矩阵变量，应当使用英文符号;进行分隔</li>\n    <li>若是一个矩阵变量有多个值，应当使用英文符号,进行分隔，或命名多个重复的key即可</li>\n    <li>如：/car/sell;low=89;brand=cc,aa,dd</li>\n</ol>\n~~~\n\n","source":"_posts/SpringBoot核心功能.md","raw":"\n---\n\ntitle: SpringBoot核心功能\ndate: 2023-07-11 22:37\nupdated: 2023-07-11 22:37\ntags: SpringBoot\ncategories: SpringBoot\nkeywords: SpringBoot\ndescription: SpringBoot 核心功能  学习\n\n---\n\n# SpringBoot核心功能\n\n重点：\n\nspringboot使用的springmvc的底层 所有请求都经过 DispatchServlet.java文件\n\n## 1. 配置文件\n\n### 1.文件类型\n\n**properties文件的优先级高于yaml**\n\n#### 1.1 properties\n\n同以前的properties用法\n\n#### 1.2 yaml\n\n##### 1.2.1 简介\n\nYAML 是 \"YAML Ain't Markup Language\"（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：\"Yet Another Markup Language\"（仍是一种标记语言）。 \n\n非常适合用来做以数据为中心的配置文件\n\n##### 1.2.2 基本语法\n\n- key: value；kv之间有空格\n- 大小写敏感\n- 使用缩进表示层级关系\n- 缩进不允许使用tab，只允许空格\n- 缩进的空格数不重要，只要相同层级的元素左对齐即可\n- '#'表示注释\n- 字符串无需加引号，如果要加，''与\"\"表示字符串内容 会被 转义/不转义\n\n**‘  ’**会被以串字符串输出\n\n##### 1.2.3 数据类型\n\n- 字面量：单个的、不可再分的值。date、boolean、string、number、null\n\n~~~yaml\nk: v\n~~~\n\n- 对象：键值对的集合。map、hash、set、object \n\n~~~yaml\n行内写法：  k: {k1:v1,k2:v2,k3:v3}\n#或\nk: \n  k1: v1\n  k2: v2\n  k3: v3\n~~~\n\n- 数组：一组按次序排列的值。array、list、queue\n\n~~~yaml\n行内写法：  k: [v1,v2,v3]\n#或者\nk:\n - v1\n - v2\n - v3\n~~~\n\n##### 1.2.4 示例\n\n~~~java\n@Data\npublic class Person {\n\t\n\tprivate String userName;\n\tprivate Boolean boss;\n\tprivate Date birth;\n\tprivate Integer age;\n\tprivate Pet pet;\n\tprivate String[] interests;\n\tprivate List<String> animal;\n\tprivate Map<String, Object> score;\n\tprivate Set<Double> salarys;\n\tprivate Map<String, List<Pet>> allPets;\n}\n\n@Data\npublic class Pet {\n\tprivate String name;\n\tprivate Double weight;\n}\n~~~\n\n~~~yaml\n# yaml表示以上对象\nperson:\n  userName: zhangsan\n  boss: false\n  birth: 2019/12/12 20:12:33\n  age: 18\n  pet: \n    name: tomcat\n    weight: 23.4\n  interests: [篮球,游泳]\n  animal: \n    - jerry\n    - mario\n  score:\n    english: \n      first: 30\n      second: 40\n      third: 50\n    math: [131,140,148]\n    chinese: {first: 128,second: 136}\n  salarys: [3999,4999.98,5999.99]\n  allPets:\n    sick:\n      - {name: tom}\n      - {name: jerry,weight: 47}\n    health: [{name: mario,weight: 47}]\n~~~\n\n### 2. 配置提示\n\n自定义的类和配置文件绑定一般没有提示。\n\n如何来使它有提示：\n\n~~~xml\n<!--        用于自定义的类和配置文件绑定后有提示-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n\n<build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n<!--                用于打包后将自定义的类和配置文件绑定提示的相关依赖去除 减少文件占用-->\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.springframework.boot</groupId>\n                            <artifactId>spring-boot-configuration-processor</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n~~~\n\n## 2. Web开发\n\n![image-20220509133335937](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509133335937.png)\n\n\n\n### 1. SpringMVC自动配置概览\n\nSpring Boot provides auto-configuration for Spring MVC that **works well with most applications.(大多场景我们都无需自定义配置)**\n\nThe auto-configuration adds the following features on top of Spring’s defaults:\n\n- Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\n\n- - 内容协商视图解析器和BeanName视图解析器\n\n- Support for serving static resources, including support for WebJars (covered [later in this document](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content))).\n\n- - 静态资源（包括webjars）\n\n- Automatic registration of `Converter`, `GenericConverter`, and `Formatter` beans.\n\n- - 自动注册 `Converter，GenericConverter，Formatter `\n\n- Support for `HttpMessageConverters` (covered [later in this document](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters)).\n\n- - 支持 `HttpMessageConverters` （后来我们配合内容协商理解原理）\n\n- Automatic registration of `MessageCodesResolver` (covered [later in this document](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes)).\n\n- - 自动注册 `MessageCodesResolver` （国际化用）\n\n- Static `index.html` support.\n\n- - 静态index.html 页支持\n\n- Custom `Favicon` support (covered [later in this document](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon)).\n\n- - 自定义 `Favicon`  \n\n- Automatic use of a `ConfigurableWebBindingInitializer` bean (covered [later in this document](https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer)).\n\n- - 自动使用 `ConfigurableWebBindingInitializer` ，（DataBinder负责将请求数据绑定到JavaBean上）\n\nIf you want to keep those Spring Boot MVC customizations and make more [MVC customizations](https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc) (interceptors, formatters, view controllers, and other features), you can add your own `@Configuration` class of type `WebMvcConfigurer` but **without** `@EnableWebMvc`.\n\n**不用@EnableWebMvc注解。使用** `**@Configuration**` **+** `**WebMvcConfigurer**` **自定义规则**\n\n\n\nIf you want to provide custom instances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter`, or `ExceptionHandlerExceptionResolver`, and still keep the Spring Boot MVC customizations, you can declare a bean of type `WebMvcRegistrations` and use it to provide custom instances of those components.\n\n**声明** `**WebMvcRegistrations**` **改变默认底层组件**\n\n\n\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration` annotated with `@EnableWebMvc`, or alternatively add your own `@Configuration`-annotated `DelegatingWebMvcConfiguration` as described in the Javadoc of `@EnableWebMvc`.\n\n**使用** `**@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC**`\n\n### 2.简单功能分析\n\n#### 2.1 静态资源访问\n\n##### 1. 静态资源目录\n\n只要静态资源放在类路径下： called `/static` (or `/public` or `/resources` or `/META-INF/resources`\n\n访问 ： 当前项目根路径/ + 静态资源名 \n\n\n\n原理： 静态映射/**。\n\n请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面\n\n\n\n改变默认的静态资源路径\n\n~~~yaml\nspring:\n  mvc:\n    static-path-pattern: /res/**\n\n  resources:\n    static-locations: [classpath:/haha/]\n~~~\n\n##### 2.静态资源访问前缀\n\n~~~yaml\nspring:\n  mvc:\n    static-path-pattern: /res/**\n~~~\n\n当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找\n\n##### 3.webjar\n\n一些静态资源通过地址进行访问或者调用，首先导入相关静态资源的依赖如（jquery)在找到相关包所在的路径通过返回值进行返回\n\n自动映射 /[webjars](http://localhost:8080/webjars/jquery/3.5.1/jquery.js)/**\n\nhttps://www.webjars.org/\n\n~~~xml\n        <dependency>\n            <groupId>org.webjars</groupId>\n            <artifactId>jquery</artifactId>\n            <version>3.5.1</version>\n        </dependency>\n~~~\n\n访问地址：[http://localhost:8080/webjars/**jquery/3.5.1/jquery.js**](http://localhost:8080/webjars/jquery/3.5.1/jquery.js)   后面地址要按照依赖里面的包路径\n\n#### 2.2 欢迎页支持\n\n- 静态资源路径下  index.html\n\n- - 可以配置静态资源路径\n\n  - 但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问\n\n    ~~~yaml\n    spring:\n    #  mvc:\n    #    static-path-pattern: /res/**     #这个会导致welcome page功能失效\n       resources:\n         static-locations: [classpath:/yu/]\n    ~~~\n\n    - controller能处理/index\n\n#### 2.3 、自定义 `Favicon`\n\nfavicon.ico 放在静态资源目录下即可。\n\n~~~yaml\nspring:\n#  mvc:\n#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效\n~~~\n\n#### 2.4 静态资源配置原理\n\n![image-20220509155320298](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509155320298.png)\n\n![image-20220509155414389](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509155414389.png)\n\n- SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）\n- SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效\n\n~~~java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {}\n~~~\n\n- 给容器中配了什么。\n\n~~~java\n\t@Configuration(proxyBeanMethods = false)\n\t@Import(EnableWebMvcConfiguration.class)\n\t@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n\t@Order(0)\n\tpublic static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer {}\n~~~\n\n- 配置文件的相关属性和xxx进行了绑定。WebMvcProperties==**spring.mvc**、ResourceProperties==**spring.resources**\n\n##### 1、配置类只有一个有参构造器\n\n~~~java\n\t//有参构造器所有参数的值都会从容器中确定\n//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象\n//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象\n//ListableBeanFactory beanFactory Spring的beanFactory\n//HttpMessageConverters 找到所有的HttpMessageConverters\n//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========\n//DispatcherServletPath  \n//ServletRegistrationBean   给应用注册Servlet、Filter....\n\tpublic WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,\n\t\t\t\tListableBeanFactory beanFactory, ObjectProvider<HttpMessageConverters> messageConvertersProvider,\n\t\t\t\tObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider,\n\t\t\t\tObjectProvider<DispatcherServletPath> dispatcherServletPath,\n\t\t\t\tObjectProvider<ServletRegistrationBean<?>> servletRegistrations) {\n\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\tthis.mvcProperties = mvcProperties;\n\t\t\tthis.beanFactory = beanFactory;\n\t\t\tthis.messageConvertersProvider = messageConvertersProvider;\n\t\t\tthis.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();\n\t\t\tthis.dispatcherServletPath = dispatcherServletPath;\n\t\t\tthis.servletRegistrations = servletRegistrations;\n\t\t}\n~~~\n\n##### 2、资源处理的默认规则\n\n~~~java\n@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug(\"Default resource handling disabled\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tDuration cachePeriod = this.resourceProperties.getCache().getPeriod();\n\t\t\tCacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();\n\t\t\t//webjars的规则\n            if (!registry.hasMappingForPattern(\"/webjars/**\")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(\"/webjars/**\")\n\t\t\t\t\t\t.addResourceLocations(\"classpath:/META-INF/resources/webjars/\")\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n            \n            //\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n\t\t}\n~~~\n\n~~~yaml\nspring:\n#  mvc:\n#    static-path-pattern: /res/**\n\n  resources:\n    add-mappings: false   禁用所有静态资源规则\n~~~\n\n~~~java\n@ConfigurationProperties(prefix = \"spring.resources\", ignoreUnknownFields = false)\npublic class ResourceProperties {\n\n\tprivate static final String[] CLASSPATH_RESOURCE_LOCATIONS = { \"classpath:/META-INF/resources/\",\n\t\t\t\"classpath:/resources/\", \"classpath:/static/\", \"classpath:/public/\" };\n\n\t/**\n\t * Locations of static resources. Defaults to classpath:[/META-INF/resources/,\n\t * /resources/, /static/, /public/].\n\t */\n\tprivate String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;\n~~~\n\n##### 3.欢迎页的处理规则\n\n~~~java\n\tHandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。\t\n\n\t@Bean\n\t\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,\n\t\t\t\tFormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) {\n\t\t\tWelcomePageHandlerMapping welcomePageHandlerMapping = new WelcomePageHandlerMapping(\n\t\t\t\t\tnew TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),\n\t\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t\t\twelcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));\n\t\t\twelcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());\n\t\t\treturn welcomePageHandlerMapping;\n\t\t}\n\n\tWelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,\n\t\t\tApplicationContext applicationContext, Optional<Resource> welcomePage, String staticPathPattern) {\n\t\tif (welcomePage.isPresent() && \"/**\".equals(staticPathPattern)) {\n            //要用欢迎页功能，必须是/**\n\t\t\tlogger.info(\"Adding welcome page: \" + welcomePage.get());\n\t\t\tsetRootViewName(\"forward:index.html\");\n\t\t}\n\t\telse if (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) {\n            // 调用Controller  /index\n\t\t\tlogger.info(\"Adding welcome page template: index\");\n\t\t\tsetRootViewName(\"index\");\n\t\t}\n\t}\n\n~~~\n\n##### 4.favicon\n\n浏览器会发送/favicon.ico请求获取到图标，整个session期间不在获取\n\n### 3.请求参数处理\n\n#### 0 请求映射\n\n @RequestMapping(value = \"/user\",method = RequestMethod.DELETE)   和\n    @DeleteMapping(\"/user\")    是相同的，能够完成同种功能。\n\n##### 1.rest使用与原理\n\n- @xxxMapping；\n- Rest风格支持（*使用**HTTP**请求方式动词来表示对资源的操作*）\n\n- - *以前：**/getUser*  *获取用户*    */deleteUser* *删除用户*   */editUser*  *修改用户*      */saveUser* *保存用户*\n  - *现在： /user*    *GET-**获取用户*    *DELETE-**删除用户*     *PUT-**修改用户*      *POST-**保存用户*\n  - 核心Filter；HiddenHttpMethodFilter\n\n- - - 用法： 表单method=post，隐藏域 _method=put\n    - SpringBoot中手动开启\n\n- - 扩展：如何把_method 这个名字换成我们自己喜欢的\n\n~~~java\n======================================前端=======================\n    <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>你好</title>\n</head>\n<body>\n<h1>Speingboot 2 你好</h1>\n<form action=\"/user\" method=\"get\">\n    <input value=\"REST-GET 提交 查\" type=\"submit\">\n</form>\n<form action=\"/user\" method=\"post\">\n    <input value=\"REST-POST 提交 增\" type=\"submit\">\n</form>\n<form action=\"/user\" method=\"post\">\n    <input name=\"_method\" type=\"hidden\" value=\"DELETE\">\n    <input value=\"REST-DELETE 提交 删\" type=\"submit\">\n</form>\n<form action=\"/user\" method=\"post\">\n    <input name=\"_method\" type=\"hidden\" value=\"PUT\">\n    <input value=\"REST-PUT 提交 改 一般用于修改\" type=\"submit\">\n</form>\n</body>\n</html>\n    ====================后端========================\n//    @RequestMapping(value = \"/user\",method = RequestMethod.GET)\n    @GetMapping(\"/user\")\n    public String getUser(){\n        return \"GET-张三\";\n    }\n    \n//    @RequestMapping(value = \"/user\",method = RequestMethod.POST)\n    @PostMapping(\"/user\")\n    public String postUser(){\n        return \"POST-张三\";\n    }\n    \n//    @RequestMapping(value = \"/user\",method = RequestMethod.PUT)\n    @PutMapping(\"/user\")\n    public String putUser(){\n        return \"PUT-张三\";\n    }\n    \n//    @RequestMapping(value = \"/user\",method = RequestMethod.DELETE)\n    @DeleteMapping(\"/user\")\n    public String deleteUser(){\n        return \"DELETE-张三\";\n    }\n\n\n//SpringBoot中手动开启HiddenHttpMethodFilter   原理部分\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\t@ConditionalOnProperty(prefix = \"spring.mvc.hiddenmethod.filter\", name = \"enabled\", matchIfMissing = false)\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t}\n\n\n/**\n * 自定义filter   可以在controller也可以在config里面   即 Put DELETE等提交方式 使用from表单时如何_method 替换成自己定义的\n *             <form action=\"/user\" method=\"post\">\n *    <input name=\"_method\" type=\"hidden\" value=\"PUT\">\n *     <input name=\"_m\" type=\"hidden\" value=\"PUT\">\n *     <input value=\"REST-PUT 提交 改 一般用于修改\" type=\"submit\">\n * </form>\n */\n    @Bean\n    public HiddenHttpMethodFilter hiddenHttpMethodFilter(){\n        HiddenHttpMethodFilter methodFilter = new HiddenHttpMethodFilter();\n        methodFilter.setMethodParam(\"_m\");\n        return methodFilter;\n    }\n=======================开启HiddenHttpMethodFilter================================\n    spring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true   #开启页面表单的Rest功能\n~~~\n\nRest原理（表单提交要使用REST的时候）\n\n- 表单提交会带上**_method=PUT**\n- **请求过来被**HiddenHttpMethodFilter拦截\n\n- - 请求是否正常，并且是POST\n\n- - - 获取到**_method**的值。\n    - 兼容以下请求；**PUT**.**DELETE**.**PATCH**\n    - **原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。**\n    - **过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。**\n\n**Rest使用客户端工具，**\n\n- 如PostMan直接发送Put、delete等方式请求，无需Filter。\n\n~~~yaml\nspring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true   #开启页面表单的Rest功能\n~~~\n\n##### 2. 请求映射原理\n\n![image-20220510140832254](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510140832254.png)\n\nSpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）\n\n![image-20220510141536945](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510141536945.png)\n\n~~~java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// 找到当前请求使用哪个Handler（Controller的方法）处理\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n                \n                //HandlerMapping：处理器映射。/xxx->>xxxx\n~~~\n\n![image-20220510140933607](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510140933607.png)\n\n**RequestMappingHandlerMapping**：保存了所有@RequestMapping 和handler的映射规则。\n\n![image-20220510141027345](C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510141027345.png)\n\n所有的请求映射都在HandlerMapping中。\n\n- SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html；\n- SpringBoot自动配置了默认 的 RequestMappingHandlerMapping\n- 请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。\n\n- - 如果有就找到这个请求对应的handler\n  - 如果没有就是下一个 HandlerMapping\n\n- 我们需要一些自定义的映射处理，我们也可以自己给容器中放**HandlerMapping**。自定义 **HandlerMapping**\n\n~~~java\n\tprotected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n\t\tif (this.handlerMappings != null) {\n\t\t\tfor (HandlerMapping mapping : this.handlerMappings) {\n\t\t\t\tHandlerExecutionChain handler = mapping.getHandler(request);\n\t\t\t\tif (handler != null) {\n\t\t\t\t\treturn handler;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n~~~\n\n### 4.普通参数与基本注解\n\n#### 4.1 注解\n\n@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody\n\n~~~java\n\n@RestController\npublic class ParameterTestController {\n\n\n/**\n * 前提 ： @GetMapping(\"/car/{id}/owner/{username}\")\n *1.@PathVariable  路径变量\n *  前端访问   <a href=\"/car/3/owner/lisi\">car/{id}/owner/{username}</a>\n * 即能获取到浏览器地址栏中的变量   带有参数就只去参数 不带参数可以通过\n * {@PathVariable Map<String,String> pv} Map<String,String> 来获取全部 map的泛型必须是String\n * 2.@RequestHeader  该注解是 用于获取请求头   集具体用法类似于1\n *3.@RequestParam  获取请求参数   例：\n * 前端部分   <a href=\"/car/3/owner/lisi?age=18&initers=bask&initers=aaa\">car/{id}/owner/{username}</a>\n * @RequestParam(\"age\") Integer age,  获取单个参数\n * @RequestParam(\"initers\") List<String> initers,  获取列表\n * @RequestParam Map<String, String> params    获取全部参数\n *4.@CookieValue  获取cookie  必须要有其名字   以Cookie为 类型不能添加至Map之中进行返回前端，在后端拿到Cookie后能作相应处理\n * @CookieValue(\"Webstorm-f21fb5b0\") String _dd,\n *  @CookieValue(\"Webstorm-f21fb5b0\") Cookie cookie\n *  5.@RequestBody   获取请求体【POST】\n *  前端 ： <form action=\"/save\" method=\"post\">\n *     测试RequestBody获取数据<br/>\n *     用户名：<input name=\"username\"><br/>\n *     邮箱：<input name=\"email\"><br/>\n *     <input type=\"submit\" value=\"提交\">\n * </form>\n * 获取到的数据为 拼接后的数据   \"conter\": \"username=yu&email=2837041086%40qq.com\"\n */\n\n    @GetMapping(\"/car/{id}/owner/{username}\")\n    public Map<String,Object> getCar(\n            @PathVariable(\"id\") Integer id,\n            @PathVariable(\"username\") String name,\n            @PathVariable Map<String,String> pv,\n            @RequestHeader(\"User-Agent\") String userAgent,\n            @RequestHeader Map<String,String> header,\n            @RequestParam(\"age\") Integer age,\n            @RequestParam(\"initers\") List<String> initers,\n            @RequestParam Map<String,String> params,\n            @CookieValue(\"Webstorm-f21fb5b0\") String _dd,\n            @CookieValue(\"Webstorm-f21fb5b0\") Cookie cookie\n            ){\n        Map<String,Object> map = new HashMap<>();\n//        map.put(\"id\",id);\n//        map.put(\"username\",name);\n//        map.put(\"pv\",pv);\n//        map.put(\"userAgent\",userAgent);\n//        map.put(\"header\",header);\n        map.put(\"age\",age);\n        map.put(\"initers\",initers);\n        map.put(\"params\",params);\n        map.put(\"_dd\",_dd);\n//        map.put(\"cookie\",cookie);\n        System.out.println(cookie.getName()+\"===>\"+cookie.getValue());\n        return map;\n    }\n\n    @PostMapping(\"/save\")\n    public Map postMeth(@RequestBody String conter){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"conter\",conter);\n//        System.out.println(conter.toString());\n//        System.out.println(conter.toLowerCase());\n        return map;\n    }\n\n//    矩阵变量\n//   1.语法： /car/sell;low=89;brand=cc,aa,dd\n//    2.springboot默认是禁用了矩阵变量的功能\n//            手动开启：原理。 对路径的处理。 UrlPathHelper进行解析\n//                removeSemicoloContent （移除分好内容）  支持矩阵变量\n//    3.矩阵变量必须有url路径变量（    @GetMapping(\"/car/{path}\")）才能被解析\n    @GetMapping(\"/car/{path}\")\n    public Map carsSell(\n            @MatrixVariable(\"low\") Integer low,\n            @MatrixVariable(\"brand\") List<String> brand,\n            @PathVariable(\"path\") String path\n    ){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"low\",low);\n        map.put(\"brand\",brand);\n        map.put(\"path\",path);\n        return map;\n    }\n    @GetMapping(\"/boss/{bossId}/{empId}\")\n    public Map boss(\n            @MatrixVariable(value = \"age\",pathVar = \"bossId\") Integer bossAge,\n            @MatrixVariable(value = \"age\",pathVar = \"empId\") Integer empAge\n    ){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"bossAge\",bossAge);\n        map.put(\"empAge\",empAge);\n        return map;\n    }\n\n}\n===========================前端==================================\n    测试基本注解：\n<ul>\n<!--    <a href=\"/car/3/owner/lisi\">car/{id}/owner/{username}</a>-->\n    <a href=\"/car/3/owner/lisi?age=18&initers=bask&initers=aaa\">car/{id}/owner/{username}</a>\n    <li>@PathVariable(路径变量)</li>\n    <li>@RequestHeader(获取请求头)</li>\n    <li>@RequestParam(获取请求参数)</li>\n    <li>@CookieValue(获取cookie)</li>\n    <li>@RequestBody(获取请求体【POST】)</li>\n\n    <li>@RequestAttribute(获取request域属性)</li>\n    <li>@MatrixVariable(矩阵变量)</li>\n</ul>\n<br/>\n<h2>request域属性所需</h2>\n<form action=\"/save\" method=\"post\">\n    测试RequestBody获取数据<br/>\n    用户名：<input name=\"username\"><br/>\n    邮箱：<input name=\"email\"><br/>\n    <input type=\"submit\" value=\"提交\">\n</form>\n<br/>\n<h2>矩阵变量所需</h2>\n/cars/{path}?xxx=xxx&aaa=ccc  querySting查询字符串。@RequesParam;<br/>\n/cars/{path;low=89;brand=cc,aa,dd}   矩阵变量<br/>\n页面开发，cookie禁用了，session里面的内容怎么使用；\nsession.set(a,b)---》jsession---》cookie---》每次发送请求携带\nurl重写：/abc；jsessionid=xxx   把cookie的值使用矩阵变量的方式进行传递<br/>\n<a href=\"/car/sell;low=89;brand=cc,aa,dd\">@MatrixVariable(矩阵变量)/car/sell;low=89;brand=cc,aa,dd</a><br/>\n<a href=\"/car/sell;low=89;brand=cc;brand=aa;brand=dd\">@MatrixVariable(矩阵变量)/car/sell;low=89;brand=cc;brand=aa;brand=dd</a><br/>\n<a href=\"/boss/1;age=20/2;age10\">@MatrixVariable(矩阵变量)/boss/{boosId}/{empId}</a><br/>\n<ol>\n    <li>矩阵变量需要在springboot中手动开启</li>\n    <li>根据RFC3896的规范，矩阵变量应当绑定在路径变量中</li>\n    <li>若是有多个矩阵变量，应当使用英文符号;进行分隔</li>\n    <li>若是一个矩阵变量有多个值，应当使用英文符号,进行分隔，或命名多个重复的key即可</li>\n    <li>如：/car/sell;low=89;brand=cc,aa,dd</li>\n</ol>\n~~~\n\n","slug":"SpringBoot核心功能","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cljzumpt40005dgi0327c52jn","content":"<h1 id=\"SpringBoot核心功能\"><a href=\"#SpringBoot核心功能\" class=\"headerlink\" title=\"SpringBoot核心功能\"></a>SpringBoot核心功能</h1><p>重点：</p>\n<p>springboot使用的springmvc的底层 所有请求都经过 DispatchServlet.java文件</p>\n<h2 id=\"1-配置文件\"><a href=\"#1-配置文件\" class=\"headerlink\" title=\"1. 配置文件\"></a>1. 配置文件</h2><h3 id=\"1-文件类型\"><a href=\"#1-文件类型\" class=\"headerlink\" title=\"1.文件类型\"></a>1.文件类型</h3><p><strong>properties文件的优先级高于yaml</strong></p>\n<h4 id=\"1-1-properties\"><a href=\"#1-1-properties\" class=\"headerlink\" title=\"1.1 properties\"></a>1.1 properties</h4><p>同以前的properties用法</p>\n<h4 id=\"1-2-yaml\"><a href=\"#1-2-yaml\" class=\"headerlink\" title=\"1.2 yaml\"></a>1.2 yaml</h4><h5 id=\"1-2-1-简介\"><a href=\"#1-2-1-简介\" class=\"headerlink\" title=\"1.2.1 简介\"></a>1.2.1 简介</h5><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p>\n<p>非常适合用来做以数据为中心的配置文件</p>\n<h5 id=\"1-2-2-基本语法\"><a href=\"#1-2-2-基本语法\" class=\"headerlink\" title=\"1.2.2 基本语法\"></a>1.2.2 基本语法</h5><ul>\n<li>key: value；kv之间有空格</li>\n<li>大小写敏感</li>\n<li>使用缩进表示层级关系</li>\n<li>缩进不允许使用tab，只允许空格</li>\n<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>\n<li>‘#’表示注释</li>\n<li>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义&#x2F;不转义</li>\n</ul>\n<p><strong>‘  ’</strong>会被以串字符串输出</p>\n<h5 id=\"1-2-3-数据类型\"><a href=\"#1-2-3-数据类型\" class=\"headerlink\" title=\"1.2.3 数据类型\"></a>1.2.3 数据类型</h5><ul>\n<li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">k:</span> <span class=\"string\">v</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对象：键值对的集合。map、hash、set、object</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">行内写法：</span>  <span class=\"attr\">k:</span> &#123;<span class=\"string\">k1:v1</span>,<span class=\"string\">k2:v2</span>,<span class=\"string\">k3:v3</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">#或</span></span><br><span class=\"line\"><span class=\"attr\">k:</span> </span><br><span class=\"line\">  <span class=\"attr\">k1:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">k2:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">  <span class=\"attr\">k3:</span> <span class=\"string\">v3</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数组：一组按次序排列的值。array、list、queue</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">行内写法：</span>  <span class=\"attr\">k:</span> [<span class=\"string\">v1</span>,<span class=\"string\">v2</span>,<span class=\"string\">v3</span>]</span><br><span class=\"line\"><span class=\"comment\">#或者</span></span><br><span class=\"line\"><span class=\"attr\">k:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">v1</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">v2</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">v3</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-2-4-示例\"><a href=\"#1-2-4-示例\" class=\"headerlink\" title=\"1.2.4 示例\"></a>1.2.4 示例</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Pet pet;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String[] interests;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; animal;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Object&gt; score;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Set&lt;Double&gt; salarys;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Double weight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yaml表示以上对象</span></span><br><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">userName:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">  <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2019</span><span class=\"string\">/12/12</span> <span class=\"number\">20</span><span class=\"string\">:12:33</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">pet:</span> </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\">    <span class=\"attr\">weight:</span> <span class=\"number\">23.4</span></span><br><span class=\"line\">  <span class=\"attr\">interests:</span> [<span class=\"string\">篮球</span>,<span class=\"string\">游泳</span>]</span><br><span class=\"line\">  <span class=\"attr\">animal:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">jerry</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mario</span></span><br><span class=\"line\">  <span class=\"attr\">score:</span></span><br><span class=\"line\">    <span class=\"attr\">english:</span> </span><br><span class=\"line\">      <span class=\"attr\">first:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">second:</span> <span class=\"number\">40</span></span><br><span class=\"line\">      <span class=\"attr\">third:</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"attr\">math:</span> [<span class=\"number\">131</span>,<span class=\"number\">140</span>,<span class=\"number\">148</span>]</span><br><span class=\"line\">    <span class=\"attr\">chinese:</span> &#123;<span class=\"attr\">first:</span> <span class=\"number\">128</span>,<span class=\"attr\">second:</span> <span class=\"number\">136</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">salarys:</span> [<span class=\"number\">3999</span>,<span class=\"number\">4999.98</span>,<span class=\"number\">5999.99</span>]</span><br><span class=\"line\">  <span class=\"attr\">allPets:</span></span><br><span class=\"line\">    <span class=\"attr\">sick:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">tom</span>&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">jerry</span>,<span class=\"attr\">weight:</span> <span class=\"number\">47</span>&#125;</span><br><span class=\"line\">    <span class=\"attr\">health:</span> [&#123;<span class=\"attr\">name:</span> <span class=\"string\">mario</span>,<span class=\"attr\">weight:</span> <span class=\"number\">47</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置提示\"><a href=\"#2-配置提示\" class=\"headerlink\" title=\"2. 配置提示\"></a>2. 配置提示</h3><p>自定义的类和配置文件绑定一般没有提示。</p>\n<p>如何来使它有提示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--        用于自定义的类和配置文件绑定后有提示--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--                用于打包后将自定义的类和配置文件绑定提示的相关依赖去除 减少文件占用--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Web开发\"><a href=\"#2-Web开发\" class=\"headerlink\" title=\"2. Web开发\"></a>2. Web开发</h2><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509133335937.png\" alt=\"image-20220509133335937\"></p>\n<h3 id=\"1-SpringMVC自动配置概览\"><a href=\"#1-SpringMVC自动配置概览\" class=\"headerlink\" title=\"1. SpringMVC自动配置概览\"></a>1. SpringMVC自动配置概览</h3><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p>\n<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n</li>\n<li><ul>\n<li>内容协商视图解析器和BeanName视图解析器</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content\">later in this document</a>)).</p>\n</li>\n<li><ul>\n<li>静态资源（包括webjars）</li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>\n</li>\n<li><ul>\n<li>自动注册 <code>Converter，GenericConverter，Formatter </code></li>\n</ul>\n</li>\n<li><p>Support for <code>HttpMessageConverters</code> (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li>\n</ul>\n</li>\n<li><p>Static <code>index.html</code> support.</p>\n</li>\n<li><ul>\n<li>静态index.html 页支持</li>\n</ul>\n</li>\n<li><p>Custom <code>Favicon</code> support (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自定义 <code>Favicon</code></li>\n</ul>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li>\n</ul>\n</li>\n</ul>\n<p>If you want to keep those Spring Boot MVC customizations and make more <a href=\"https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc\">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>\n<p><strong>不用@EnableWebMvc注解。使用</strong> <code>**@Configuration**</code> <strong>+</strong> <code>**WebMvcConfigurer**</code> <strong>自定义规则</strong></p>\n<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>\n<p><strong>声明</strong> <code>**WebMvcRegistrations**</code> <strong>改变默认底层组件</strong></p>\n<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>\n<p><strong>使用</strong> <code>**@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC**</code></p>\n<h3 id=\"2-简单功能分析\"><a href=\"#2-简单功能分析\" class=\"headerlink\" title=\"2.简单功能分析\"></a>2.简单功能分析</h3><h4 id=\"2-1-静态资源访问\"><a href=\"#2-1-静态资源访问\" class=\"headerlink\" title=\"2.1 静态资源访问\"></a>2.1 静态资源访问</h4><h5 id=\"1-静态资源目录\"><a href=\"#1-静态资源目录\" class=\"headerlink\" title=\"1. 静态资源目录\"></a>1. 静态资源目录</h5><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p>\n<p>访问 ： 当前项目根路径&#x2F; + 静态资源名 </p>\n<p>原理： 静态映射&#x2F;**。</p>\n<p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p>\n<p>改变默认的静态资源路径</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">static-locations:</span> [<span class=\"string\">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-静态资源访问前缀\"><a href=\"#2-静态资源访问前缀\" class=\"headerlink\" title=\"2.静态资源访问前缀\"></a>2.静态资源访问前缀</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span></span><br></pre></td></tr></table></figure>\n\n<p>当前项目 + static-path-pattern + 静态资源名 &#x3D; 静态资源文件夹下找</p>\n<h5 id=\"3-webjar\"><a href=\"#3-webjar\" class=\"headerlink\" title=\"3.webjar\"></a>3.webjar</h5><p>一些静态资源通过地址进行访问或者调用，首先导入相关静态资源的依赖如（jquery)在找到相关包所在的路径通过返回值进行返回</p>\n<p>自动映射 &#x2F;<a href=\"http://localhost:8080/webjars/jquery/3.5.1/jquery.js\">webjars</a>&#x2F;**</p>\n<p><a href=\"https://www.webjars.org/\">https://www.webjars.org/</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.webjars<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jquery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>访问地址：<a href=\"http://localhost:8080/webjars/jquery/3.5.1/jquery.js\">http://localhost:8080/webjars/<strong>jquery&#x2F;3.5.1&#x2F;jquery.js</strong></a>   后面地址要按照依赖里面的包路径</p>\n<h4 id=\"2-2-欢迎页支持\"><a href=\"#2-2-欢迎页支持\" class=\"headerlink\" title=\"2.2 欢迎页支持\"></a>2.2 欢迎页支持</h4><ul>\n<li><p>静态资源路径下  index.html</p>\n</li>\n<li><ul>\n<li><p>可以配置静态资源路径</p>\n</li>\n<li><p>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"comment\">#  mvc:</span></span><br><span class=\"line\"><span class=\"comment\">#    static-path-pattern: /res/**     #这个会导致welcome page功能失效</span></span><br><span class=\"line\">   <span class=\"attr\">resources:</span></span><br><span class=\"line\">     <span class=\"attr\">static-locations:</span> [<span class=\"string\">classpath:/yu/</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>controller能处理&#x2F;index</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-3-、自定义-Favicon\"><a href=\"#2-3-、自定义-Favicon\" class=\"headerlink\" title=\"2.3 、自定义 Favicon\"></a>2.3 、自定义 <code>Favicon</code></h4><p>favicon.ico 放在静态资源目录下即可。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"comment\">#  mvc:</span></span><br><span class=\"line\"><span class=\"comment\">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-静态资源配置原理\"><a href=\"#2-4-静态资源配置原理\" class=\"headerlink\" title=\"2.4 静态资源配置原理\"></a>2.4 静态资源配置原理</h4><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509155320298.png\" alt=\"image-20220509155320298\"></p>\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509155414389.png\" alt=\"image-20220509155414389\"></p>\n<ul>\n<li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li>\n<li>SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tValidationAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcAutoConfiguration</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>给容器中配了什么。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Order(0)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcAutoConfigurationAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置文件的相关属性和xxx进行了绑定。WebMvcProperties&#x3D;&#x3D;<strong>spring.mvc</strong>、ResourceProperties&#x3D;&#x3D;<strong>spring.resources</strong></li>\n</ul>\n<h5 id=\"1、配置类只有一个有参构造器\"><a href=\"#1、配置类只有一个有参构造器\" class=\"headerlink\" title=\"1、配置类只有一个有参构造器\"></a>1、配置类只有一个有参构造器</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//有参构造器所有参数的值都会从容器中确定</span></span><br><span class=\"line\"><span class=\"comment\">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span></span><br><span class=\"line\"><span class=\"comment\">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span></span><br><span class=\"line\"><span class=\"comment\">//ListableBeanFactory beanFactory Spring的beanFactory</span></span><br><span class=\"line\"><span class=\"comment\">//HttpMessageConverters 找到所有的HttpMessageConverters</span></span><br><span class=\"line\"><span class=\"comment\">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span></span><br><span class=\"line\"><span class=\"comment\">//DispatcherServletPath  </span></span><br><span class=\"line\"><span class=\"comment\">//ServletRegistrationBean   给应用注册Servlet、Filter....</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">WebMvcAutoConfigurationAdapter</span><span class=\"params\">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.resourceProperties = resourceProperties;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.mvcProperties = mvcProperties;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.beanFactory = beanFactory;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.servletRegistrations = servletRegistrations;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、资源处理的默认规则\"><a href=\"#2、资源处理的默认规则\" class=\"headerlink\" title=\"2、资源处理的默认规则\"></a>2、资源处理的默认规则</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">&quot;Default resource handling disabled&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Duration</span> <span class=\"variable\">cachePeriod</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class=\"line\">\t\t\t<span class=\"type\">CacheControl</span> <span class=\"variable\">cacheControl</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//webjars的规则</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">staticPathPattern</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">\t\t\t\t\t\t.addResourceLocations(getResourceLocations(<span class=\"built_in\">this</span>.resourceProperties.getStaticLocations()))</span><br><span class=\"line\">\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"comment\">#  mvc:</span></span><br><span class=\"line\"><span class=\"comment\">#    static-path-pattern: /res/**</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">add-mappings:</span> <span class=\"literal\">false</span>   <span class=\"string\">禁用所有静态资源规则</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResourceProperties</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;classpath:/resources/&quot;</span>, <span class=\"string\">&quot;classpath:/static/&quot;</span>, <span class=\"string\">&quot;classpath:/public/&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class=\"line\"><span class=\"comment\">\t * /resources/, /static/, /public/].</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-欢迎页的处理规则\"><a href=\"#3-欢迎页的处理规则\" class=\"headerlink\" title=\"3.欢迎页的处理规则\"></a>3.欢迎页的处理规则</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> WelcomePageHandlerMapping <span class=\"title function_\">welcomePageHandlerMapping</span><span class=\"params\">(ApplicationContext applicationContext,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tFormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">WelcomePageHandlerMapping</span> <span class=\"variable\">welcomePageHandlerMapping</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WelcomePageHandlerMapping</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, getWelcomePage(),</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class=\"line\">\t\twelcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class=\"line\">\t\twelcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> welcomePageHandlerMapping;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class=\"line\">\t\tApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (welcomePage.isPresent() &amp;&amp; <span class=\"string\">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//要用欢迎页功能，必须是/**</span></span><br><span class=\"line\">\t\tlogger.info(<span class=\"string\">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class=\"line\">\t\tsetRootViewName(<span class=\"string\">&quot;forward:index.html&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 调用Controller  /index</span></span><br><span class=\"line\">\t\tlogger.info(<span class=\"string\">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class=\"line\">\t\tsetRootViewName(<span class=\"string\">&quot;index&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-favicon\"><a href=\"#4-favicon\" class=\"headerlink\" title=\"4.favicon\"></a>4.favicon</h5><p>浏览器会发送&#x2F;favicon.ico请求获取到图标，整个session期间不在获取</p>\n<h3 id=\"3-请求参数处理\"><a href=\"#3-请求参数处理\" class=\"headerlink\" title=\"3.请求参数处理\"></a>3.请求参数处理</h3><h4 id=\"0-请求映射\"><a href=\"#0-请求映射\" class=\"headerlink\" title=\"0 请求映射\"></a>0 请求映射</h4><p> @RequestMapping(value &#x3D; “&#x2F;user”,method &#x3D; RequestMethod.DELETE)   和<br>    @DeleteMapping(“&#x2F;user”)    是相同的，能够完成同种功能。</p>\n<h5 id=\"1-rest使用与原理\"><a href=\"#1-rest使用与原理\" class=\"headerlink\" title=\"1.rest使用与原理\"></a>1.rest使用与原理</h5><ul>\n<li><p>@xxxMapping；</p>\n</li>\n<li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p>\n</li>\n<li><ul>\n<li><em>以前：</em><em>&#x2F;getUser</em>  <em>获取用户</em>    <em>&#x2F;deleteUser</em> <em>删除用户</em>   <em>&#x2F;editUser</em>  <em>修改用户</em>      <em>&#x2F;saveUser</em> <em>保存用户</em></li>\n<li><em>现在： &#x2F;user</em>    *GET-*<em>获取用户</em>    *DELETE-*<em>删除用户</em>     *PUT-*<em>修改用户</em>      *POST-*<em>保存用户</em></li>\n<li>核心Filter；HiddenHttpMethodFilter</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>用法： 表单method&#x3D;post，隐藏域 _method&#x3D;put</li>\n<li>SpringBoot中手动开启</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>扩展：如何把_method 这个名字换成我们自己喜欢的</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================================前端=======================</span><br><span class=\"line\">    &lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;你好&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Speingboot <span class=\"number\">2</span> 你好&lt;/h1&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/user&quot;</span> method=<span class=\"string\">&quot;get&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input value=<span class=\"string\">&quot;REST-GET 提交 查&quot;</span> type=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/user&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input value=<span class=\"string\">&quot;REST-POST 提交 增&quot;</span> type=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/user&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input name=<span class=\"string\">&quot;_method&quot;</span> type=<span class=\"string\">&quot;hidden&quot;</span> value=<span class=\"string\">&quot;DELETE&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input value=<span class=\"string\">&quot;REST-DELETE 提交 删&quot;</span> type=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/user&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input name=<span class=\"string\">&quot;_method&quot;</span> type=<span class=\"string\">&quot;hidden&quot;</span> value=<span class=\"string\">&quot;PUT&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input value=<span class=\"string\">&quot;REST-PUT 提交 改 一般用于修改&quot;</span> type=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">    ====================后端========================</span><br><span class=\"line\"><span class=\"comment\">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;GET-张三&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">postUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;POST-张三&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class=\"line\">    <span class=\"meta\">@PutMapping(&quot;/user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">putUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;PUT-张三&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">deleteUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;DELETE-张三&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SpringBoot中手动开启HiddenHttpMethodFilter   原理部分</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> OrderedHiddenHttpMethodFilter <span class=\"title function_\">hiddenHttpMethodFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderedHiddenHttpMethodFilter</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义filter   可以在controller也可以在config里面   即 Put DELETE等提交方式 使用from表单时如何_method 替换成自己定义的</span></span><br><span class=\"line\"><span class=\"comment\"> *             &lt;form action=&quot;/user&quot; method=&quot;post&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *    &lt;input name=&quot;_method&quot; type=&quot;hidden&quot; value=&quot;PUT&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &lt;input name=&quot;_m&quot; type=&quot;hidden&quot; value=&quot;PUT&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &lt;input value=&quot;REST-PUT 提交 改 一般用于修改&quot; type=&quot;submit&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HiddenHttpMethodFilter <span class=\"title function_\">hiddenHttpMethodFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">HiddenHttpMethodFilter</span> <span class=\"variable\">methodFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HiddenHttpMethodFilter</span>();</span><br><span class=\"line\">        methodFilter.setMethodParam(<span class=\"string\">&quot;_m&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> methodFilter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">=======================开启HiddenHttpMethodFilter================================</span><br><span class=\"line\">    spring:</span><br><span class=\"line\">  mvc:</span><br><span class=\"line\">    hiddenmethod:</span><br><span class=\"line\">      filter:</span><br><span class=\"line\">        enabled: <span class=\"literal\">true</span>   #开启页面表单的Rest功能</span><br></pre></td></tr></table></figure>\n\n<p>Rest原理（表单提交要使用REST的时候）</p>\n<ul>\n<li><p>表单提交会带上**_method&#x3D;PUT**</p>\n</li>\n<li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p>\n</li>\n<li><ul>\n<li>请求是否正常，并且是POST</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>获取到**_method**的值。</li>\n<li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li>\n<li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li>\n<li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Rest使用客户端工具，</strong></p>\n<ul>\n<li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">hiddenmethod:</span></span><br><span class=\"line\">      <span class=\"attr\">filter:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>   <span class=\"comment\">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-请求映射原理\"><a href=\"#2-请求映射原理\" class=\"headerlink\" title=\"2. 请求映射原理\"></a>2. 请求映射原理</h5><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510140832254.png\" alt=\"image-20220510140832254\"></p>\n<p>SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）</p>\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510141536945.png\" alt=\"image-20220510141536945\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">processedRequest</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\">\t\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">mappedHandler</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">boolean</span> <span class=\"variable\">multipartRequestParsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">WebAsyncManager</span> <span class=\"variable\">asyncManager</span> <span class=\"operator\">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Exception</span> <span class=\"variable\">dispatchException</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tprocessedRequest = checkMultipart(request);</span><br><span class=\"line\">\t\t\t\tmultipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 找到当前请求使用哪个Handler（Controller的方法）处理</span></span><br><span class=\"line\">\t\t\t\tmappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510140933607.png\" alt=\"image-20220510140933607\"></p>\n<p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p>\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510141027345.png\" alt=\"image-20220510141027345\"></p>\n<p>所有的请求映射都在HandlerMapping中。</p>\n<ul>\n<li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 &#x2F;能访问到index.html；</p>\n</li>\n<li><p>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</p>\n</li>\n<li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p>\n</li>\n<li><ul>\n<li>如果有就找到这个请求对应的handler</li>\n<li>如果没有就是下一个 HandlerMapping</li>\n</ul>\n</li>\n<li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title function_\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.handlerMappings != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (HandlerMapping mapping : <span class=\"built_in\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> mapping.getHandler(request);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (handler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-普通参数与基本注解\"><a href=\"#4-普通参数与基本注解\" class=\"headerlink\" title=\"4.普通参数与基本注解\"></a>4.普通参数与基本注解</h3><h4 id=\"4-1-注解\"><a href=\"#4-1-注解\" class=\"headerlink\" title=\"4.1 注解\"></a>4.1 注解</h4><p>@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParameterTestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 前提 ： <span class=\"doctag\">@GetMapping</span>(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *1.<span class=\"doctag\">@PathVariable</span>  路径变量</span></span><br><span class=\"line\"><span class=\"comment\"> *  前端访问   &lt;a href=&quot;/car/3/owner/lisi&quot;&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 即能获取到浏览器地址栏中的变量   带有参数就只去参数 不带参数可以通过</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@PathVariable</span> Map&lt;String,String&gt; pv&#125; Map&lt;String,String&gt; 来获取全部 map的泛型必须是String</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.<span class=\"doctag\">@RequestHeader</span>  该注解是 用于获取请求头   集具体用法类似于1</span></span><br><span class=\"line\"><span class=\"comment\"> *3.<span class=\"doctag\">@RequestParam</span>  获取请求参数   例：</span></span><br><span class=\"line\"><span class=\"comment\"> * 前端部分   &lt;a href=&quot;/car/3/owner/lisi?age=18&amp;initers=bask&amp;initers=aaa&quot;&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@RequestParam</span>(&quot;age&quot;) Integer age,  获取单个参数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@RequestParam</span>(&quot;initers&quot;) List&lt;String&gt; initers,  获取列表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@RequestParam</span> Map&lt;String, String&gt; params    获取全部参数</span></span><br><span class=\"line\"><span class=\"comment\"> *4.<span class=\"doctag\">@CookieValue</span>  获取cookie  必须要有其名字   以Cookie为 类型不能添加至Map之中进行返回前端，在后端拿到Cookie后能作相应处理</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CookieValue</span>(&quot;Webstorm-f21fb5b0&quot;) String _dd,</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@CookieValue</span>(&quot;Webstorm-f21fb5b0&quot;) Cookie cookie</span></span><br><span class=\"line\"><span class=\"comment\"> *  5.<span class=\"doctag\">@RequestBody</span>   获取请求体【POST】</span></span><br><span class=\"line\"><span class=\"comment\"> *  前端 ： &lt;form action=&quot;/save&quot; method=&quot;post&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     测试RequestBody获取数据&lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     用户名：&lt;input name=&quot;username&quot;&gt;&lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     邮箱：&lt;input name=&quot;email&quot;&gt;&lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取到的数据为 拼接后的数据   &quot;conter&quot;: &quot;username=yu&amp;email=2837041086%40qq.com&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title function_\">getCar</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@PathVariable(&quot;username&quot;)</span> String name,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@RequestParam(&quot;initers&quot;)</span> List&lt;String&gt; initers,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@RequestParam</span> Map&lt;String,String&gt; params,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@CookieValue(&quot;Webstorm-f21fb5b0&quot;)</span> String _dd,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@CookieValue(&quot;Webstorm-f21fb5b0&quot;)</span> Cookie cookie</span></span><br><span class=\"line\"><span class=\"params\">            )</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;id&quot;,id);</span></span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;username&quot;,name);</span></span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;header&quot;,header);</span></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;age&quot;</span>,age);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;initers&quot;</span>,initers);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;params&quot;</span>,params);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;_dd&quot;</span>,_dd);</span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;cookie&quot;,cookie);</span></span><br><span class=\"line\">        System.out.println(cookie.getName()+<span class=\"string\">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/save&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">postMeth</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String conter)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;conter&quot;</span>,conter);</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(conter.toString());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(conter.toLowerCase());</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    矩阵变量</span></span><br><span class=\"line\"><span class=\"comment\">//   1.语法： /car/sell;low=89;brand=cc,aa,dd</span></span><br><span class=\"line\"><span class=\"comment\">//    2.springboot默认是禁用了矩阵变量的功能</span></span><br><span class=\"line\"><span class=\"comment\">//            手动开启：原理。 对路径的处理。 UrlPathHelper进行解析</span></span><br><span class=\"line\"><span class=\"comment\">//                removeSemicoloContent （移除分好内容）  支持矩阵变量</span></span><br><span class=\"line\"><span class=\"comment\">//    3.矩阵变量必须有url路径变量（    @GetMapping(&quot;/car/&#123;path&#125;&quot;)）才能被解析</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/car/&#123;path&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">carsSell</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@PathVariable(&quot;path&quot;)</span> String path</span></span><br><span class=\"line\"><span class=\"params\">    )</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;low&quot;</span>,low);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;brand&quot;</span>,brand);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;path&quot;</span>,path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">boss</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge</span></span><br><span class=\"line\"><span class=\"params\">    )</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;bossAge&quot;</span>,bossAge);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;empAge&quot;</span>,empAge);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">===========================前端==================================</span><br><span class=\"line\">    测试基本注解：</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&lt;!--    &lt;a href=<span class=\"string\">&quot;/car/3/owner/lisi&quot;</span>&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;--&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;/car/3/owner/lisi?age=18&amp;initers=bask&amp;initers=aaa&quot;</span>&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@PathVariable(路径变量)</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@RequestHeader(获取请求头)</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@RequestParam(获取请求参数)</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@CookieValue(获取cookie)</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@RequestBody(获取请求体【POST】)</span>&lt;/li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@RequestAttribute(获取request域属性)</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@MatrixVariable(矩阵变量)</span>&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;h2&gt;request域属性所需&lt;/h2&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/save&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">    测试RequestBody获取数据&lt;br/&gt;</span><br><span class=\"line\">    用户名：&lt;input name=<span class=\"string\">&quot;username&quot;</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">    邮箱：&lt;input name=<span class=\"string\">&quot;email&quot;</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;提交&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;h2&gt;矩阵变量所需&lt;/h2&gt;</span><br><span class=\"line\">/cars/&#123;path&#125;?xxx=xxx&amp;aaa=ccc  querySting查询字符串。<span class=\"meta\">@RequesParam</span>;&lt;br/&gt;</span><br><span class=\"line\">/cars/&#123;path;low=<span class=\"number\">89</span>;brand=cc,aa,dd&#125;   矩阵变量&lt;br/&gt;</span><br><span class=\"line\">页面开发，cookie禁用了，session里面的内容怎么使用；</span><br><span class=\"line\">session.set(a,b)---》jsession---》cookie---》每次发送请求携带</span><br><span class=\"line\">url重写：/abc；jsessionid=xxx   把cookie的值使用矩阵变量的方式进行传递&lt;br/&gt;</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;/car/sell;low=89;brand=cc,aa,dd&quot;</span>&gt;<span class=\"meta\">@MatrixVariable(矩阵变量)</span>/car/sell;low=<span class=\"number\">89</span>;brand=cc,aa,dd&lt;/a&gt;&lt;br/&gt;</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;/car/sell;low=89;brand=cc;brand=aa;brand=dd&quot;</span>&gt;<span class=\"meta\">@MatrixVariable(矩阵变量)</span>/car/sell;low=<span class=\"number\">89</span>;brand=cc;brand=aa;brand=dd&lt;/a&gt;&lt;br/&gt;</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;/boss/1;age=20/2;age10&quot;</span>&gt;<span class=\"meta\">@MatrixVariable(矩阵变量)</span>/boss/&#123;boosId&#125;/&#123;empId&#125;&lt;/a&gt;&lt;br/&gt;</span><br><span class=\"line\">&lt;ol&gt;</span><br><span class=\"line\">    &lt;li&gt;矩阵变量需要在springboot中手动开启&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;根据RFC3896的规范，矩阵变量应当绑定在路径变量中&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;若是有多个矩阵变量，应当使用英文符号;进行分隔&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;若是一个矩阵变量有多个值，应当使用英文符号,进行分隔，或命名多个重复的key即可&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;如：/car/sell;low=<span class=\"number\">89</span>;brand=cc,aa,dd&lt;/li&gt;</span><br><span class=\"line\">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"SpringBoot核心功能\"><a href=\"#SpringBoot核心功能\" class=\"headerlink\" title=\"SpringBoot核心功能\"></a>SpringBoot核心功能</h1><p>重点：</p>\n<p>springboot使用的springmvc的底层 所有请求都经过 DispatchServlet.java文件</p>\n<h2 id=\"1-配置文件\"><a href=\"#1-配置文件\" class=\"headerlink\" title=\"1. 配置文件\"></a>1. 配置文件</h2><h3 id=\"1-文件类型\"><a href=\"#1-文件类型\" class=\"headerlink\" title=\"1.文件类型\"></a>1.文件类型</h3><p><strong>properties文件的优先级高于yaml</strong></p>\n<h4 id=\"1-1-properties\"><a href=\"#1-1-properties\" class=\"headerlink\" title=\"1.1 properties\"></a>1.1 properties</h4><p>同以前的properties用法</p>\n<h4 id=\"1-2-yaml\"><a href=\"#1-2-yaml\" class=\"headerlink\" title=\"1.2 yaml\"></a>1.2 yaml</h4><h5 id=\"1-2-1-简介\"><a href=\"#1-2-1-简介\" class=\"headerlink\" title=\"1.2.1 简介\"></a>1.2.1 简介</h5><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p>\n<p>非常适合用来做以数据为中心的配置文件</p>\n<h5 id=\"1-2-2-基本语法\"><a href=\"#1-2-2-基本语法\" class=\"headerlink\" title=\"1.2.2 基本语法\"></a>1.2.2 基本语法</h5><ul>\n<li>key: value；kv之间有空格</li>\n<li>大小写敏感</li>\n<li>使用缩进表示层级关系</li>\n<li>缩进不允许使用tab，只允许空格</li>\n<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>\n<li>‘#’表示注释</li>\n<li>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义&#x2F;不转义</li>\n</ul>\n<p><strong>‘  ’</strong>会被以串字符串输出</p>\n<h5 id=\"1-2-3-数据类型\"><a href=\"#1-2-3-数据类型\" class=\"headerlink\" title=\"1.2.3 数据类型\"></a>1.2.3 数据类型</h5><ul>\n<li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">k:</span> <span class=\"string\">v</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对象：键值对的集合。map、hash、set、object</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">行内写法：</span>  <span class=\"attr\">k:</span> &#123;<span class=\"string\">k1:v1</span>,<span class=\"string\">k2:v2</span>,<span class=\"string\">k3:v3</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">#或</span></span><br><span class=\"line\"><span class=\"attr\">k:</span> </span><br><span class=\"line\">  <span class=\"attr\">k1:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">k2:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">  <span class=\"attr\">k3:</span> <span class=\"string\">v3</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数组：一组按次序排列的值。array、list、queue</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">行内写法：</span>  <span class=\"attr\">k:</span> [<span class=\"string\">v1</span>,<span class=\"string\">v2</span>,<span class=\"string\">v3</span>]</span><br><span class=\"line\"><span class=\"comment\">#或者</span></span><br><span class=\"line\"><span class=\"attr\">k:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">v1</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">v2</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">v3</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-2-4-示例\"><a href=\"#1-2-4-示例\" class=\"headerlink\" title=\"1.2.4 示例\"></a>1.2.4 示例</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Pet pet;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String[] interests;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; animal;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Object&gt; score;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Set&lt;Double&gt; salarys;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Double weight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yaml表示以上对象</span></span><br><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">userName:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">  <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2019</span><span class=\"string\">/12/12</span> <span class=\"number\">20</span><span class=\"string\">:12:33</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">pet:</span> </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\">    <span class=\"attr\">weight:</span> <span class=\"number\">23.4</span></span><br><span class=\"line\">  <span class=\"attr\">interests:</span> [<span class=\"string\">篮球</span>,<span class=\"string\">游泳</span>]</span><br><span class=\"line\">  <span class=\"attr\">animal:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">jerry</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mario</span></span><br><span class=\"line\">  <span class=\"attr\">score:</span></span><br><span class=\"line\">    <span class=\"attr\">english:</span> </span><br><span class=\"line\">      <span class=\"attr\">first:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">second:</span> <span class=\"number\">40</span></span><br><span class=\"line\">      <span class=\"attr\">third:</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"attr\">math:</span> [<span class=\"number\">131</span>,<span class=\"number\">140</span>,<span class=\"number\">148</span>]</span><br><span class=\"line\">    <span class=\"attr\">chinese:</span> &#123;<span class=\"attr\">first:</span> <span class=\"number\">128</span>,<span class=\"attr\">second:</span> <span class=\"number\">136</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">salarys:</span> [<span class=\"number\">3999</span>,<span class=\"number\">4999.98</span>,<span class=\"number\">5999.99</span>]</span><br><span class=\"line\">  <span class=\"attr\">allPets:</span></span><br><span class=\"line\">    <span class=\"attr\">sick:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">tom</span>&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">jerry</span>,<span class=\"attr\">weight:</span> <span class=\"number\">47</span>&#125;</span><br><span class=\"line\">    <span class=\"attr\">health:</span> [&#123;<span class=\"attr\">name:</span> <span class=\"string\">mario</span>,<span class=\"attr\">weight:</span> <span class=\"number\">47</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置提示\"><a href=\"#2-配置提示\" class=\"headerlink\" title=\"2. 配置提示\"></a>2. 配置提示</h3><p>自定义的类和配置文件绑定一般没有提示。</p>\n<p>如何来使它有提示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--        用于自定义的类和配置文件绑定后有提示--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--                用于打包后将自定义的类和配置文件绑定提示的相关依赖去除 减少文件占用--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Web开发\"><a href=\"#2-Web开发\" class=\"headerlink\" title=\"2. Web开发\"></a>2. Web开发</h2><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509133335937.png\" alt=\"image-20220509133335937\"></p>\n<h3 id=\"1-SpringMVC自动配置概览\"><a href=\"#1-SpringMVC自动配置概览\" class=\"headerlink\" title=\"1. SpringMVC自动配置概览\"></a>1. SpringMVC自动配置概览</h3><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p>\n<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n</li>\n<li><ul>\n<li>内容协商视图解析器和BeanName视图解析器</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content\">later in this document</a>)).</p>\n</li>\n<li><ul>\n<li>静态资源（包括webjars）</li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>\n</li>\n<li><ul>\n<li>自动注册 <code>Converter，GenericConverter，Formatter </code></li>\n</ul>\n</li>\n<li><p>Support for <code>HttpMessageConverters</code> (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li>\n</ul>\n</li>\n<li><p>Static <code>index.html</code> support.</p>\n</li>\n<li><ul>\n<li>静态index.html 页支持</li>\n</ul>\n</li>\n<li><p>Custom <code>Favicon</code> support (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自定义 <code>Favicon</code></li>\n</ul>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li>\n</ul>\n</li>\n</ul>\n<p>If you want to keep those Spring Boot MVC customizations and make more <a href=\"https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc\">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>\n<p><strong>不用@EnableWebMvc注解。使用</strong> <code>**@Configuration**</code> <strong>+</strong> <code>**WebMvcConfigurer**</code> <strong>自定义规则</strong></p>\n<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>\n<p><strong>声明</strong> <code>**WebMvcRegistrations**</code> <strong>改变默认底层组件</strong></p>\n<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>\n<p><strong>使用</strong> <code>**@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC**</code></p>\n<h3 id=\"2-简单功能分析\"><a href=\"#2-简单功能分析\" class=\"headerlink\" title=\"2.简单功能分析\"></a>2.简单功能分析</h3><h4 id=\"2-1-静态资源访问\"><a href=\"#2-1-静态资源访问\" class=\"headerlink\" title=\"2.1 静态资源访问\"></a>2.1 静态资源访问</h4><h5 id=\"1-静态资源目录\"><a href=\"#1-静态资源目录\" class=\"headerlink\" title=\"1. 静态资源目录\"></a>1. 静态资源目录</h5><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p>\n<p>访问 ： 当前项目根路径&#x2F; + 静态资源名 </p>\n<p>原理： 静态映射&#x2F;**。</p>\n<p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p>\n<p>改变默认的静态资源路径</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">static-locations:</span> [<span class=\"string\">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-静态资源访问前缀\"><a href=\"#2-静态资源访问前缀\" class=\"headerlink\" title=\"2.静态资源访问前缀\"></a>2.静态资源访问前缀</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span></span><br></pre></td></tr></table></figure>\n\n<p>当前项目 + static-path-pattern + 静态资源名 &#x3D; 静态资源文件夹下找</p>\n<h5 id=\"3-webjar\"><a href=\"#3-webjar\" class=\"headerlink\" title=\"3.webjar\"></a>3.webjar</h5><p>一些静态资源通过地址进行访问或者调用，首先导入相关静态资源的依赖如（jquery)在找到相关包所在的路径通过返回值进行返回</p>\n<p>自动映射 &#x2F;<a href=\"http://localhost:8080/webjars/jquery/3.5.1/jquery.js\">webjars</a>&#x2F;**</p>\n<p><a href=\"https://www.webjars.org/\">https://www.webjars.org/</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.webjars<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jquery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>访问地址：<a href=\"http://localhost:8080/webjars/jquery/3.5.1/jquery.js\">http://localhost:8080/webjars/<strong>jquery&#x2F;3.5.1&#x2F;jquery.js</strong></a>   后面地址要按照依赖里面的包路径</p>\n<h4 id=\"2-2-欢迎页支持\"><a href=\"#2-2-欢迎页支持\" class=\"headerlink\" title=\"2.2 欢迎页支持\"></a>2.2 欢迎页支持</h4><ul>\n<li><p>静态资源路径下  index.html</p>\n</li>\n<li><ul>\n<li><p>可以配置静态资源路径</p>\n</li>\n<li><p>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"comment\">#  mvc:</span></span><br><span class=\"line\"><span class=\"comment\">#    static-path-pattern: /res/**     #这个会导致welcome page功能失效</span></span><br><span class=\"line\">   <span class=\"attr\">resources:</span></span><br><span class=\"line\">     <span class=\"attr\">static-locations:</span> [<span class=\"string\">classpath:/yu/</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>controller能处理&#x2F;index</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-3-、自定义-Favicon\"><a href=\"#2-3-、自定义-Favicon\" class=\"headerlink\" title=\"2.3 、自定义 Favicon\"></a>2.3 、自定义 <code>Favicon</code></h4><p>favicon.ico 放在静态资源目录下即可。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"comment\">#  mvc:</span></span><br><span class=\"line\"><span class=\"comment\">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-静态资源配置原理\"><a href=\"#2-4-静态资源配置原理\" class=\"headerlink\" title=\"2.4 静态资源配置原理\"></a>2.4 静态资源配置原理</h4><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509155320298.png\" alt=\"image-20220509155320298\"></p>\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220509155414389.png\" alt=\"image-20220509155414389\"></p>\n<ul>\n<li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li>\n<li>SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tValidationAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcAutoConfiguration</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>给容器中配了什么。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Order(0)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcAutoConfigurationAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置文件的相关属性和xxx进行了绑定。WebMvcProperties&#x3D;&#x3D;<strong>spring.mvc</strong>、ResourceProperties&#x3D;&#x3D;<strong>spring.resources</strong></li>\n</ul>\n<h5 id=\"1、配置类只有一个有参构造器\"><a href=\"#1、配置类只有一个有参构造器\" class=\"headerlink\" title=\"1、配置类只有一个有参构造器\"></a>1、配置类只有一个有参构造器</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//有参构造器所有参数的值都会从容器中确定</span></span><br><span class=\"line\"><span class=\"comment\">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span></span><br><span class=\"line\"><span class=\"comment\">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span></span><br><span class=\"line\"><span class=\"comment\">//ListableBeanFactory beanFactory Spring的beanFactory</span></span><br><span class=\"line\"><span class=\"comment\">//HttpMessageConverters 找到所有的HttpMessageConverters</span></span><br><span class=\"line\"><span class=\"comment\">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span></span><br><span class=\"line\"><span class=\"comment\">//DispatcherServletPath  </span></span><br><span class=\"line\"><span class=\"comment\">//ServletRegistrationBean   给应用注册Servlet、Filter....</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">WebMvcAutoConfigurationAdapter</span><span class=\"params\">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.resourceProperties = resourceProperties;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.mvcProperties = mvcProperties;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.beanFactory = beanFactory;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.servletRegistrations = servletRegistrations;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、资源处理的默认规则\"><a href=\"#2、资源处理的默认规则\" class=\"headerlink\" title=\"2、资源处理的默认规则\"></a>2、资源处理的默认规则</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">&quot;Default resource handling disabled&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Duration</span> <span class=\"variable\">cachePeriod</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class=\"line\">\t\t\t<span class=\"type\">CacheControl</span> <span class=\"variable\">cacheControl</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//webjars的规则</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">staticPathPattern</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">\t\t\t\t\t\t.addResourceLocations(getResourceLocations(<span class=\"built_in\">this</span>.resourceProperties.getStaticLocations()))</span><br><span class=\"line\">\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"comment\">#  mvc:</span></span><br><span class=\"line\"><span class=\"comment\">#    static-path-pattern: /res/**</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">add-mappings:</span> <span class=\"literal\">false</span>   <span class=\"string\">禁用所有静态资源规则</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResourceProperties</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;classpath:/resources/&quot;</span>, <span class=\"string\">&quot;classpath:/static/&quot;</span>, <span class=\"string\">&quot;classpath:/public/&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class=\"line\"><span class=\"comment\">\t * /resources/, /static/, /public/].</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-欢迎页的处理规则\"><a href=\"#3-欢迎页的处理规则\" class=\"headerlink\" title=\"3.欢迎页的处理规则\"></a>3.欢迎页的处理规则</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> WelcomePageHandlerMapping <span class=\"title function_\">welcomePageHandlerMapping</span><span class=\"params\">(ApplicationContext applicationContext,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tFormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">WelcomePageHandlerMapping</span> <span class=\"variable\">welcomePageHandlerMapping</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WelcomePageHandlerMapping</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, getWelcomePage(),</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class=\"line\">\t\twelcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class=\"line\">\t\twelcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> welcomePageHandlerMapping;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class=\"line\">\t\tApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (welcomePage.isPresent() &amp;&amp; <span class=\"string\">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//要用欢迎页功能，必须是/**</span></span><br><span class=\"line\">\t\tlogger.info(<span class=\"string\">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class=\"line\">\t\tsetRootViewName(<span class=\"string\">&quot;forward:index.html&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 调用Controller  /index</span></span><br><span class=\"line\">\t\tlogger.info(<span class=\"string\">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class=\"line\">\t\tsetRootViewName(<span class=\"string\">&quot;index&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-favicon\"><a href=\"#4-favicon\" class=\"headerlink\" title=\"4.favicon\"></a>4.favicon</h5><p>浏览器会发送&#x2F;favicon.ico请求获取到图标，整个session期间不在获取</p>\n<h3 id=\"3-请求参数处理\"><a href=\"#3-请求参数处理\" class=\"headerlink\" title=\"3.请求参数处理\"></a>3.请求参数处理</h3><h4 id=\"0-请求映射\"><a href=\"#0-请求映射\" class=\"headerlink\" title=\"0 请求映射\"></a>0 请求映射</h4><p> @RequestMapping(value &#x3D; “&#x2F;user”,method &#x3D; RequestMethod.DELETE)   和<br>    @DeleteMapping(“&#x2F;user”)    是相同的，能够完成同种功能。</p>\n<h5 id=\"1-rest使用与原理\"><a href=\"#1-rest使用与原理\" class=\"headerlink\" title=\"1.rest使用与原理\"></a>1.rest使用与原理</h5><ul>\n<li><p>@xxxMapping；</p>\n</li>\n<li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p>\n</li>\n<li><ul>\n<li><em>以前：</em><em>&#x2F;getUser</em>  <em>获取用户</em>    <em>&#x2F;deleteUser</em> <em>删除用户</em>   <em>&#x2F;editUser</em>  <em>修改用户</em>      <em>&#x2F;saveUser</em> <em>保存用户</em></li>\n<li><em>现在： &#x2F;user</em>    *GET-*<em>获取用户</em>    *DELETE-*<em>删除用户</em>     *PUT-*<em>修改用户</em>      *POST-*<em>保存用户</em></li>\n<li>核心Filter；HiddenHttpMethodFilter</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>用法： 表单method&#x3D;post，隐藏域 _method&#x3D;put</li>\n<li>SpringBoot中手动开启</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>扩展：如何把_method 这个名字换成我们自己喜欢的</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================================前端=======================</span><br><span class=\"line\">    &lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;你好&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Speingboot <span class=\"number\">2</span> 你好&lt;/h1&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/user&quot;</span> method=<span class=\"string\">&quot;get&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input value=<span class=\"string\">&quot;REST-GET 提交 查&quot;</span> type=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/user&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input value=<span class=\"string\">&quot;REST-POST 提交 增&quot;</span> type=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/user&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input name=<span class=\"string\">&quot;_method&quot;</span> type=<span class=\"string\">&quot;hidden&quot;</span> value=<span class=\"string\">&quot;DELETE&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input value=<span class=\"string\">&quot;REST-DELETE 提交 删&quot;</span> type=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/user&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input name=<span class=\"string\">&quot;_method&quot;</span> type=<span class=\"string\">&quot;hidden&quot;</span> value=<span class=\"string\">&quot;PUT&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input value=<span class=\"string\">&quot;REST-PUT 提交 改 一般用于修改&quot;</span> type=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">    ====================后端========================</span><br><span class=\"line\"><span class=\"comment\">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;GET-张三&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">postUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;POST-张三&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class=\"line\">    <span class=\"meta\">@PutMapping(&quot;/user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">putUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;PUT-张三&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">deleteUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;DELETE-张三&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SpringBoot中手动开启HiddenHttpMethodFilter   原理部分</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> OrderedHiddenHttpMethodFilter <span class=\"title function_\">hiddenHttpMethodFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderedHiddenHttpMethodFilter</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义filter   可以在controller也可以在config里面   即 Put DELETE等提交方式 使用from表单时如何_method 替换成自己定义的</span></span><br><span class=\"line\"><span class=\"comment\"> *             &lt;form action=&quot;/user&quot; method=&quot;post&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *    &lt;input name=&quot;_method&quot; type=&quot;hidden&quot; value=&quot;PUT&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &lt;input name=&quot;_m&quot; type=&quot;hidden&quot; value=&quot;PUT&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &lt;input value=&quot;REST-PUT 提交 改 一般用于修改&quot; type=&quot;submit&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HiddenHttpMethodFilter <span class=\"title function_\">hiddenHttpMethodFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">HiddenHttpMethodFilter</span> <span class=\"variable\">methodFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HiddenHttpMethodFilter</span>();</span><br><span class=\"line\">        methodFilter.setMethodParam(<span class=\"string\">&quot;_m&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> methodFilter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">=======================开启HiddenHttpMethodFilter================================</span><br><span class=\"line\">    spring:</span><br><span class=\"line\">  mvc:</span><br><span class=\"line\">    hiddenmethod:</span><br><span class=\"line\">      filter:</span><br><span class=\"line\">        enabled: <span class=\"literal\">true</span>   #开启页面表单的Rest功能</span><br></pre></td></tr></table></figure>\n\n<p>Rest原理（表单提交要使用REST的时候）</p>\n<ul>\n<li><p>表单提交会带上**_method&#x3D;PUT**</p>\n</li>\n<li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p>\n</li>\n<li><ul>\n<li>请求是否正常，并且是POST</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>获取到**_method**的值。</li>\n<li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li>\n<li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li>\n<li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Rest使用客户端工具，</strong></p>\n<ul>\n<li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">hiddenmethod:</span></span><br><span class=\"line\">      <span class=\"attr\">filter:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>   <span class=\"comment\">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-请求映射原理\"><a href=\"#2-请求映射原理\" class=\"headerlink\" title=\"2. 请求映射原理\"></a>2. 请求映射原理</h5><p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510140832254.png\" alt=\"image-20220510140832254\"></p>\n<p>SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）</p>\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510141536945.png\" alt=\"image-20220510141536945\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">processedRequest</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\">\t\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">mappedHandler</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">boolean</span> <span class=\"variable\">multipartRequestParsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">WebAsyncManager</span> <span class=\"variable\">asyncManager</span> <span class=\"operator\">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Exception</span> <span class=\"variable\">dispatchException</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tprocessedRequest = checkMultipart(request);</span><br><span class=\"line\">\t\t\t\tmultipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 找到当前请求使用哪个Handler（Controller的方法）处理</span></span><br><span class=\"line\">\t\t\t\tmappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510140933607.png\" alt=\"image-20220510140933607\"></p>\n<p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p>\n<p><img src=\"C:\\Users\\26524\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220510141027345.png\" alt=\"image-20220510141027345\"></p>\n<p>所有的请求映射都在HandlerMapping中。</p>\n<ul>\n<li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 &#x2F;能访问到index.html；</p>\n</li>\n<li><p>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</p>\n</li>\n<li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p>\n</li>\n<li><ul>\n<li>如果有就找到这个请求对应的handler</li>\n<li>如果没有就是下一个 HandlerMapping</li>\n</ul>\n</li>\n<li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title function_\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.handlerMappings != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (HandlerMapping mapping : <span class=\"built_in\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> mapping.getHandler(request);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (handler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-普通参数与基本注解\"><a href=\"#4-普通参数与基本注解\" class=\"headerlink\" title=\"4.普通参数与基本注解\"></a>4.普通参数与基本注解</h3><h4 id=\"4-1-注解\"><a href=\"#4-1-注解\" class=\"headerlink\" title=\"4.1 注解\"></a>4.1 注解</h4><p>@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParameterTestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 前提 ： <span class=\"doctag\">@GetMapping</span>(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *1.<span class=\"doctag\">@PathVariable</span>  路径变量</span></span><br><span class=\"line\"><span class=\"comment\"> *  前端访问   &lt;a href=&quot;/car/3/owner/lisi&quot;&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 即能获取到浏览器地址栏中的变量   带有参数就只去参数 不带参数可以通过</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@PathVariable</span> Map&lt;String,String&gt; pv&#125; Map&lt;String,String&gt; 来获取全部 map的泛型必须是String</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.<span class=\"doctag\">@RequestHeader</span>  该注解是 用于获取请求头   集具体用法类似于1</span></span><br><span class=\"line\"><span class=\"comment\"> *3.<span class=\"doctag\">@RequestParam</span>  获取请求参数   例：</span></span><br><span class=\"line\"><span class=\"comment\"> * 前端部分   &lt;a href=&quot;/car/3/owner/lisi?age=18&amp;initers=bask&amp;initers=aaa&quot;&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@RequestParam</span>(&quot;age&quot;) Integer age,  获取单个参数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@RequestParam</span>(&quot;initers&quot;) List&lt;String&gt; initers,  获取列表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@RequestParam</span> Map&lt;String, String&gt; params    获取全部参数</span></span><br><span class=\"line\"><span class=\"comment\"> *4.<span class=\"doctag\">@CookieValue</span>  获取cookie  必须要有其名字   以Cookie为 类型不能添加至Map之中进行返回前端，在后端拿到Cookie后能作相应处理</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CookieValue</span>(&quot;Webstorm-f21fb5b0&quot;) String _dd,</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@CookieValue</span>(&quot;Webstorm-f21fb5b0&quot;) Cookie cookie</span></span><br><span class=\"line\"><span class=\"comment\"> *  5.<span class=\"doctag\">@RequestBody</span>   获取请求体【POST】</span></span><br><span class=\"line\"><span class=\"comment\"> *  前端 ： &lt;form action=&quot;/save&quot; method=&quot;post&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     测试RequestBody获取数据&lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     用户名：&lt;input name=&quot;username&quot;&gt;&lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     邮箱：&lt;input name=&quot;email&quot;&gt;&lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取到的数据为 拼接后的数据   &quot;conter&quot;: &quot;username=yu&amp;email=2837041086%40qq.com&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title function_\">getCar</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@PathVariable(&quot;username&quot;)</span> String name,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@RequestParam(&quot;initers&quot;)</span> List&lt;String&gt; initers,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@RequestParam</span> Map&lt;String,String&gt; params,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@CookieValue(&quot;Webstorm-f21fb5b0&quot;)</span> String _dd,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@CookieValue(&quot;Webstorm-f21fb5b0&quot;)</span> Cookie cookie</span></span><br><span class=\"line\"><span class=\"params\">            )</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;id&quot;,id);</span></span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;username&quot;,name);</span></span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;header&quot;,header);</span></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;age&quot;</span>,age);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;initers&quot;</span>,initers);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;params&quot;</span>,params);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;_dd&quot;</span>,_dd);</span><br><span class=\"line\"><span class=\"comment\">//        map.put(&quot;cookie&quot;,cookie);</span></span><br><span class=\"line\">        System.out.println(cookie.getName()+<span class=\"string\">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/save&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">postMeth</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String conter)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;conter&quot;</span>,conter);</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(conter.toString());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(conter.toLowerCase());</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    矩阵变量</span></span><br><span class=\"line\"><span class=\"comment\">//   1.语法： /car/sell;low=89;brand=cc,aa,dd</span></span><br><span class=\"line\"><span class=\"comment\">//    2.springboot默认是禁用了矩阵变量的功能</span></span><br><span class=\"line\"><span class=\"comment\">//            手动开启：原理。 对路径的处理。 UrlPathHelper进行解析</span></span><br><span class=\"line\"><span class=\"comment\">//                removeSemicoloContent （移除分好内容）  支持矩阵变量</span></span><br><span class=\"line\"><span class=\"comment\">//    3.矩阵变量必须有url路径变量（    @GetMapping(&quot;/car/&#123;path&#125;&quot;)）才能被解析</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/car/&#123;path&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">carsSell</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@PathVariable(&quot;path&quot;)</span> String path</span></span><br><span class=\"line\"><span class=\"params\">    )</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;low&quot;</span>,low);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;brand&quot;</span>,brand);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;path&quot;</span>,path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">boss</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge</span></span><br><span class=\"line\"><span class=\"params\">    )</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;bossAge&quot;</span>,bossAge);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;empAge&quot;</span>,empAge);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">===========================前端==================================</span><br><span class=\"line\">    测试基本注解：</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&lt;!--    &lt;a href=<span class=\"string\">&quot;/car/3/owner/lisi&quot;</span>&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;--&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;/car/3/owner/lisi?age=18&amp;initers=bask&amp;initers=aaa&quot;</span>&gt;car/&#123;id&#125;/owner/&#123;username&#125;&lt;/a&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@PathVariable(路径变量)</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@RequestHeader(获取请求头)</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@RequestParam(获取请求参数)</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@CookieValue(获取cookie)</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@RequestBody(获取请求体【POST】)</span>&lt;/li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@RequestAttribute(获取request域属性)</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"meta\">@MatrixVariable(矩阵变量)</span>&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;h2&gt;request域属性所需&lt;/h2&gt;</span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/save&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">    测试RequestBody获取数据&lt;br/&gt;</span><br><span class=\"line\">    用户名：&lt;input name=<span class=\"string\">&quot;username&quot;</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">    邮箱：&lt;input name=<span class=\"string\">&quot;email&quot;</span>&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;提交&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;h2&gt;矩阵变量所需&lt;/h2&gt;</span><br><span class=\"line\">/cars/&#123;path&#125;?xxx=xxx&amp;aaa=ccc  querySting查询字符串。<span class=\"meta\">@RequesParam</span>;&lt;br/&gt;</span><br><span class=\"line\">/cars/&#123;path;low=<span class=\"number\">89</span>;brand=cc,aa,dd&#125;   矩阵变量&lt;br/&gt;</span><br><span class=\"line\">页面开发，cookie禁用了，session里面的内容怎么使用；</span><br><span class=\"line\">session.set(a,b)---》jsession---》cookie---》每次发送请求携带</span><br><span class=\"line\">url重写：/abc；jsessionid=xxx   把cookie的值使用矩阵变量的方式进行传递&lt;br/&gt;</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;/car/sell;low=89;brand=cc,aa,dd&quot;</span>&gt;<span class=\"meta\">@MatrixVariable(矩阵变量)</span>/car/sell;low=<span class=\"number\">89</span>;brand=cc,aa,dd&lt;/a&gt;&lt;br/&gt;</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;/car/sell;low=89;brand=cc;brand=aa;brand=dd&quot;</span>&gt;<span class=\"meta\">@MatrixVariable(矩阵变量)</span>/car/sell;low=<span class=\"number\">89</span>;brand=cc;brand=aa;brand=dd&lt;/a&gt;&lt;br/&gt;</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;/boss/1;age=20/2;age10&quot;</span>&gt;<span class=\"meta\">@MatrixVariable(矩阵变量)</span>/boss/&#123;boosId&#125;/&#123;empId&#125;&lt;/a&gt;&lt;br/&gt;</span><br><span class=\"line\">&lt;ol&gt;</span><br><span class=\"line\">    &lt;li&gt;矩阵变量需要在springboot中手动开启&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;根据RFC3896的规范，矩阵变量应当绑定在路径变量中&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;若是有多个矩阵变量，应当使用英文符号;进行分隔&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;若是一个矩阵变量有多个值，应当使用英文符号,进行分隔，或命名多个重复的key即可&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;如：/car/sell;low=<span class=\"number\">89</span>;brand=cc,aa,dd&lt;/li&gt;</span><br><span class=\"line\">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"本地项目让别人可以被访问","date":"2023-07-11T14:37:00.000Z","updated":"2023-07-11T14:37:00.000Z","keywords":"常用","description":"本地项目让别人可以被访问","_content":"\n\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/image-20220821233250364.png)\n\n通过花生壳将本地项目让别人可以被访问\n\n","source":"_posts/本地项目让别人可以被访问.md","raw":"\n---\n\ntitle: 本地项目让别人可以被访问\ndate: 2023-07-11 22:37\nupdated: 2023-07-11 22:37\ntags: 常用\ncategories: 常用\nkeywords: 常用\ndescription: 本地项目让别人可以被访问\n\n---\n\n\n![](https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/image-20220821233250364.png)\n\n通过花生壳将本地项目让别人可以被访问\n\n","slug":"本地项目让别人可以被访问","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cljzumpt80008dgi0guf79bza","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/image-20220821233250364.png\"></p>\n<p>通过花生壳将本地项目让别人可以被访问</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/image-20220821233250364.png\"></p>\n<p>通过花生壳将本地项目让别人可以被访问</p>\n"},{"title":"软件","date":"2023-07-12T14:56:23.716Z","updated":"2023-07-12T14:57:00.000Z","keywords":"常用 必备","description":"常用或必备软件","_content":"\n### 1.预览软件   QuickLook\nhttps://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230712230537.png\n\n空格键：预览/关闭预览\nESC：关闭预览\n回车：运行程序并关闭预览\nCTRL+鼠标滚轮：缩放图片/文档\n鼠标滚轮：调节音量\n\n获取方式：微软商店\n\n","source":"_posts/a/软件.md","raw":"---\n\ntitle: 软件\ndate: ：2023-07-12 22:57\nupdated: 2023-07-12 22:57\ntags: 软件\ncategories: 软件\nkeywords: 常用 必备\ndescription: 常用或必备软件\n\n---\n\n### 1.预览软件   QuickLook\nhttps://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230712230537.png\n\n空格键：预览/关闭预览\nESC：关闭预览\n回车：运行程序并关闭预览\nCTRL+鼠标滚轮：缩放图片/文档\n鼠标滚轮：调节音量\n\n获取方式：微软商店\n\n","slug":"a/软件","published":1,"_id":"cljzuui3t0000psi06ykp1eq5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-预览软件-QuickLook\"><a href=\"#1-预览软件-QuickLook\" class=\"headerlink\" title=\"1.预览软件   QuickLook\"></a>1.预览软件   QuickLook</h3><p><a href=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230712230537.png\">https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230712230537.png</a></p>\n<p>空格键：预览&#x2F;关闭预览<br>ESC：关闭预览<br>回车：运行程序并关闭预览<br>CTRL+鼠标滚轮：缩放图片&#x2F;文档<br>鼠标滚轮：调节音量</p>\n<p>获取方式：微软商店</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"},{"name":"个人练习","link":"../src/ES6-ES11/0index.html","avatar":null,"descr":"Es6 学习"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"StackOverflow中文参考","link":"https://www.soinside.com/","avatar":"https://www.soinside.com/static/static/logo.png?v=1687843661066","descr":"技术问答搜索"}]}]}},"cover":false,"excerpt":"","more":"<h3 id=\"1-预览软件-QuickLook\"><a href=\"#1-预览软件-QuickLook\" class=\"headerlink\" title=\"1.预览软件   QuickLook\"></a>1.预览软件   QuickLook</h3><p><a href=\"https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230712230537.png\">https://cdn.jsdelivr.net/gh/YuLong-cmd/PicGo_Image/img/20230712230537.png</a></p>\n<p>空格键：预览&#x2F;关闭预览<br>ESC：关闭预览<br>回车：运行程序并关闭预览<br>CTRL+鼠标滚轮：缩放图片&#x2F;文档<br>鼠标滚轮：调节音量</p>\n<p>获取方式：微软商店</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cljv8uxm000017ci025mb0fux","category_id":"cljv8uxm500047ci03e8071as","_id":"cljv8uxmb000e7ci0gqbd4n36"},{"post_id":"cljv8uxm400037ci07dpz32la","category_id":"cljv8uxm9000a7ci0gm0c6kne","_id":"cljv8uxmc000i7ci07laq99kc"},{"post_id":"cljv8uxm700077ci0427edlph","category_id":"cljv8uxm9000a7ci0gm0c6kne","_id":"cljv8uxmd000k7ci01mc1c3rt"},{"post_id":"cljzumpt20004dgi0gcaahm9i","category_id":"cljzumpt50006dgi0g80tey22","_id":"cljzumptc000ddgi0bqt3gewe"},{"post_id":"cljzumpt40005dgi0327c52jn","category_id":"cljzumpt50006dgi0g80tey22","_id":"cljzumptc000gdgi0bh4x1g7h"},{"post_id":"cljzumpt80008dgi0guf79bza","category_id":"cljzumptc000cdgi04r84288s","_id":"cljzumptd000idgi0eju0321f"},{"post_id":"cljzuui3t0000psi06ykp1eq5","category_id":"cljzuocxw000kdgi091ytgyc4","_id":"cljzuui3v0002psi02u0me0pb"}],"PostTag":[{"post_id":"cljv8uxm000017ci025mb0fux","tag_id":"cljv8uxm700057ci07n9ggg33","_id":"cljv8uxma000c7ci0ctk71z3t"},{"post_id":"cljv8uxm400037ci07dpz32la","tag_id":"cljv8uxm9000b7ci06s480tbp","_id":"cljv8uxmc000h7ci050bq810l"},{"post_id":"cljv8uxm700077ci0427edlph","tag_id":"cljv8uxm9000b7ci06s480tbp","_id":"cljv8uxmd000j7ci0f5d9a5yh"},{"post_id":"cljzumpt20004dgi0gcaahm9i","tag_id":"cljzumpt70007dgi05x4z42ah","_id":"cljzumptb000bdgi0f38jhfxy"},{"post_id":"cljzumpt40005dgi0327c52jn","tag_id":"cljzumpt70007dgi05x4z42ah","_id":"cljzumptc000fdgi03o8icz5r"},{"post_id":"cljzumpt80008dgi0guf79bza","tag_id":"cljzumptc000edgi07fvi0zra","_id":"cljzumptd000hdgi00j37cziu"},{"post_id":"cljzuui3t0000psi06ykp1eq5","tag_id":"cljzuocxx000ldgi0c98n2wv5","_id":"cljzuui3u0001psi08kc8d3wg"}],"Tag":[{"name":"JS ES6","_id":"cljv8uxm700057ci07n9ggg33"},{"name":"GitHub","_id":"cljv8uxm9000b7ci06s480tbp"},{"name":"SpringBoot","_id":"cljzumpt70007dgi05x4z42ah"},{"name":"常用","_id":"cljzumptc000edgi07fvi0zra"},{"name":"软件","_id":"cljzuocxx000ldgi0c98n2wv5"}]}}